
unit tclDecls;
interface

{
  Automatically converted by H2Pas 1.0.0 from tclDecls.h
  The following command line parameters were used:
    tclDecls.h
}

Type
Pbyte  = ^byte;
Pchar  = ^char;
PClientData  = ^ClientData;
Pdouble  = ^double;
Plongint  = ^longint;
Pmp_int  = ^mp_int;
Pstat  = ^stat;
PTcl_ArgvInfo  = ^Tcl_ArgvInfo;
PTcl_AsyncProc  = ^Tcl_AsyncProc;
PTcl_Channel  = ^Tcl_Channel;
PTcl_ChannelProc  = ^Tcl_ChannelProc;
PTcl_ChannelType  = ^Tcl_ChannelType;
PTcl_CloseProc  = ^Tcl_CloseProc;
PTcl_CmdDeleteProc  = ^Tcl_CmdDeleteProc;
PTcl_CmdInfo  = ^Tcl_CmdInfo;
PTcl_CmdObjTraceDeleteProc  = ^Tcl_CmdObjTraceDeleteProc;
PTcl_CmdObjTraceProc  = ^Tcl_CmdObjTraceProc;
PTcl_CmdProc  = ^Tcl_CmdProc;
PTcl_CmdTraceProc  = ^Tcl_CmdTraceProc;
PTcl_CommandTraceProc  = ^Tcl_CommandTraceProc;
PTcl_Condition  = ^Tcl_Condition;
PTcl_Config  = ^Tcl_Config;
PTcl_DictSearch  = ^Tcl_DictSearch;
PTcl_DriverBlockModeProc  = ^Tcl_DriverBlockModeProc;
PTcl_DriverClose2Proc  = ^Tcl_DriverClose2Proc;
PTcl_DriverCloseProc  = ^Tcl_DriverCloseProc;
PTcl_DriverFlushProc  = ^Tcl_DriverFlushProc;
PTcl_DriverGetHandleProc  = ^Tcl_DriverGetHandleProc;
PTcl_DriverGetOptionProc  = ^Tcl_DriverGetOptionProc;
PTcl_DriverHandlerProc  = ^Tcl_DriverHandlerProc;
PTcl_DriverInputProc  = ^Tcl_DriverInputProc;
PTcl_DriverOutputProc  = ^Tcl_DriverOutputProc;
PTcl_DriverSeekProc  = ^Tcl_DriverSeekProc;
PTcl_DriverSetOptionProc  = ^Tcl_DriverSetOptionProc;
PTcl_DriverThreadActionProc  = ^Tcl_DriverThreadActionProc;
PTcl_DriverTruncateProc  = ^Tcl_DriverTruncateProc;
PTcl_DriverWatchProc  = ^Tcl_DriverWatchProc;
PTcl_DriverWideSeekProc  = ^Tcl_DriverWideSeekProc;
PTcl_DString  = ^Tcl_DString;
PTcl_Encoding  = ^Tcl_Encoding;
PTcl_EncodingState  = ^Tcl_EncodingState;
PTcl_EncodingType  = ^Tcl_EncodingType;
PTcl_Event  = ^Tcl_Event;
PTcl_EventCheckProc  = ^Tcl_EventCheckProc;
PTcl_EventDeleteProc  = ^Tcl_EventDeleteProc;
PTcl_EventSetupProc  = ^Tcl_EventSetupProc;
PTcl_ExitProc  = ^Tcl_ExitProc;
PTcl_FileProc  = ^Tcl_FileProc;
PTcl_Filesystem  = ^Tcl_Filesystem;
PTcl_FreeProc  = ^Tcl_FreeProc;
PTcl_FSUnloadFileProc  = ^Tcl_FSUnloadFileProc;
PTcl_GetTimeProc  = ^Tcl_GetTimeProc;
PTcl_GlobTypeData  = ^Tcl_GlobTypeData;
PTcl_HashEntry  = ^Tcl_HashEntry;
PTcl_HashKeyType  = ^Tcl_HashKeyType;
PTcl_HashSearch  = ^Tcl_HashSearch;
PTcl_HashTable  = ^Tcl_HashTable;
PTcl_IdleProc  = ^Tcl_IdleProc;
PTcl_Interp  = ^Tcl_Interp;
PTcl_InterpDeleteProc  = ^Tcl_InterpDeleteProc;
PTcl_LimitHandlerDeleteProc  = ^Tcl_LimitHandlerDeleteProc;
PTcl_LimitHandlerProc  = ^Tcl_LimitHandlerProc;
PTcl_LoadHandle  = ^Tcl_LoadHandle;
PTcl_MainLoopProc  = ^Tcl_MainLoopProc;
PTcl_MathProc  = ^Tcl_MathProc;
PTcl_Mutex  = ^Tcl_Mutex;
PTcl_Namespace  = ^Tcl_Namespace;
PTcl_NamespaceDeleteProc  = ^Tcl_NamespaceDeleteProc;
PTcl_NotifierProcs  = ^Tcl_NotifierProcs;
PTcl_NRPostProc  = ^Tcl_NRPostProc;
PTcl_Obj  = ^Tcl_Obj;
PTcl_ObjCmdProc  = ^Tcl_ObjCmdProc;
PTcl_ObjType  = ^Tcl_ObjType;
PTcl_PackageInitProc  = ^Tcl_PackageInitProc;
PTcl_Parse  = ^Tcl_Parse;
PTcl_Pid  = ^Tcl_Pid;
PTcl_RegExpInfo  = ^Tcl_RegExpInfo;
PTcl_SavedResult  = ^Tcl_SavedResult;
PTcl_ScaleTimeProc  = ^Tcl_ScaleTimeProc;
PTcl_StatBuf  = ^Tcl_StatBuf;
PTcl_TcpAcceptProc  = ^Tcl_TcpAcceptProc;
PTcl_ThreadCreateProc  = ^Tcl_ThreadCreateProc;
PTcl_ThreadDataKey  = ^Tcl_ThreadDataKey;
PTcl_ThreadId  = ^Tcl_ThreadId;
PTcl_Time  = ^Tcl_Time;
PTcl_TimerProc  = ^Tcl_TimerProc;
PTcl_Token  = ^Tcl_Token;
PTcl_UniChar  = ^Tcl_UniChar;
PTcl_ValueType  = ^Tcl_ValueType;
PTcl_VarTraceProc  = ^Tcl_VarTraceProc;
PTcl_WideInt  = ^Tcl_WideInt;
PTcl_ZlibStream  = ^Tcl_ZlibStream;
Putimbuf  = ^utimbuf;
{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


  {
   * tclDecls.h --
   *
   *	Declarations of functions in the platform independent public Tcl API.
   *
   * Copyright (c) 1998-1999 by Scriptics Corporation.
   *
   * See the file "license.terms" for information on usage and redistribution
   * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    }
{$ifndef _TCLDECLS}
{$define _TCLDECLS}  
{$undef TCL_STORAGE_CLASS}
{$ifdef BUILD_tcl}

  const
    TCL_STORAGE_CLASS = DLLEXPORT;    
{$else}
{$ifdef USE_TCL_STUBS}
{$define TCL_STORAGE_CLASS}  
{$else}

  const
    TCL_STORAGE_CLASS = DLLIMPORT;    
{$endif}
{$endif}
  {
   * WARNING: This file is automatically generated by the tools/genStubs.tcl
   * script.  Any modifications to the function declarations below should be made
   * in the generic/tcl.decls script.
    }
  { !BEGIN!: Do not edit below this line.  }
{ C++ extern C conditionnal removed }
  {
   * Exported function declarations:
    }
  { 0  }
(* error 
EXTERN int		Tcl_PkgProvideEx(Tcl_Interp *interp,
in declaration at line 45 *)
    { 1  }
(* error 
EXTERN CONST84_RETURN char * Tcl_PkgRequireEx(Tcl_Interp *interp,
(* error 
				const char *name, const char *version,
(* error 
				const char *name, const char *version,
(* error 
				int exact, void *clientDataPtr);
(* error 
				int exact, void *clientDataPtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 2  }
(* error 
EXTERN TCL_NORETURN void Tcl_Panic(const char *format, ...) TCL_FORMAT_PRINTF(1, 2);
(* error 
EXTERN TCL_NORETURN void Tcl_Panic(const char *format, ...) TCL_FORMAT_PRINTF(1, 2);
(* error 
EXTERN TCL_NORETURN void Tcl_Panic(const char *format, ...) TCL_FORMAT_PRINTF(1, 2);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 3  }
(* error 
EXTERN char *		Tcl_Alloc(unsigned int size);
in declaration at line 53 *)
    { 4  }
(* error 
EXTERN void		Tcl_Free(char *ptr);
in declaration at line 55 *)
    { 5  }
(* error 
EXTERN char *		Tcl_Realloc(char *ptr, unsigned int size);
in declaration at line 57 *)
    { 6  }
(* error 
EXTERN char *		Tcl_DbCkalloc(unsigned int size, const char *file,
in declaration at line 60 *)
    { 7  }
(* error 
EXTERN void		Tcl_DbCkfree(char *ptr, const char *file, int line);
in declaration at line 62 *)
    { 8  }
(* error 
EXTERN char *		Tcl_DbCkrealloc(char *ptr, unsigned int size,
in declaration at line 65 *)
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 9  }
(* error 
EXTERN void		Tcl_CreateFileHandler(int fd, int mask,
in declaration at line 69 *)
{$endif}
    { UNIX  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 9  }
(* error 
EXTERN void		Tcl_CreateFileHandler(int fd, int mask,
in declaration at line 74 *)
{$endif}
    { MACOSX  }
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 10  }
(* error 
EXTERN void		Tcl_DeleteFileHandler(int fd);
in declaration at line 78 *)
{$endif}
    { UNIX  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 10  }
(* error 
EXTERN void		Tcl_DeleteFileHandler(int fd);
in declaration at line 82 *)
{$endif}
    { MACOSX  }
    { 11  }
(* error 
EXTERN void		Tcl_SetTimer(const Tcl_Time *timePtr);
in declaration at line 85 *)
    { 12  }
(* error 
EXTERN void		Tcl_Sleep(int ms);
in declaration at line 87 *)
    { 13  }
(* error 
EXTERN int		Tcl_WaitForEvent(const Tcl_Time *timePtr);
in declaration at line 89 *)
    { 14  }
(* error 
EXTERN int		Tcl_AppendAllObjTypes(Tcl_Interp *interp,
in declaration at line 92 *)
    { 15  }
(* error 
EXTERN void		Tcl_AppendStringsToObj(Tcl_Obj *objPtr, ...);
in declaration at line 94 *)
    { 16  }
(* error 
EXTERN void		Tcl_AppendToObj(Tcl_Obj *objPtr, const char *bytes,
in declaration at line 97 *)
    { 17  }
(* error 
EXTERN Tcl_Obj *	Tcl_ConcatObj(int objc, Tcl_Obj *const objv[]);
(* error 
EXTERN Tcl_Obj *	Tcl_ConcatObj(int objc, Tcl_Obj *const objv[]);
 in declarator_list *)
 in declarator_list *)
    { 18  }
(* error 
EXTERN int		Tcl_ConvertToType(Tcl_Interp *interp,
in declaration at line 102 *)
    { 19  }
(* error 
EXTERN void		Tcl_DbDecrRefCount(Tcl_Obj *objPtr, const char *file,
in declaration at line 105 *)
    { 20  }
(* error 
EXTERN void		Tcl_DbIncrRefCount(Tcl_Obj *objPtr, const char *file,
in declaration at line 108 *)
    { 21  }
(* error 
EXTERN int		Tcl_DbIsShared(Tcl_Obj *objPtr, const char *file,
in declaration at line 111 *)
    { 22  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewBooleanObj(int boolValue, const char *file,
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewBooleanObj(int boolValue, const char *file,
(* error 
				int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 23  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewByteArrayObj(const unsigned char *bytes,
(* error 
				int length, const char *file, int line);
(* error 
				int length, const char *file, int line);
(* error 
				int length, const char *file, int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 24  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewDoubleObj(double doubleValue,
(* error 
				const char *file, int line);
(* error 
				const char *file, int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 25  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewListObj(int objc, Tcl_Obj *const *objv,
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewListObj(int objc, Tcl_Obj *const *objv,
(* error 
				const char *file, int line);
(* error 
				const char *file, int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 26  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewLongObj(long longValue, const char *file,
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewLongObj(long longValue, const char *file,
(* error 
				int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 27  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewObj(const char *file, int line);
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewObj(const char *file, int line);
 in declarator_list *)
 in declarator_list *)
    { 28  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewStringObj(const char *bytes, int length,
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewStringObj(const char *bytes, int length,
(* error 
				const char *file, int line);
(* error 
				const char *file, int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 29  }
(* error 
EXTERN Tcl_Obj *	Tcl_DuplicateObj(Tcl_Obj *objPtr);
 in declarator_list *)
    { 30  }
(* error 
EXTERN void		TclFreeObj(Tcl_Obj *objPtr);
in declaration at line 135 *)
    { 31  }
(* error 
EXTERN int		Tcl_GetBoolean(Tcl_Interp *interp, const char *src,
in declaration at line 138 *)
    { 32  }
(* error 
EXTERN int		Tcl_GetBooleanFromObj(Tcl_Interp *interp,
in declaration at line 141 *)
    { 33  }
(* error 
EXTERN unsigned char *	Tcl_GetByteArrayFromObj(Tcl_Obj *objPtr,
in declaration at line 144 *)
    { 34  }
(* error 
EXTERN int		Tcl_GetDouble(Tcl_Interp *interp, const char *src,
in declaration at line 147 *)
    { 35  }
(* error 
EXTERN int		Tcl_GetDoubleFromObj(Tcl_Interp *interp,
in declaration at line 150 *)
    { 36  }
(* error 
EXTERN int		Tcl_GetIndexFromObj(Tcl_Interp *interp,
in declaration at line 155 *)
    { 37  }
(* error 
EXTERN int		Tcl_GetInt(Tcl_Interp *interp, const char *src,
in declaration at line 158 *)
    { 38  }
(* error 
EXTERN int		Tcl_GetIntFromObj(Tcl_Interp *interp,
in declaration at line 161 *)
    { 39  }
(* error 
EXTERN int		Tcl_GetLongFromObj(Tcl_Interp *interp,
in declaration at line 164 *)
    { 40  }
(* error 
EXTERN CONST86 Tcl_ObjType * Tcl_GetObjType(const char *typeName);
 in declarator_list *)
    { 41  }
(* error 
EXTERN char *		Tcl_GetStringFromObj(Tcl_Obj *objPtr, int *lengthPtr);
in declaration at line 168 *)
    { 42  }
(* error 
EXTERN void		Tcl_InvalidateStringRep(Tcl_Obj *objPtr);
in declaration at line 170 *)
    { 43  }
(* error 
EXTERN int		Tcl_ListObjAppendList(Tcl_Interp *interp,
in declaration at line 173 *)
    { 44  }
(* error 
EXTERN int		Tcl_ListObjAppendElement(Tcl_Interp *interp,
in declaration at line 176 *)
    { 45  }
(* error 
EXTERN int		Tcl_ListObjGetElements(Tcl_Interp *interp,
in declaration at line 180 *)
    { 46  }
(* error 
EXTERN int		Tcl_ListObjIndex(Tcl_Interp *interp,
in declaration at line 184 *)
    { 47  }
(* error 
EXTERN int		Tcl_ListObjLength(Tcl_Interp *interp,
in declaration at line 187 *)
    { 48  }
(* error 
EXTERN int		Tcl_ListObjReplace(Tcl_Interp *interp,
in declaration at line 191 *)
    { 49  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewBooleanObj(int boolValue);
 in declarator_list *)
    { 50  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewByteArrayObj(const unsigned char *bytes,
(* error 
				int length);
 in declarator_list *)
 in declarator_list *)
    { 51  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewDoubleObj(double doubleValue);
 in declarator_list *)
    { 52  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewIntObj(int intValue);
 in declarator_list *)
    { 53  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewListObj(int objc, Tcl_Obj *const objv[]);
(* error 
EXTERN Tcl_Obj *	Tcl_NewListObj(int objc, Tcl_Obj *const objv[]);
 in declarator_list *)
 in declarator_list *)
    { 54  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewLongObj(long longValue);
 in declarator_list *)
    { 55  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewObj(void);
 in declarator_list *)
    { 56  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewStringObj(const char *bytes, int length);
(* error 
EXTERN Tcl_Obj *	Tcl_NewStringObj(const char *bytes, int length);
 in declarator_list *)
 in declarator_list *)
    { 57  }
(* error 
EXTERN void		Tcl_SetBooleanObj(Tcl_Obj *objPtr, int boolValue);
in declaration at line 210 *)
    { 58  }
(* error 
EXTERN unsigned char *	Tcl_SetByteArrayLength(Tcl_Obj *objPtr, int length);
in declaration at line 212 *)
    { 59  }
(* error 
EXTERN void		Tcl_SetByteArrayObj(Tcl_Obj *objPtr,
in declaration at line 215 *)
    { 60  }
(* error 
EXTERN void		Tcl_SetDoubleObj(Tcl_Obj *objPtr, double doubleValue);
in declaration at line 217 *)
    { 61  }
(* error 
EXTERN void		Tcl_SetIntObj(Tcl_Obj *objPtr, int intValue);
in declaration at line 219 *)
    { 62  }
(* error 
EXTERN void		Tcl_SetListObj(Tcl_Obj *objPtr, int objc,
in declaration at line 222 *)
    { 63  }
(* error 
EXTERN void		Tcl_SetLongObj(Tcl_Obj *objPtr, long longValue);
in declaration at line 224 *)
    { 64  }
(* error 
EXTERN void		Tcl_SetObjLength(Tcl_Obj *objPtr, int length);
in declaration at line 226 *)
    { 65  }
(* error 
EXTERN void		Tcl_SetStringObj(Tcl_Obj *objPtr, const char *bytes,
in declaration at line 229 *)
    { 66  }
(* error 
EXTERN void		Tcl_AddErrorInfo(Tcl_Interp *interp,
in declaration at line 232 *)
    { 67  }
(* error 
EXTERN void		Tcl_AddObjErrorInfo(Tcl_Interp *interp,
in declaration at line 235 *)
    { 68  }
(* error 
EXTERN void		Tcl_AllowExceptions(Tcl_Interp *interp);
in declaration at line 237 *)
    { 69  }
(* error 
EXTERN void		Tcl_AppendElement(Tcl_Interp *interp,
in declaration at line 240 *)
    { 70  }
(* error 
EXTERN void		Tcl_AppendResult(Tcl_Interp *interp, ...);
in declaration at line 242 *)
    { 71  }
(* error 
EXTERN Tcl_AsyncHandler	 Tcl_AsyncCreate(Tcl_AsyncProc *proc,
(* error 
				ClientData clientData);
 in declarator_list *)
 in declarator_list *)
    { 72  }
(* error 
EXTERN void		Tcl_AsyncDelete(Tcl_AsyncHandler async);
in declaration at line 247 *)
    { 73  }
(* error 
EXTERN int		Tcl_AsyncInvoke(Tcl_Interp *interp, int code);
in declaration at line 249 *)
    { 74  }
(* error 
EXTERN void		Tcl_AsyncMark(Tcl_AsyncHandler async);
in declaration at line 251 *)
    { 75  }
(* error 
EXTERN int		Tcl_AsyncReady(void);
in declaration at line 253 *)
    { 76  }
(* error 
EXTERN void		Tcl_BackgroundError(Tcl_Interp *interp);
in declaration at line 255 *)
    { 77  }
(* error 
EXTERN char		Tcl_Backslash(const char *src, int *readPtr);
in declaration at line 257 *)
    { 78  }
(* error 
EXTERN int		Tcl_BadChannelOption(Tcl_Interp *interp,
in declaration at line 261 *)
    { 79  }
(* error 
EXTERN void		Tcl_CallWhenDeleted(Tcl_Interp *interp,
in declaration at line 265 *)
    { 80  }
(* error 
EXTERN void		Tcl_CancelIdleCall(Tcl_IdleProc *idleProc,
in declaration at line 268 *)
    { 81  }
(* error 
EXTERN int		Tcl_Close(Tcl_Interp *interp, Tcl_Channel chan);
in declaration at line 270 *)
    { 82  }
(* error 
EXTERN int		Tcl_CommandComplete(const char *cmd);
in declaration at line 272 *)
    { 83  }
(* error 
EXTERN char *		Tcl_Concat(int argc, CONST84 char *const *argv);
in declaration at line 274 *)
    { 84  }
(* error 
EXTERN int		Tcl_ConvertElement(const char *src, char *dst,
in declaration at line 277 *)
    { 85  }
(* error 
EXTERN int		Tcl_ConvertCountedElement(const char *src,
in declaration at line 280 *)
    { 86  }
(* error 
EXTERN int		Tcl_CreateAlias(Tcl_Interp *slave,
in declaration at line 285 *)
    { 87  }
(* error 
EXTERN int		Tcl_CreateAliasObj(Tcl_Interp *slave,
in declaration at line 290 *)
    { 88  }
(* error 
EXTERN Tcl_Channel	Tcl_CreateChannel(const Tcl_ChannelType *typePtr,
(* error 
				const char *chanName,
(* error 
				ClientData instanceData, int mask);
(* error 
				ClientData instanceData, int mask);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 89  }
(* error 
EXTERN void		Tcl_CreateChannelHandler(Tcl_Channel chan, int mask,
in declaration at line 297 *)
    { 90  }
(* error 
EXTERN void		Tcl_CreateCloseHandler(Tcl_Channel chan,
in declaration at line 300 *)
    { 91  }
(* error 
EXTERN Tcl_Command	Tcl_CreateCommand(Tcl_Interp *interp,
(* error 
				const char *cmdName, Tcl_CmdProc *proc,
(* error 
				const char *cmdName, Tcl_CmdProc *proc,
(* error 
				ClientData clientData,
(* error 
				Tcl_CmdDeleteProc *deleteProc);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 92  }
(* error 
EXTERN void		Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc,
in declaration at line 309 *)
    { 93  }
(* error 
EXTERN void		Tcl_CreateExitHandler(Tcl_ExitProc *proc,
in declaration at line 312 *)
    { 94  }
(* error 
EXTERN Tcl_Interp *	Tcl_CreateInterp(void);
 in declarator_list *)
    { 95  }
(* error 
EXTERN void		Tcl_CreateMathFunc(Tcl_Interp *interp,
in declaration at line 319 *)
    { 96  }
(* error 
EXTERN Tcl_Command	Tcl_CreateObjCommand(Tcl_Interp *interp,
(* error 
				const char *cmdName, Tcl_ObjCmdProc *proc,
(* error 
				const char *cmdName, Tcl_ObjCmdProc *proc,
(* error 
				ClientData clientData,
(* error 
				Tcl_CmdDeleteProc *deleteProc);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 97  }
(* error 
EXTERN Tcl_Interp *	Tcl_CreateSlave(Tcl_Interp *interp,
(* error 
				const char *slaveName, int isSafe);
(* error 
				const char *slaveName, int isSafe);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 98  }
(* error 
EXTERN Tcl_TimerToken	Tcl_CreateTimerHandler(int milliseconds,
(* error 
				Tcl_TimerProc *proc, ClientData clientData);
(* error 
				Tcl_TimerProc *proc, ClientData clientData);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 99  }
(* error 
EXTERN Tcl_Trace	Tcl_CreateTrace(Tcl_Interp *interp, int level,
(* error 
EXTERN Tcl_Trace	Tcl_CreateTrace(Tcl_Interp *interp, int level,
(* error 
				Tcl_CmdTraceProc *proc,
(* error 
				ClientData clientData);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 100  }
(* error 
EXTERN void		Tcl_DeleteAssocData(Tcl_Interp *interp,
in declaration at line 337 *)
    { 101  }
(* error 
EXTERN void		Tcl_DeleteChannelHandler(Tcl_Channel chan,
in declaration at line 340 *)
    { 102  }
(* error 
EXTERN void		Tcl_DeleteCloseHandler(Tcl_Channel chan,
in declaration at line 343 *)
    { 103  }
(* error 
EXTERN int		Tcl_DeleteCommand(Tcl_Interp *interp,
in declaration at line 346 *)
    { 104  }
(* error 
EXTERN int		Tcl_DeleteCommandFromToken(Tcl_Interp *interp,
in declaration at line 349 *)
    { 105  }
(* error 
EXTERN void		Tcl_DeleteEvents(Tcl_EventDeleteProc *proc,
in declaration at line 352 *)
    { 106  }
(* error 
EXTERN void		Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc,
in declaration at line 356 *)
    { 107  }
(* error 
EXTERN void		Tcl_DeleteExitHandler(Tcl_ExitProc *proc,
in declaration at line 359 *)
    { 108  }
(* error 
EXTERN void		Tcl_DeleteHashEntry(Tcl_HashEntry *entryPtr);
in declaration at line 361 *)
    { 109  }
(* error 
EXTERN void		Tcl_DeleteHashTable(Tcl_HashTable *tablePtr);
in declaration at line 363 *)
    { 110  }
(* error 
EXTERN void		Tcl_DeleteInterp(Tcl_Interp *interp);
in declaration at line 365 *)
    { 111  }
(* error 
EXTERN void		Tcl_DetachPids(int numPids, Tcl_Pid *pidPtr);
in declaration at line 367 *)
    { 112  }
(* error 
EXTERN void		Tcl_DeleteTimerHandler(Tcl_TimerToken token);
in declaration at line 369 *)
    { 113  }
(* error 
EXTERN void		Tcl_DeleteTrace(Tcl_Interp *interp, Tcl_Trace trace);
in declaration at line 371 *)
    { 114  }
(* error 
EXTERN void		Tcl_DontCallWhenDeleted(Tcl_Interp *interp,
in declaration at line 375 *)
    { 115  }
(* error 
EXTERN int		Tcl_DoOneEvent(int flags);
in declaration at line 377 *)
    { 116  }
(* error 
EXTERN void		Tcl_DoWhenIdle(Tcl_IdleProc *proc,
in declaration at line 380 *)
    { 117  }
(* error 
EXTERN char *		Tcl_DStringAppend(Tcl_DString *dsPtr,
in declaration at line 383 *)
    { 118  }
(* error 
EXTERN char *		Tcl_DStringAppendElement(Tcl_DString *dsPtr,
in declaration at line 386 *)
    { 119  }
(* error 
EXTERN void		Tcl_DStringEndSublist(Tcl_DString *dsPtr);
in declaration at line 388 *)
    { 120  }
(* error 
EXTERN void		Tcl_DStringFree(Tcl_DString *dsPtr);
in declaration at line 390 *)
    { 121  }
(* error 
EXTERN void		Tcl_DStringGetResult(Tcl_Interp *interp,
in declaration at line 393 *)
    { 122  }
(* error 
EXTERN void		Tcl_DStringInit(Tcl_DString *dsPtr);
in declaration at line 395 *)
    { 123  }
(* error 
EXTERN void		Tcl_DStringResult(Tcl_Interp *interp,
in declaration at line 398 *)
    { 124  }
(* error 
EXTERN void		Tcl_DStringSetLength(Tcl_DString *dsPtr, int length);
in declaration at line 400 *)
    { 125  }
(* error 
EXTERN void		Tcl_DStringStartSublist(Tcl_DString *dsPtr);
in declaration at line 402 *)
    { 126  }
(* error 
EXTERN int		Tcl_Eof(Tcl_Channel chan);
in declaration at line 404 *)
    { 127  }
(* error 
EXTERN CONST84_RETURN char * Tcl_ErrnoId(void);
 in declarator_list *)
    { 128  }
(* error 
EXTERN CONST84_RETURN char * Tcl_ErrnoMsg(int err);
 in declarator_list *)
    { 129  }
(* error 
EXTERN int		Tcl_Eval(Tcl_Interp *interp, const char *script);
in declaration at line 410 *)
    { 130  }
(* error 
EXTERN int		Tcl_EvalFile(Tcl_Interp *interp,
in declaration at line 413 *)
    { 131  }
(* error 
EXTERN int		Tcl_EvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr);
in declaration at line 415 *)
    { 132  }
(* error 
EXTERN void		Tcl_EventuallyFree(ClientData clientData,
in declaration at line 418 *)
    { 133  }
(* error 
EXTERN TCL_NORETURN void Tcl_Exit(int status);
 in declarator_list *)
    { 134  }
(* error 
EXTERN int		Tcl_ExposeCommand(Tcl_Interp *interp,
in declaration at line 424 *)
    { 135  }
(* error 
EXTERN int		Tcl_ExprBoolean(Tcl_Interp *interp, const char *expr,
in declaration at line 427 *)
    { 136  }
(* error 
EXTERN int		Tcl_ExprBooleanObj(Tcl_Interp *interp,
in declaration at line 430 *)
    { 137  }
(* error 
EXTERN int		Tcl_ExprDouble(Tcl_Interp *interp, const char *expr,
in declaration at line 433 *)
    { 138  }
(* error 
EXTERN int		Tcl_ExprDoubleObj(Tcl_Interp *interp,
in declaration at line 436 *)
    { 139  }
(* error 
EXTERN int		Tcl_ExprLong(Tcl_Interp *interp, const char *expr,
in declaration at line 439 *)
    { 140  }
(* error 
EXTERN int		Tcl_ExprLongObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
in declaration at line 442 *)
    { 141  }
(* error 
EXTERN int		Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
in declaration at line 445 *)
    { 142  }
(* error 
EXTERN int		Tcl_ExprString(Tcl_Interp *interp, const char *expr);
in declaration at line 447 *)
    { 143  }
(* error 
EXTERN void		Tcl_Finalize(void);
in declaration at line 449 *)
    { 144  }
(* error 
EXTERN void		Tcl_FindExecutable(const char *argv0);
in declaration at line 451 *)
    { 145  }
(* error 
EXTERN Tcl_HashEntry *	Tcl_FirstHashEntry(Tcl_HashTable *tablePtr,
(* error 
				Tcl_HashSearch *searchPtr);
 in declarator_list *)
 in declarator_list *)
    { 146  }
(* error 
EXTERN int		Tcl_Flush(Tcl_Channel chan);
in declaration at line 456 *)
    { 147  }
(* error 
EXTERN void		Tcl_FreeResult(Tcl_Interp *interp);
in declaration at line 458 *)
    { 148  }
(* error 
EXTERN int		Tcl_GetAlias(Tcl_Interp *interp,
in declaration at line 464 *)
    { 149  }
(* error 
EXTERN int		Tcl_GetAliasObj(Tcl_Interp *interp,
in declaration at line 470 *)
    { 150  }
(* error 
EXTERN ClientData	Tcl_GetAssocData(Tcl_Interp *interp,
(* error 
				const char *name,
(* error 
				Tcl_InterpDeleteProc **procPtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 151  }
(* error 
EXTERN Tcl_Channel	Tcl_GetChannel(Tcl_Interp *interp,
(* error 
				const char *chanName, int *modePtr);
(* error 
				const char *chanName, int *modePtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 152  }
(* error 
EXTERN int		Tcl_GetChannelBufferSize(Tcl_Channel chan);
in declaration at line 479 *)
    { 153  }
(* error 
EXTERN int		Tcl_GetChannelHandle(Tcl_Channel chan, int direction,
in declaration at line 482 *)
    { 154  }
(* error 
EXTERN ClientData	Tcl_GetChannelInstanceData(Tcl_Channel chan);
 in declarator_list *)
    { 155  }
(* error 
EXTERN int		Tcl_GetChannelMode(Tcl_Channel chan);
in declaration at line 486 *)
    { 156  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetChannelName(Tcl_Channel chan);
 in declarator_list *)
    { 157  }
(* error 
EXTERN int		Tcl_GetChannelOption(Tcl_Interp *interp,
in declaration at line 492 *)
    { 158  }
(* error 
EXTERN CONST86 Tcl_ChannelType * Tcl_GetChannelType(Tcl_Channel chan);
 in declarator_list *)
    { 159  }
(* error 
EXTERN int		Tcl_GetCommandInfo(Tcl_Interp *interp,
in declaration at line 497 *)
    { 160  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetCommandName(Tcl_Interp *interp,
(* error 
				Tcl_Command command);
 in declarator_list *)
 in declarator_list *)
    { 161  }
(* error 
EXTERN int		Tcl_GetErrno(void);
in declaration at line 502 *)
    { 162  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetHostName(void);
 in declarator_list *)
    { 163  }
(* error 
EXTERN int		Tcl_GetInterpPath(Tcl_Interp *askInterp,
in declaration at line 507 *)
    { 164  }
(* error 
EXTERN Tcl_Interp *	Tcl_GetMaster(Tcl_Interp *interp);
 in declarator_list *)
    { 165  }
(* error 
EXTERN const char *	Tcl_GetNameOfExecutable(void);
 in declarator_list *)
    { 166  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetObjResult(Tcl_Interp *interp);
 in declarator_list *)
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 167  }
(* error 
EXTERN int		Tcl_GetOpenFile(Tcl_Interp *interp,
in declaration at line 518 *)
{$endif}
    { UNIX  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 167  }
(* error 
EXTERN int		Tcl_GetOpenFile(Tcl_Interp *interp,
in declaration at line 524 *)
{$endif}
    { MACOSX  }
    { 168  }
(* error 
EXTERN Tcl_PathType	Tcl_GetPathType(const char *path);
 in declarator_list *)
    { 169  }
(* error 
EXTERN int		Tcl_Gets(Tcl_Channel chan, Tcl_DString *dsPtr);
in declaration at line 529 *)
    { 170  }
(* error 
EXTERN int		Tcl_GetsObj(Tcl_Channel chan, Tcl_Obj *objPtr);
in declaration at line 531 *)
    { 171  }
(* error 
EXTERN int		Tcl_GetServiceMode(void);
in declaration at line 533 *)
    { 172  }
(* error 
EXTERN Tcl_Interp *	Tcl_GetSlave(Tcl_Interp *interp,
(* error 
				const char *slaveName);
 in declarator_list *)
 in declarator_list *)
    { 173  }
(* error 
EXTERN Tcl_Channel	Tcl_GetStdChannel(int type);
 in declarator_list *)
    { 174  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetStringResult(Tcl_Interp *interp);
 in declarator_list *)
    { 175  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetVar(Tcl_Interp *interp,
(* error 
				const char *varName, int flags);
(* error 
				const char *varName, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 176  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetVar2(Tcl_Interp *interp,
(* error 
				const char *part1, const char *part2,
(* error 
				const char *part1, const char *part2,
(* error 
				int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 177  }
(* error 
EXTERN int		Tcl_GlobalEval(Tcl_Interp *interp,
in declaration at line 550 *)
    { 178  }
(* error 
EXTERN int		Tcl_GlobalEvalObj(Tcl_Interp *interp,
in declaration at line 553 *)
    { 179  }
(* error 
EXTERN int		Tcl_HideCommand(Tcl_Interp *interp,
in declaration at line 557 *)
    { 180  }
(* error 
EXTERN int		Tcl_Init(Tcl_Interp *interp);
in declaration at line 559 *)
    { 181  }
(* error 
EXTERN void		Tcl_InitHashTable(Tcl_HashTable *tablePtr,
in declaration at line 562 *)
    { 182  }
(* error 
EXTERN int		Tcl_InputBlocked(Tcl_Channel chan);
in declaration at line 564 *)
    { 183  }
(* error 
EXTERN int		Tcl_InputBuffered(Tcl_Channel chan);
in declaration at line 566 *)
    { 184  }
(* error 
EXTERN int		Tcl_InterpDeleted(Tcl_Interp *interp);
in declaration at line 568 *)
    { 185  }
(* error 
EXTERN int		Tcl_IsSafe(Tcl_Interp *interp);
in declaration at line 570 *)
    { 186  }
(* error 
EXTERN char *		Tcl_JoinPath(int argc, CONST84 char *const *argv,
in declaration at line 573 *)
    { 187  }
(* error 
EXTERN int		Tcl_LinkVar(Tcl_Interp *interp, const char *varName,
in declaration at line 576 *)
    { Slot 188 is reserved  }
    { 189  }
(* error 
EXTERN Tcl_Channel	Tcl_MakeFileChannel(ClientData handle, int mode);
(* error 
EXTERN Tcl_Channel	Tcl_MakeFileChannel(ClientData handle, int mode);
 in declarator_list *)
 in declarator_list *)
    { 190  }
(* error 
EXTERN int		Tcl_MakeSafe(Tcl_Interp *interp);
in declaration at line 581 *)
    { 191  }
(* error 
EXTERN Tcl_Channel	Tcl_MakeTcpClientChannel(ClientData tcpSocket);
 in declarator_list *)
    { 192  }
(* error 
EXTERN char *		Tcl_Merge(int argc, CONST84 char *const *argv);
in declaration at line 585 *)
    { 193  }
(* error 
EXTERN Tcl_HashEntry *	Tcl_NextHashEntry(Tcl_HashSearch *searchPtr);
 in declarator_list *)
    { 194  }
(* error 
EXTERN void		Tcl_NotifyChannel(Tcl_Channel channel, int mask);
in declaration at line 589 *)
    { 195  }
(* error 
EXTERN Tcl_Obj *	Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
(* error 
EXTERN Tcl_Obj *	Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
(* error 
				Tcl_Obj *part2Ptr, int flags);
(* error 
				Tcl_Obj *part2Ptr, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 196  }
(* error 
EXTERN Tcl_Obj *	Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
(* error 
EXTERN Tcl_Obj *	Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
(* error 
				Tcl_Obj *part2Ptr, Tcl_Obj *newValuePtr,
(* error 
				Tcl_Obj *part2Ptr, Tcl_Obj *newValuePtr,
(* error 
				int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 197  }
(* error 
EXTERN Tcl_Channel	Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
(* error 
EXTERN Tcl_Channel	Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
(* error 
				CONST84 char **argv, int flags);
(* error 
				CONST84 char **argv, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 198  }
(* error 
EXTERN Tcl_Channel	Tcl_OpenFileChannel(Tcl_Interp *interp,
(* error 
				const char *fileName, const char *modeString,
(* error 
				const char *fileName, const char *modeString,
(* error 
				int permissions);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 199  }
(* error 
EXTERN Tcl_Channel	Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
(* error 
EXTERN Tcl_Channel	Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
(* error 
				const char *address, const char *myaddr,
(* error 
				const char *address, const char *myaddr,
(* error 
				int myport, int async);
(* error 
				int myport, int async);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 200  }
(* error 
EXTERN Tcl_Channel	Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
(* error 
EXTERN Tcl_Channel	Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
(* error 
				const char *host,
(* error 
				Tcl_TcpAcceptProc *acceptProc,
(* error 
				ClientData callbackData);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 201  }
(* error 
EXTERN void		Tcl_Preserve(ClientData data);
in declaration at line 614 *)
    { 202  }
(* error 
EXTERN void		Tcl_PrintDouble(Tcl_Interp *interp, double value,
in declaration at line 617 *)
    { 203  }
(* error 
EXTERN int		Tcl_PutEnv(const char *assignment);
in declaration at line 619 *)
    { 204  }
(* error 
EXTERN CONST84_RETURN char * Tcl_PosixError(Tcl_Interp *interp);
 in declarator_list *)
    { 205  }
(* error 
EXTERN void		Tcl_QueueEvent(Tcl_Event *evPtr,
in declaration at line 624 *)
    { 206  }
(* error 
EXTERN int		Tcl_Read(Tcl_Channel chan, char *bufPtr, int toRead);
in declaration at line 626 *)
    { 207  }
(* error 
EXTERN void		Tcl_ReapDetachedProcs(void);
in declaration at line 628 *)
    { 208  }
(* error 
EXTERN int		Tcl_RecordAndEval(Tcl_Interp *interp,
in declaration at line 631 *)
    { 209  }
(* error 
EXTERN int		Tcl_RecordAndEvalObj(Tcl_Interp *interp,
in declaration at line 634 *)
    { 210  }
(* error 
EXTERN void		Tcl_RegisterChannel(Tcl_Interp *interp,
in declaration at line 637 *)
    { 211  }
(* error 
EXTERN void		Tcl_RegisterObjType(const Tcl_ObjType *typePtr);
in declaration at line 639 *)
    { 212  }
(* error 
EXTERN Tcl_RegExp	Tcl_RegExpCompile(Tcl_Interp *interp,
(* error 
				const char *pattern);
 in declarator_list *)
 in declarator_list *)
    { 213  }
(* error 
EXTERN int		Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp,
in declaration at line 645 *)
    { 214  }
(* error 
EXTERN int		Tcl_RegExpMatch(Tcl_Interp *interp, const char *text,
in declaration at line 648 *)
    { 215  }
(* error 
EXTERN void		Tcl_RegExpRange(Tcl_RegExp regexp, int index,
in declaration at line 652 *)
    { 216  }
(* error 
EXTERN void		Tcl_Release(ClientData clientData);
in declaration at line 654 *)
    { 217  }
(* error 
EXTERN void		Tcl_ResetResult(Tcl_Interp *interp);
in declaration at line 656 *)
    { 218  }
(* error 
EXTERN int		Tcl_ScanElement(const char *src, int *flagPtr);
in declaration at line 658 *)
    { 219  }
(* error 
EXTERN int		Tcl_ScanCountedElement(const char *src, int length,
in declaration at line 661 *)
    { 220  }
(* error 
EXTERN int		Tcl_SeekOld(Tcl_Channel chan, int offset, int mode);
in declaration at line 663 *)
    { 221  }
(* error 
EXTERN int		Tcl_ServiceAll(void);
in declaration at line 665 *)
    { 222  }
(* error 
EXTERN int		Tcl_ServiceEvent(int flags);
in declaration at line 667 *)
    { 223  }
(* error 
EXTERN void		Tcl_SetAssocData(Tcl_Interp *interp,
in declaration at line 671 *)
    { 224  }
(* error 
EXTERN void		Tcl_SetChannelBufferSize(Tcl_Channel chan, int sz);
in declaration at line 673 *)
    { 225  }
(* error 
EXTERN int		Tcl_SetChannelOption(Tcl_Interp *interp,
in declaration at line 677 *)
    { 226  }
(* error 
EXTERN int		Tcl_SetCommandInfo(Tcl_Interp *interp,
in declaration at line 681 *)
    { 227  }
(* error 
EXTERN void		Tcl_SetErrno(int err);
in declaration at line 683 *)
    { 228  }
(* error 
EXTERN void		Tcl_SetErrorCode(Tcl_Interp *interp, ...);
in declaration at line 685 *)
    { 229  }
(* error 
EXTERN void		Tcl_SetMaxBlockTime(const Tcl_Time *timePtr);
in declaration at line 687 *)
    { 230  }
(* error 
EXTERN void		Tcl_SetPanicProc(
in declaration at line 690 *)
    { 231  }
(* error 
EXTERN int		Tcl_SetRecursionLimit(Tcl_Interp *interp, int depth);
in declaration at line 692 *)
    { 232  }
(* error 
EXTERN void		Tcl_SetResult(Tcl_Interp *interp, char *result,
in declaration at line 695 *)
    { 233  }
(* error 
EXTERN int		Tcl_SetServiceMode(int mode);
in declaration at line 697 *)
    { 234  }
(* error 
EXTERN void		Tcl_SetObjErrorCode(Tcl_Interp *interp,
in declaration at line 700 *)
    { 235  }
(* error 
EXTERN void		Tcl_SetObjResult(Tcl_Interp *interp,
in declaration at line 703 *)
    { 236  }
(* error 
EXTERN void		Tcl_SetStdChannel(Tcl_Channel channel, int type);
in declaration at line 705 *)
    { 237  }
(* error 
EXTERN CONST84_RETURN char * Tcl_SetVar(Tcl_Interp *interp,
(* error 
				const char *varName, const char *newValue,
(* error 
				const char *varName, const char *newValue,
(* error 
				int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 238  }
(* error 
EXTERN CONST84_RETURN char * Tcl_SetVar2(Tcl_Interp *interp,
(* error 
				const char *part1, const char *part2,
(* error 
				const char *part1, const char *part2,
(* error 
				const char *newValue, int flags);
(* error 
				const char *newValue, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 239  }
(* error 
EXTERN CONST84_RETURN char * Tcl_SignalId(int sig);
 in declarator_list *)
    { 240  }
(* error 
EXTERN CONST84_RETURN char * Tcl_SignalMsg(int sig);
 in declarator_list *)
    { 241  }
(* error 
EXTERN void		Tcl_SourceRCFile(Tcl_Interp *interp);
in declaration at line 719 *)
    { 242  }
(* error 
EXTERN int		Tcl_SplitList(Tcl_Interp *interp,
in declaration at line 723 *)
    { 243  }
(* error 
EXTERN void		Tcl_SplitPath(const char *path, int *argcPtr,
in declaration at line 726 *)
    { 244  }
(* error 
EXTERN void		Tcl_StaticPackage(Tcl_Interp *interp,
in declaration at line 731 *)
    { 245  }
(* error 
EXTERN int		Tcl_StringMatch(const char *str, const char *pattern);
in declaration at line 733 *)
    { 246  }
(* error 
EXTERN int		Tcl_TellOld(Tcl_Channel chan);
in declaration at line 735 *)
    { 247  }
(* error 
EXTERN int		Tcl_TraceVar(Tcl_Interp *interp, const char *varName,
in declaration at line 739 *)
    { 248  }
(* error 
EXTERN int		Tcl_TraceVar2(Tcl_Interp *interp, const char *part1,
in declaration at line 744 *)
    { 249  }
(* error 
EXTERN char *		Tcl_TranslateFileName(Tcl_Interp *interp,
in declaration at line 747 *)
    { 250  }
(* error 
EXTERN int		Tcl_Ungets(Tcl_Channel chan, const char *str,
in declaration at line 750 *)
    { 251  }
(* error 
EXTERN void		Tcl_UnlinkVar(Tcl_Interp *interp,
in declaration at line 753 *)
    { 252  }
(* error 
EXTERN int		Tcl_UnregisterChannel(Tcl_Interp *interp,
in declaration at line 756 *)
    { 253  }
(* error 
EXTERN int		Tcl_UnsetVar(Tcl_Interp *interp, const char *varName,
in declaration at line 759 *)
    { 254  }
(* error 
EXTERN int		Tcl_UnsetVar2(Tcl_Interp *interp, const char *part1,
in declaration at line 762 *)
    { 255  }
(* error 
EXTERN void		Tcl_UntraceVar(Tcl_Interp *interp,
in declaration at line 767 *)
    { 256  }
(* error 
EXTERN void		Tcl_UntraceVar2(Tcl_Interp *interp,
in declaration at line 772 *)
    { 257  }
(* error 
EXTERN void		Tcl_UpdateLinkedVar(Tcl_Interp *interp,
in declaration at line 775 *)
    { 258  }
(* error 
EXTERN int		Tcl_UpVar(Tcl_Interp *interp, const char *frameName,
in declaration at line 779 *)
    { 259  }
(* error 
EXTERN int		Tcl_UpVar2(Tcl_Interp *interp, const char *frameName,
in declaration at line 783 *)
    { 260  }
(* error 
EXTERN int		Tcl_VarEval(Tcl_Interp *interp, ...);
in declaration at line 785 *)
    { 261  }
(* error 
EXTERN ClientData	Tcl_VarTraceInfo(Tcl_Interp *interp,
(* error 
				const char *varName, int flags,
(* error 
				const char *varName, int flags,
(* error 
				Tcl_VarTraceProc *procPtr,
(* error 
				ClientData prevClientData);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 262  }
(* error 
EXTERN ClientData	Tcl_VarTraceInfo2(Tcl_Interp *interp,
(* error 
				const char *part1, const char *part2,
(* error 
				const char *part1, const char *part2,
(* error 
				int flags, Tcl_VarTraceProc *procPtr,
(* error 
				int flags, Tcl_VarTraceProc *procPtr,
(* error 
				ClientData prevClientData);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 263  }
(* error 
EXTERN int		Tcl_Write(Tcl_Channel chan, const char *s, int slen);
in declaration at line 797 *)
    { 264  }
(* error 
EXTERN void		Tcl_WrongNumArgs(Tcl_Interp *interp, int objc,
in declaration at line 800 *)
    { 265  }
(* error 
EXTERN int		Tcl_DumpActiveMemory(const char *fileName);
in declaration at line 802 *)
    { 266  }
(* error 
EXTERN void		Tcl_ValidateAllMemory(const char *file, int line);
in declaration at line 804 *)
    { 267  }
(* error 
EXTERN void		Tcl_AppendResultVA(Tcl_Interp *interp,
in declaration at line 807 *)
    { 268  }
(* error 
EXTERN void		Tcl_AppendStringsToObjVA(Tcl_Obj *objPtr,
in declaration at line 810 *)
    { 269  }
(* error 
EXTERN char *		Tcl_HashStats(Tcl_HashTable *tablePtr);
in declaration at line 812 *)
    { 270  }
(* error 
EXTERN CONST84_RETURN char * Tcl_ParseVar(Tcl_Interp *interp,
(* error 
				const char *start, CONST84 char **termPtr);
(* error 
				const char *start, CONST84 char **termPtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 271  }
(* error 
EXTERN CONST84_RETURN char * Tcl_PkgPresent(Tcl_Interp *interp,
(* error 
				const char *name, const char *version,
(* error 
				const char *name, const char *version,
(* error 
				int exact);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 272  }
(* error 
EXTERN CONST84_RETURN char * Tcl_PkgPresentEx(Tcl_Interp *interp,
(* error 
				const char *name, const char *version,
(* error 
				const char *name, const char *version,
(* error 
				int exact, void *clientDataPtr);
(* error 
				int exact, void *clientDataPtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 273  }
(* error 
EXTERN int		Tcl_PkgProvide(Tcl_Interp *interp, const char *name,
in declaration at line 826 *)
    { 274  }
(* error 
EXTERN CONST84_RETURN char * Tcl_PkgRequire(Tcl_Interp *interp,
(* error 
				const char *name, const char *version,
(* error 
				const char *name, const char *version,
(* error 
				int exact);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 275  }
(* error 
EXTERN void		Tcl_SetErrorCodeVA(Tcl_Interp *interp,
in declaration at line 833 *)
    { 276  }
(* error 
EXTERN int		Tcl_VarEvalVA(Tcl_Interp *interp, va_list argList);
in declaration at line 835 *)
    { 277  }
(* error 
EXTERN Tcl_Pid		Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options);
(* error 
EXTERN Tcl_Pid		Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options);
(* error 
EXTERN Tcl_Pid		Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 278  }
(* error 
EXTERN TCL_NORETURN void Tcl_PanicVA(const char *format, va_list argList);
(* error 
EXTERN TCL_NORETURN void Tcl_PanicVA(const char *format, va_list argList);
 in declarator_list *)
 in declarator_list *)
    { 279  }
(* error 
EXTERN void		Tcl_GetVersion(int *major, int *minor,
in declaration at line 842 *)
    { 280  }
(* error 
EXTERN void		Tcl_InitMemory(Tcl_Interp *interp);
in declaration at line 844 *)
    { 281  }
(* error 
EXTERN Tcl_Channel	Tcl_StackChannel(Tcl_Interp *interp,
(* error 
				const Tcl_ChannelType *typePtr,
(* error 
				ClientData instanceData, int mask,
(* error 
				ClientData instanceData, int mask,
(* error 
				Tcl_Channel prevChan);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 282  }
(* error 
EXTERN int		Tcl_UnstackChannel(Tcl_Interp *interp,
in declaration at line 852 *)
    { 283  }
(* error 
EXTERN Tcl_Channel	Tcl_GetStackedChannel(Tcl_Channel chan);
 in declarator_list *)
    { 284  }
(* error 
EXTERN void		Tcl_SetMainLoop(Tcl_MainLoopProc *proc);
in declaration at line 856 *)
    { Slot 285 is reserved  }
    { 286  }
(* error 
EXTERN void		Tcl_AppendObjToObj(Tcl_Obj *objPtr,
in declaration at line 860 *)
    { 287  }
(* error 
EXTERN Tcl_Encoding	Tcl_CreateEncoding(const Tcl_EncodingType *typePtr);
 in declarator_list *)
    { 288  }
(* error 
EXTERN void		Tcl_CreateThreadExitHandler(Tcl_ExitProc *proc,
in declaration at line 865 *)
    { 289  }
(* error 
EXTERN void		Tcl_DeleteThreadExitHandler(Tcl_ExitProc *proc,
in declaration at line 868 *)
    { 290  }
(* error 
EXTERN void		Tcl_DiscardResult(Tcl_SavedResult *statePtr);
in declaration at line 870 *)
    { 291  }
(* error 
EXTERN int		Tcl_EvalEx(Tcl_Interp *interp, const char *script,
in declaration at line 873 *)
    { 292  }
(* error 
EXTERN int		Tcl_EvalObjv(Tcl_Interp *interp, int objc,
in declaration at line 876 *)
    { 293  }
(* error 
EXTERN int		Tcl_EvalObjEx(Tcl_Interp *interp, Tcl_Obj *objPtr,
in declaration at line 879 *)
    { 294  }
(* error 
EXTERN void		Tcl_ExitThread(int status);
in declaration at line 881 *)
    { 295  }
(* error 
EXTERN int		Tcl_ExternalToUtf(Tcl_Interp *interp,
in declaration at line 888 *)
    { 296  }
(* error 
EXTERN char *		Tcl_ExternalToUtfDString(Tcl_Encoding encoding,
in declaration at line 892 *)
    { 297  }
(* error 
EXTERN void		Tcl_FinalizeThread(void);
in declaration at line 894 *)
    { 298  }
(* error 
EXTERN void		Tcl_FinalizeNotifier(ClientData clientData);
in declaration at line 896 *)
    { 299  }
(* error 
EXTERN void		Tcl_FreeEncoding(Tcl_Encoding encoding);
in declaration at line 898 *)
    { 300  }
(* error 
EXTERN Tcl_ThreadId	Tcl_GetCurrentThread(void);
 in declarator_list *)
    { 301  }
(* error 
EXTERN Tcl_Encoding	Tcl_GetEncoding(Tcl_Interp *interp, const char *name);
(* error 
EXTERN Tcl_Encoding	Tcl_GetEncoding(Tcl_Interp *interp, const char *name);
 in declarator_list *)
 in declarator_list *)
    { 302  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetEncodingName(Tcl_Encoding encoding);
 in declarator_list *)
    { 303  }
(* error 
EXTERN void		Tcl_GetEncodingNames(Tcl_Interp *interp);
in declaration at line 906 *)
    { 304  }
(* error 
EXTERN int		Tcl_GetIndexFromObjStruct(Tcl_Interp *interp,
in declaration at line 911 *)
    { 305  }
(* error 
EXTERN void *		Tcl_GetThreadData(Tcl_ThreadDataKey *keyPtr,
in declaration at line 914 *)
    { 306  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetVar2Ex(Tcl_Interp *interp, const char *part1,
(* error 
EXTERN Tcl_Obj *	Tcl_GetVar2Ex(Tcl_Interp *interp, const char *part1,
(* error 
				const char *part2, int flags);
(* error 
				const char *part2, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 307  }
(* error 
EXTERN ClientData	Tcl_InitNotifier(void);
 in declarator_list *)
    { 308  }
(* error 
EXTERN void		Tcl_MutexLock(Tcl_Mutex *mutexPtr);
in declaration at line 921 *)
    { 309  }
(* error 
EXTERN void		Tcl_MutexUnlock(Tcl_Mutex *mutexPtr);
in declaration at line 923 *)
    { 310  }
(* error 
EXTERN void		Tcl_ConditionNotify(Tcl_Condition *condPtr);
in declaration at line 925 *)
    { 311  }
(* error 
EXTERN void		Tcl_ConditionWait(Tcl_Condition *condPtr,
in declaration at line 928 *)
    { 312  }
(* error 
EXTERN int		Tcl_NumUtfChars(const char *src, int length);
in declaration at line 930 *)
    { 313  }
(* error 
EXTERN int		Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr,
in declaration at line 933 *)
    { 314  }
(* error 
EXTERN void		Tcl_RestoreResult(Tcl_Interp *interp,
in declaration at line 936 *)
    { 315  }
(* error 
EXTERN void		Tcl_SaveResult(Tcl_Interp *interp,
in declaration at line 939 *)
    { 316  }
(* error 
EXTERN int		Tcl_SetSystemEncoding(Tcl_Interp *interp,
in declaration at line 942 *)
    { 317  }
(* error 
EXTERN Tcl_Obj *	Tcl_SetVar2Ex(Tcl_Interp *interp, const char *part1,
(* error 
EXTERN Tcl_Obj *	Tcl_SetVar2Ex(Tcl_Interp *interp, const char *part1,
(* error 
				const char *part2, Tcl_Obj *newValuePtr,
(* error 
				const char *part2, Tcl_Obj *newValuePtr,
(* error 
				int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 318  }
(* error 
EXTERN void		Tcl_ThreadAlert(Tcl_ThreadId threadId);
in declaration at line 948 *)
    { 319  }
(* error 
EXTERN void		Tcl_ThreadQueueEvent(Tcl_ThreadId threadId,
in declaration at line 951 *)
    { 320  }
(* error 
EXTERN Tcl_UniChar	Tcl_UniCharAtIndex(const char *src, int index);
(* error 
EXTERN Tcl_UniChar	Tcl_UniCharAtIndex(const char *src, int index);
 in declarator_list *)
 in declarator_list *)
    { 321  }
(* error 
EXTERN Tcl_UniChar	Tcl_UniCharToLower(int ch);
 in declarator_list *)
    { 322  }
(* error 
EXTERN Tcl_UniChar	Tcl_UniCharToTitle(int ch);
 in declarator_list *)
    { 323  }
(* error 
EXTERN Tcl_UniChar	Tcl_UniCharToUpper(int ch);
 in declarator_list *)
    { 324  }
(* error 
EXTERN int		Tcl_UniCharToUtf(int ch, char *buf);
in declaration at line 961 *)
    { 325  }
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfAtIndex(const char *src, int index);
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfAtIndex(const char *src, int index);
 in declarator_list *)
 in declarator_list *)
    { 326  }
(* error 
EXTERN int		Tcl_UtfCharComplete(const char *src, int length);
in declaration at line 965 *)
    { 327  }
(* error 
EXTERN int		Tcl_UtfBackslash(const char *src, int *readPtr,
in declaration at line 968 *)
    { 328  }
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfFindFirst(const char *src, int ch);
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfFindFirst(const char *src, int ch);
 in declarator_list *)
 in declarator_list *)
    { 329  }
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfFindLast(const char *src, int ch);
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfFindLast(const char *src, int ch);
 in declarator_list *)
 in declarator_list *)
    { 330  }
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfNext(const char *src);
 in declarator_list *)
    { 331  }
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfPrev(const char *src, const char *start);
(* error 
EXTERN CONST84_RETURN char * Tcl_UtfPrev(const char *src, const char *start);
 in declarator_list *)
 in declarator_list *)
    { 332  }
(* error 
EXTERN int		Tcl_UtfToExternal(Tcl_Interp *interp,
in declaration at line 983 *)
    { 333  }
(* error 
EXTERN char *		Tcl_UtfToExternalDString(Tcl_Encoding encoding,
in declaration at line 987 *)
    { 334  }
(* error 
EXTERN int		Tcl_UtfToLower(char *src);
in declaration at line 989 *)
    { 335  }
(* error 
EXTERN int		Tcl_UtfToTitle(char *src);
in declaration at line 991 *)
    { 336  }
(* error 
EXTERN int		Tcl_UtfToUniChar(const char *src, Tcl_UniChar *chPtr);
in declaration at line 993 *)
    { 337  }
(* error 
EXTERN int		Tcl_UtfToUpper(char *src);
in declaration at line 995 *)
    { 338  }
(* error 
EXTERN int		Tcl_WriteChars(Tcl_Channel chan, const char *src,
in declaration at line 998 *)
    { 339  }
(* error 
EXTERN int		Tcl_WriteObj(Tcl_Channel chan, Tcl_Obj *objPtr);
in declaration at line 1000 *)
    { 340  }
(* error 
EXTERN char *		Tcl_GetString(Tcl_Obj *objPtr);
in declaration at line 1002 *)
    { 341  }
(* error 
EXTERN CONST84_RETURN char * Tcl_GetDefaultEncodingDir(void);
 in declarator_list *)
    { 342  }
(* error 
EXTERN void		Tcl_SetDefaultEncodingDir(const char *path);
in declaration at line 1006 *)
    { 343  }
(* error 
EXTERN void		Tcl_AlertNotifier(ClientData clientData);
in declaration at line 1008 *)
    { 344  }
(* error 
EXTERN void		Tcl_ServiceModeHook(int mode);
in declaration at line 1010 *)
    { 345  }
(* error 
EXTERN int		Tcl_UniCharIsAlnum(int ch);
in declaration at line 1012 *)
    { 346  }
(* error 
EXTERN int		Tcl_UniCharIsAlpha(int ch);
in declaration at line 1014 *)
    { 347  }
(* error 
EXTERN int		Tcl_UniCharIsDigit(int ch);
in declaration at line 1016 *)
    { 348  }
(* error 
EXTERN int		Tcl_UniCharIsLower(int ch);
in declaration at line 1018 *)
    { 349  }
(* error 
EXTERN int		Tcl_UniCharIsSpace(int ch);
in declaration at line 1020 *)
    { 350  }
(* error 
EXTERN int		Tcl_UniCharIsUpper(int ch);
in declaration at line 1022 *)
    { 351  }
(* error 
EXTERN int		Tcl_UniCharIsWordChar(int ch);
in declaration at line 1024 *)
    { 352  }
(* error 
EXTERN int		Tcl_UniCharLen(const Tcl_UniChar *uniStr);
in declaration at line 1026 *)
    { 353  }
(* error 
EXTERN int		Tcl_UniCharNcmp(const Tcl_UniChar *ucs,
in declaration at line 1030 *)
    { 354  }
(* error 
EXTERN char *		Tcl_UniCharToUtfDString(const Tcl_UniChar *uniStr,
in declaration at line 1033 *)
    { 355  }
(* error 
EXTERN Tcl_UniChar *	Tcl_UtfToUniCharDString(const char *src, int length,
(* error 
EXTERN Tcl_UniChar *	Tcl_UtfToUniCharDString(const char *src, int length,
(* error 
				Tcl_DString *dsPtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 356  }
(* error 
EXTERN Tcl_RegExp	Tcl_GetRegExpFromObj(Tcl_Interp *interp,
(* error 
				Tcl_Obj *patObj, int flags);
(* error 
				Tcl_Obj *patObj, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 357  }
(* error 
EXTERN Tcl_Obj *	Tcl_EvalTokens(Tcl_Interp *interp,
(* error 
				Tcl_Token *tokenPtr, int count);
(* error 
				Tcl_Token *tokenPtr, int count);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 358  }
(* error 
EXTERN void		Tcl_FreeParse(Tcl_Parse *parsePtr);
in declaration at line 1044 *)
    { 359  }
(* error 
EXTERN void		Tcl_LogCommandInfo(Tcl_Interp *interp,
in declaration at line 1048 *)
    { 360  }
(* error 
EXTERN int		Tcl_ParseBraces(Tcl_Interp *interp,
in declaration at line 1053 *)
    { 361  }
(* error 
EXTERN int		Tcl_ParseCommand(Tcl_Interp *interp,
in declaration at line 1057 *)
    { 362  }
(* error 
EXTERN int		Tcl_ParseExpr(Tcl_Interp *interp, const char *start,
in declaration at line 1060 *)
    { 363  }
(* error 
EXTERN int		Tcl_ParseQuotedString(Tcl_Interp *interp,
in declaration at line 1065 *)
    { 364  }
(* error 
EXTERN int		Tcl_ParseVarName(Tcl_Interp *interp,
in declaration at line 1069 *)
    { 365  }
(* error 
EXTERN char *		Tcl_GetCwd(Tcl_Interp *interp, Tcl_DString *cwdPtr);
in declaration at line 1071 *)
    { 366  }
(* error 
EXTERN int		Tcl_Chdir(const char *dirName);
in declaration at line 1073 *)
    { 367  }
(* error 
EXTERN int		Tcl_Access(const char *path, int mode);
in declaration at line 1075 *)
    { 368  }
(* error 
EXTERN int		Tcl_Stat(const char *path, struct stat *bufPtr);
in declaration at line 1077 *)
    { 369  }
(* error 
EXTERN int		Tcl_UtfNcmp(const char *s1, const char *s2,
in declaration at line 1080 *)
    { 370  }
(* error 
EXTERN int		Tcl_UtfNcasecmp(const char *s1, const char *s2,
in declaration at line 1083 *)
    { 371  }
(* error 
EXTERN int		Tcl_StringCaseMatch(const char *str,
in declaration at line 1086 *)
    { 372  }
(* error 
EXTERN int		Tcl_UniCharIsControl(int ch);
in declaration at line 1088 *)
    { 373  }
(* error 
EXTERN int		Tcl_UniCharIsGraph(int ch);
in declaration at line 1090 *)
    { 374  }
(* error 
EXTERN int		Tcl_UniCharIsPrint(int ch);
in declaration at line 1092 *)
    { 375  }
(* error 
EXTERN int		Tcl_UniCharIsPunct(int ch);
in declaration at line 1094 *)
    { 376  }
(* error 
EXTERN int		Tcl_RegExpExecObj(Tcl_Interp *interp,
in declaration at line 1098 *)
    { 377  }
(* error 
EXTERN void		Tcl_RegExpGetInfo(Tcl_RegExp regexp,
in declaration at line 1101 *)
    { 378  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewUnicodeObj(const Tcl_UniChar *unicode,
(* error 
				int numChars);
 in declarator_list *)
 in declarator_list *)
    { 379  }
(* error 
EXTERN void		Tcl_SetUnicodeObj(Tcl_Obj *objPtr,
in declaration at line 1107 *)
    { 380  }
(* error 
EXTERN int		Tcl_GetCharLength(Tcl_Obj *objPtr);
in declaration at line 1109 *)
    { 381  }
(* error 
EXTERN Tcl_UniChar	Tcl_GetUniChar(Tcl_Obj *objPtr, int index);
(* error 
EXTERN Tcl_UniChar	Tcl_GetUniChar(Tcl_Obj *objPtr, int index);
 in declarator_list *)
 in declarator_list *)
    { 382  }
(* error 
EXTERN Tcl_UniChar *	Tcl_GetUnicode(Tcl_Obj *objPtr);
 in declarator_list *)
    { 383  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetRange(Tcl_Obj *objPtr, int first, int last);
(* error 
EXTERN Tcl_Obj *	Tcl_GetRange(Tcl_Obj *objPtr, int first, int last);
(* error 
EXTERN Tcl_Obj *	Tcl_GetRange(Tcl_Obj *objPtr, int first, int last);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 384  }
(* error 
EXTERN void		Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr,
in declaration at line 1118 *)
    { 385  }
(* error 
EXTERN int		Tcl_RegExpMatchObj(Tcl_Interp *interp,
in declaration at line 1121 *)
    { 386  }
(* error 
EXTERN void		Tcl_SetNotifier(Tcl_NotifierProcs *notifierProcPtr);
in declaration at line 1123 *)
    { 387  }
(* error 
EXTERN Tcl_Mutex *	Tcl_GetAllocMutex(void);
 in declarator_list *)
    { 388  }
(* error 
EXTERN int		Tcl_GetChannelNames(Tcl_Interp *interp);
in declaration at line 1127 *)
    { 389  }
(* error 
EXTERN int		Tcl_GetChannelNamesEx(Tcl_Interp *interp,
in declaration at line 1130 *)
    { 390  }
(* error 
EXTERN int		Tcl_ProcObjCmd(ClientData clientData,
in declaration at line 1134 *)
    { 391  }
(* error 
EXTERN void		Tcl_ConditionFinalize(Tcl_Condition *condPtr);
in declaration at line 1136 *)
    { 392  }
(* error 
EXTERN void		Tcl_MutexFinalize(Tcl_Mutex *mutex);
in declaration at line 1138 *)
    { 393  }
(* error 
EXTERN int		Tcl_CreateThread(Tcl_ThreadId *idPtr,
in declaration at line 1143 *)
    { 394  }
(* error 
EXTERN int		Tcl_ReadRaw(Tcl_Channel chan, char *dst,
in declaration at line 1146 *)
    { 395  }
(* error 
EXTERN int		Tcl_WriteRaw(Tcl_Channel chan, const char *src,
in declaration at line 1149 *)
    { 396  }
(* error 
EXTERN Tcl_Channel	Tcl_GetTopChannel(Tcl_Channel chan);
 in declarator_list *)
    { 397  }
(* error 
EXTERN int		Tcl_ChannelBuffered(Tcl_Channel chan);
in declaration at line 1153 *)
    { 398  }
(* error 
EXTERN CONST84_RETURN char * Tcl_ChannelName(
 in declarator_list *)
    { 399  }
(* error 
EXTERN Tcl_ChannelTypeVersion Tcl_ChannelVersion(
 in declarator_list *)
    { 400  }
(* error 
EXTERN Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(
 in declarator_list *)
    { 401  }
(* error 
EXTERN Tcl_DriverCloseProc * Tcl_ChannelCloseProc(
 in declarator_list *)
    { 402  }
(* error 
EXTERN Tcl_DriverClose2Proc * Tcl_ChannelClose2Proc(
 in declarator_list *)
    { 403  }
(* error 
EXTERN Tcl_DriverInputProc * Tcl_ChannelInputProc(
 in declarator_list *)
    { 404  }
(* error 
EXTERN Tcl_DriverOutputProc * Tcl_ChannelOutputProc(
 in declarator_list *)
    { 405  }
(* error 
EXTERN Tcl_DriverSeekProc * Tcl_ChannelSeekProc(
 in declarator_list *)
    { 406  }
(* error 
EXTERN Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(
 in declarator_list *)
    { 407  }
(* error 
EXTERN Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(
 in declarator_list *)
    { 408  }
(* error 
EXTERN Tcl_DriverWatchProc * Tcl_ChannelWatchProc(
 in declarator_list *)
    { 409  }
(* error 
EXTERN Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(
 in declarator_list *)
    { 410  }
(* error 
EXTERN Tcl_DriverFlushProc * Tcl_ChannelFlushProc(
 in declarator_list *)
    { 411  }
(* error 
EXTERN Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(
 in declarator_list *)
    { 412  }
(* error 
EXTERN int		Tcl_JoinThread(Tcl_ThreadId threadId, int *result);
in declaration at line 1197 *)
    { 413  }
(* error 
EXTERN int		Tcl_IsChannelShared(Tcl_Channel channel);
in declaration at line 1199 *)
    { 414  }
(* error 
EXTERN int		Tcl_IsChannelRegistered(Tcl_Interp *interp,
in declaration at line 1202 *)
    { 415  }
(* error 
EXTERN void		Tcl_CutChannel(Tcl_Channel channel);
in declaration at line 1204 *)
    { 416  }
(* error 
EXTERN void		Tcl_SpliceChannel(Tcl_Channel channel);
in declaration at line 1206 *)
    { 417  }
(* error 
EXTERN void		Tcl_ClearChannelHandlers(Tcl_Channel channel);
in declaration at line 1208 *)
    { 418  }
(* error 
EXTERN int		Tcl_IsChannelExisting(const char *channelName);
in declaration at line 1210 *)
    { 419  }
(* error 
EXTERN int		Tcl_UniCharNcasecmp(const Tcl_UniChar *ucs,
in declaration at line 1214 *)
    { 420  }
(* error 
EXTERN int		Tcl_UniCharCaseMatch(const Tcl_UniChar *uniStr,
in declaration at line 1217 *)
    { 421  }
(* error 
EXTERN Tcl_HashEntry *	Tcl_FindHashEntry(Tcl_HashTable *tablePtr,
(* error 
				const void *key);
 in declarator_list *)
 in declarator_list *)
    { 422  }
(* error 
EXTERN Tcl_HashEntry *	Tcl_CreateHashEntry(Tcl_HashTable *tablePtr,
(* error 
				const void *key, int *newPtr);
(* error 
				const void *key, int *newPtr);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 423  }
(* error 
EXTERN void		Tcl_InitCustomHashTable(Tcl_HashTable *tablePtr,
in declaration at line 1226 *)
    { 424  }
(* error 
EXTERN void		Tcl_InitObjHashTable(Tcl_HashTable *tablePtr);
in declaration at line 1228 *)
    { 425  }
(* error 
EXTERN ClientData	Tcl_CommandTraceInfo(Tcl_Interp *interp,
(* error 
				const char *varName, int flags,
(* error 
				const char *varName, int flags,
(* error 
				Tcl_CommandTraceProc *procPtr,
(* error 
				ClientData prevClientData);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 426  }
(* error 
EXTERN int		Tcl_TraceCommand(Tcl_Interp *interp,
in declaration at line 1238 *)
    { 427  }
(* error 
EXTERN void		Tcl_UntraceCommand(Tcl_Interp *interp,
in declaration at line 1243 *)
    { 428  }
(* error 
EXTERN char *		Tcl_AttemptAlloc(unsigned int size);
in declaration at line 1245 *)
    { 429  }
(* error 
EXTERN char *		Tcl_AttemptDbCkalloc(unsigned int size,
in declaration at line 1248 *)
    { 430  }
(* error 
EXTERN char *		Tcl_AttemptRealloc(char *ptr, unsigned int size);
in declaration at line 1250 *)
    { 431  }
(* error 
EXTERN char *		Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size,
in declaration at line 1253 *)
    { 432  }
(* error 
EXTERN int		Tcl_AttemptSetObjLength(Tcl_Obj *objPtr, int length);
in declaration at line 1255 *)
    { 433  }
(* error 
EXTERN Tcl_ThreadId	Tcl_GetChannelThread(Tcl_Channel channel);
 in declarator_list *)
    { 434  }
(* error 
EXTERN Tcl_UniChar *	Tcl_GetUnicodeFromObj(Tcl_Obj *objPtr,
(* error 
				int *lengthPtr);
 in declarator_list *)
 in declarator_list *)
    { 435  }
(* error 
EXTERN int		Tcl_GetMathFuncInfo(Tcl_Interp *interp,
in declaration at line 1266 *)
    { 436  }
(* error 
EXTERN Tcl_Obj *	Tcl_ListMathFuncs(Tcl_Interp *interp,
(* error 
				const char *pattern);
 in declarator_list *)
 in declarator_list *)
    { 437  }
(* error 
EXTERN Tcl_Obj *	Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
(* error 
EXTERN Tcl_Obj *	Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
(* error 
				int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 438  }
(* error 
EXTERN int		Tcl_DetachChannel(Tcl_Interp *interp,
in declaration at line 1275 *)
    { 439  }
(* error 
EXTERN int		Tcl_IsStandardChannel(Tcl_Channel channel);
in declaration at line 1277 *)
    { 440  }
(* error 
EXTERN int		Tcl_FSCopyFile(Tcl_Obj *srcPathPtr,
in declaration at line 1280 *)
    { 441  }
(* error 
EXTERN int		Tcl_FSCopyDirectory(Tcl_Obj *srcPathPtr,
in declaration at line 1283 *)
    { 442  }
(* error 
EXTERN int		Tcl_FSCreateDirectory(Tcl_Obj *pathPtr);
in declaration at line 1285 *)
    { 443  }
(* error 
EXTERN int		Tcl_FSDeleteFile(Tcl_Obj *pathPtr);
in declaration at line 1287 *)
    { 444  }
(* error 
EXTERN int		Tcl_FSLoadFile(Tcl_Interp *interp, Tcl_Obj *pathPtr,
in declaration at line 1294 *)
    { 445  }
(* error 
EXTERN int		Tcl_FSMatchInDirectory(Tcl_Interp *interp,
in declaration at line 1298 *)
    { 446  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr,
(* error 
EXTERN Tcl_Obj *	Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr,
(* error 
				int linkAction);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 447  }
(* error 
EXTERN int		Tcl_FSRemoveDirectory(Tcl_Obj *pathPtr,
in declaration at line 1304 *)
    { 448  }
(* error 
EXTERN int		Tcl_FSRenameFile(Tcl_Obj *srcPathPtr,
in declaration at line 1307 *)
    { 449  }
(* error 
EXTERN int		Tcl_FSLstat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf);
in declaration at line 1309 *)
    { 450  }
(* error 
EXTERN int		Tcl_FSUtime(Tcl_Obj *pathPtr, struct utimbuf *tval);
in declaration at line 1311 *)
    { 451  }
(* error 
EXTERN int		Tcl_FSFileAttrsGet(Tcl_Interp *interp, int index,
in declaration at line 1314 *)
    { 452  }
(* error 
EXTERN int		Tcl_FSFileAttrsSet(Tcl_Interp *interp, int index,
in declaration at line 1317 *)
    { 453  }
(* error 
EXTERN const char *CONST86 * Tcl_FSFileAttrStrings(Tcl_Obj *pathPtr,
(* error 
				Tcl_Obj **objPtrRef);
 in declarator_list *)
 in declarator_list *)
    { 454  }
(* error 
EXTERN int		Tcl_FSStat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf);
in declaration at line 1322 *)
    { 455  }
(* error 
EXTERN int		Tcl_FSAccess(Tcl_Obj *pathPtr, int mode);
in declaration at line 1324 *)
    { 456  }
(* error 
EXTERN Tcl_Channel	Tcl_FSOpenFileChannel(Tcl_Interp *interp,
(* error 
				Tcl_Obj *pathPtr, const char *modeString,
(* error 
				Tcl_Obj *pathPtr, const char *modeString,
(* error 
				int permissions);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 457  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSGetCwd(Tcl_Interp *interp);
 in declarator_list *)
    { 458  }
(* error 
EXTERN int		Tcl_FSChdir(Tcl_Obj *pathPtr);
in declaration at line 1332 *)
    { 459  }
(* error 
EXTERN int		Tcl_FSConvertToPathType(Tcl_Interp *interp,
in declaration at line 1335 *)
    { 460  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSJoinPath(Tcl_Obj *listObj, int elements);
(* error 
EXTERN Tcl_Obj *	Tcl_FSJoinPath(Tcl_Obj *listObj, int elements);
 in declarator_list *)
 in declarator_list *)
    { 461  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSSplitPath(Tcl_Obj *pathPtr, int *lenPtr);
(* error 
EXTERN Tcl_Obj *	Tcl_FSSplitPath(Tcl_Obj *pathPtr, int *lenPtr);
 in declarator_list *)
 in declarator_list *)
    { 462  }
(* error 
EXTERN int		Tcl_FSEqualPaths(Tcl_Obj *firstPtr,
in declaration at line 1342 *)
    { 463  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSGetNormalizedPath(Tcl_Interp *interp,
(* error 
				Tcl_Obj *pathPtr);
 in declarator_list *)
 in declarator_list *)
    { 464  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSJoinToPath(Tcl_Obj *pathPtr, int objc,
(* error 
EXTERN Tcl_Obj *	Tcl_FSJoinToPath(Tcl_Obj *pathPtr, int objc,
(* error 
				Tcl_Obj *const objv[]);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 465  }
(* error 
EXTERN ClientData	Tcl_FSGetInternalRep(Tcl_Obj *pathPtr,
(* error 
				const Tcl_Filesystem *fsPtr);
 in declarator_list *)
 in declarator_list *)
    { 466  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSGetTranslatedPath(Tcl_Interp *interp,
(* error 
				Tcl_Obj *pathPtr);
 in declarator_list *)
 in declarator_list *)
    { 467  }
(* error 
EXTERN int		Tcl_FSEvalFile(Tcl_Interp *interp, Tcl_Obj *fileName);
in declaration at line 1356 *)
    { 468  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSNewNativePath(
(* error 
				ClientData clientData);
 in declarator_list *)
 in declarator_list *)
    { 469  }
(* error 
EXTERN const void *	Tcl_FSGetNativePath(Tcl_Obj *pathPtr);
 in declarator_list *)
    { 470  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSFileSystemInfo(Tcl_Obj *pathPtr);
 in declarator_list *)
    { 471  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSPathSeparator(Tcl_Obj *pathPtr);
 in declarator_list *)
    { 472  }
(* error 
EXTERN Tcl_Obj *	Tcl_FSListVolumes(void);
 in declarator_list *)
    { 473  }
(* error 
EXTERN int		Tcl_FSRegister(ClientData clientData,
in declaration at line 1371 *)
    { 474  }
(* error 
EXTERN int		Tcl_FSUnregister(const Tcl_Filesystem *fsPtr);
in declaration at line 1373 *)
    { 475  }
(* error 
EXTERN ClientData	Tcl_FSData(const Tcl_Filesystem *fsPtr);
 in declarator_list *)
    { 476  }
(* error 
EXTERN const char *	Tcl_FSGetTranslatedStringPath(Tcl_Interp *interp,
(* error 
				Tcl_Obj *pathPtr);
 in declarator_list *)
 in declarator_list *)
    { 477  }
(* error 
EXTERN CONST86 Tcl_Filesystem * Tcl_FSGetFileSystemForPath(Tcl_Obj *pathPtr);
 in declarator_list *)
    { 478  }
(* error 
EXTERN Tcl_PathType	Tcl_FSGetPathType(Tcl_Obj *pathPtr);
 in declarator_list *)
    { 479  }
(* error 
EXTERN int		Tcl_OutputBuffered(Tcl_Channel chan);
in declaration at line 1384 *)
    { 480  }
(* error 
EXTERN void		Tcl_FSMountsChanged(const Tcl_Filesystem *fsPtr);
in declaration at line 1386 *)
    { 481  }
(* error 
EXTERN int		Tcl_EvalTokensStandard(Tcl_Interp *interp,
in declaration at line 1389 *)
    { 482  }
(* error 
EXTERN void		Tcl_GetTime(Tcl_Time *timeBuf);
in declaration at line 1391 *)
    { 483  }
(* error 
EXTERN Tcl_Trace	Tcl_CreateObjTrace(Tcl_Interp *interp, int level,
(* error 
EXTERN Tcl_Trace	Tcl_CreateObjTrace(Tcl_Interp *interp, int level,
(* error 
				int flags, Tcl_CmdObjTraceProc *objProc,
(* error 
				int flags, Tcl_CmdObjTraceProc *objProc,
(* error 
				ClientData clientData,
(* error 
				Tcl_CmdObjTraceDeleteProc *delProc);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 484  }
(* error 
EXTERN int		Tcl_GetCommandInfoFromToken(Tcl_Command token,
in declaration at line 1399 *)
    { 485  }
(* error 
EXTERN int		Tcl_SetCommandInfoFromToken(Tcl_Command token,
in declaration at line 1402 *)
    { 486  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewWideIntObj(Tcl_WideInt wideValue,
(* error 
				const char *file, int line);
(* error 
				const char *file, int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 487  }
(* error 
EXTERN int		Tcl_GetWideIntFromObj(Tcl_Interp *interp,
in declaration at line 1408 *)
    { 488  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewWideIntObj(Tcl_WideInt wideValue);
 in declarator_list *)
    { 489  }
(* error 
EXTERN void		Tcl_SetWideIntObj(Tcl_Obj *objPtr,
in declaration at line 1413 *)
    { 490  }
(* error 
EXTERN Tcl_StatBuf *	Tcl_AllocStatBuf(void);
 in declarator_list *)
    { 491  }
(* error 
EXTERN Tcl_WideInt	Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset,
(* error 
EXTERN Tcl_WideInt	Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset,
(* error 
				int mode);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 492  }
(* error 
EXTERN Tcl_WideInt	Tcl_Tell(Tcl_Channel chan);
 in declarator_list *)
    { 493  }
(* error 
EXTERN Tcl_DriverWideSeekProc * Tcl_ChannelWideSeekProc(
 in declarator_list *)
    { 494  }
(* error 
EXTERN int		Tcl_DictObjPut(Tcl_Interp *interp, Tcl_Obj *dictPtr,
in declaration at line 1426 *)
    { 495  }
(* error 
EXTERN int		Tcl_DictObjGet(Tcl_Interp *interp, Tcl_Obj *dictPtr,
in declaration at line 1429 *)
    { 496  }
(* error 
EXTERN int		Tcl_DictObjRemove(Tcl_Interp *interp,
in declaration at line 1432 *)
    { 497  }
(* error 
EXTERN int		Tcl_DictObjSize(Tcl_Interp *interp, Tcl_Obj *dictPtr,
in declaration at line 1435 *)
    { 498  }
(* error 
EXTERN int		Tcl_DictObjFirst(Tcl_Interp *interp,
in declaration at line 1440 *)
    { 499  }
(* error 
EXTERN void		Tcl_DictObjNext(Tcl_DictSearch *searchPtr,
in declaration at line 1444 *)
    { 500  }
(* error 
EXTERN void		Tcl_DictObjDone(Tcl_DictSearch *searchPtr);
in declaration at line 1446 *)
    { 501  }
(* error 
EXTERN int		Tcl_DictObjPutKeyList(Tcl_Interp *interp,
in declaration at line 1450 *)
    { 502  }
(* error 
EXTERN int		Tcl_DictObjRemoveKeyList(Tcl_Interp *interp,
in declaration at line 1454 *)
    { 503  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewDictObj(void);
 in declarator_list *)
    { 504  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewDictObj(const char *file, int line);
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewDictObj(const char *file, int line);
 in declarator_list *)
 in declarator_list *)
    { 505  }
(* error 
EXTERN void		Tcl_RegisterConfig(Tcl_Interp *interp,
in declaration at line 1463 *)
    { 506  }
(* error 
EXTERN Tcl_Namespace *	Tcl_CreateNamespace(Tcl_Interp *interp,
(* error 
				const char *name, ClientData clientData,
(* error 
				const char *name, ClientData clientData,
(* error 
				Tcl_NamespaceDeleteProc *deleteProc);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 507  }
(* error 
EXTERN void		Tcl_DeleteNamespace(Tcl_Namespace *nsPtr);
in declaration at line 1469 *)
    { 508  }
(* error 
EXTERN int		Tcl_AppendExportList(Tcl_Interp *interp,
in declaration at line 1472 *)
    { 509  }
(* error 
EXTERN int		Tcl_Export(Tcl_Interp *interp, Tcl_Namespace *nsPtr,
in declaration at line 1475 *)
    { 510  }
(* error 
EXTERN int		Tcl_Import(Tcl_Interp *interp, Tcl_Namespace *nsPtr,
in declaration at line 1478 *)
    { 511  }
(* error 
EXTERN int		Tcl_ForgetImport(Tcl_Interp *interp,
in declaration at line 1481 *)
    { 512  }
(* error 
EXTERN Tcl_Namespace *	Tcl_GetCurrentNamespace(Tcl_Interp *interp);
 in declarator_list *)
    { 513  }
(* error 
EXTERN Tcl_Namespace *	Tcl_GetGlobalNamespace(Tcl_Interp *interp);
 in declarator_list *)
    { 514  }
(* error 
EXTERN Tcl_Namespace *	Tcl_FindNamespace(Tcl_Interp *interp,
(* error 
				const char *name,
(* error 
				Tcl_Namespace *contextNsPtr, int flags);
(* error 
				Tcl_Namespace *contextNsPtr, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 515  }
(* error 
EXTERN Tcl_Command	Tcl_FindCommand(Tcl_Interp *interp, const char *name,
(* error 
EXTERN Tcl_Command	Tcl_FindCommand(Tcl_Interp *interp, const char *name,
(* error 
				Tcl_Namespace *contextNsPtr, int flags);
(* error 
				Tcl_Namespace *contextNsPtr, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 516  }
(* error 
EXTERN Tcl_Command	Tcl_GetCommandFromObj(Tcl_Interp *interp,
(* error 
				Tcl_Obj *objPtr);
 in declarator_list *)
 in declarator_list *)
    { 517  }
(* error 
EXTERN void		Tcl_GetCommandFullName(Tcl_Interp *interp,
in declaration at line 1498 *)
    { 518  }
(* error 
EXTERN int		Tcl_FSEvalFileEx(Tcl_Interp *interp,
in declaration at line 1501 *)
    { 519  }
(* error 
EXTERN Tcl_ExitProc *	Tcl_SetExitProc(TCL_NORETURN1 Tcl_ExitProc *proc);
 in declarator_list *)
    { 520  }
(* error 
EXTERN void		Tcl_LimitAddHandler(Tcl_Interp *interp, int type,
in declaration at line 1508 *)
    { 521  }
(* error 
EXTERN void		Tcl_LimitRemoveHandler(Tcl_Interp *interp, int type,
in declaration at line 1512 *)
    { 522  }
(* error 
EXTERN int		Tcl_LimitReady(Tcl_Interp *interp);
in declaration at line 1514 *)
    { 523  }
(* error 
EXTERN int		Tcl_LimitCheck(Tcl_Interp *interp);
in declaration at line 1516 *)
    { 524  }
(* error 
EXTERN int		Tcl_LimitExceeded(Tcl_Interp *interp);
in declaration at line 1518 *)
    { 525  }
(* error 
EXTERN void		Tcl_LimitSetCommands(Tcl_Interp *interp,
in declaration at line 1521 *)
    { 526  }
(* error 
EXTERN void		Tcl_LimitSetTime(Tcl_Interp *interp,
in declaration at line 1524 *)
    { 527  }
(* error 
EXTERN void		Tcl_LimitSetGranularity(Tcl_Interp *interp, int type,
in declaration at line 1527 *)
    { 528  }
(* error 
EXTERN int		Tcl_LimitTypeEnabled(Tcl_Interp *interp, int type);
in declaration at line 1529 *)
    { 529  }
(* error 
EXTERN int		Tcl_LimitTypeExceeded(Tcl_Interp *interp, int type);
in declaration at line 1531 *)
    { 530  }
(* error 
EXTERN void		Tcl_LimitTypeSet(Tcl_Interp *interp, int type);
in declaration at line 1533 *)
    { 531  }
(* error 
EXTERN void		Tcl_LimitTypeReset(Tcl_Interp *interp, int type);
in declaration at line 1535 *)
    { 532  }
(* error 
EXTERN int		Tcl_LimitGetCommands(Tcl_Interp *interp);
in declaration at line 1537 *)
    { 533  }
(* error 
EXTERN void		Tcl_LimitGetTime(Tcl_Interp *interp,
in declaration at line 1540 *)
    { 534  }
(* error 
EXTERN int		Tcl_LimitGetGranularity(Tcl_Interp *interp, int type);
in declaration at line 1542 *)
    { 535  }
(* error 
EXTERN Tcl_InterpState	Tcl_SaveInterpState(Tcl_Interp *interp, int status);
(* error 
EXTERN Tcl_InterpState	Tcl_SaveInterpState(Tcl_Interp *interp, int status);
 in declarator_list *)
 in declarator_list *)
    { 536  }
(* error 
EXTERN int		Tcl_RestoreInterpState(Tcl_Interp *interp,
in declaration at line 1547 *)
    { 537  }
(* error 
EXTERN void		Tcl_DiscardInterpState(Tcl_InterpState state);
in declaration at line 1549 *)
    { 538  }
(* error 
EXTERN int		Tcl_SetReturnOptions(Tcl_Interp *interp,
in declaration at line 1552 *)
    { 539  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetReturnOptions(Tcl_Interp *interp, int result);
(* error 
EXTERN Tcl_Obj *	Tcl_GetReturnOptions(Tcl_Interp *interp, int result);
 in declarator_list *)
 in declarator_list *)
    { 540  }
(* error 
EXTERN int		Tcl_IsEnsemble(Tcl_Command token);
in declaration at line 1556 *)
    { 541  }
(* error 
EXTERN Tcl_Command	Tcl_CreateEnsemble(Tcl_Interp *interp,
(* error 
				const char *name,
(* error 
				Tcl_Namespace *namespacePtr, int flags);
(* error 
				Tcl_Namespace *namespacePtr, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 542  }
(* error 
EXTERN Tcl_Command	Tcl_FindEnsemble(Tcl_Interp *interp,
(* error 
				Tcl_Obj *cmdNameObj, int flags);
(* error 
				Tcl_Obj *cmdNameObj, int flags);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 543  }
(* error 
EXTERN int		Tcl_SetEnsembleSubcommandList(Tcl_Interp *interp,
in declaration at line 1566 *)
    { 544  }
(* error 
EXTERN int		Tcl_SetEnsembleMappingDict(Tcl_Interp *interp,
in declaration at line 1569 *)
    { 545  }
(* error 
EXTERN int		Tcl_SetEnsembleUnknownHandler(Tcl_Interp *interp,
in declaration at line 1572 *)
    { 546  }
(* error 
EXTERN int		Tcl_SetEnsembleFlags(Tcl_Interp *interp,
in declaration at line 1575 *)
    { 547  }
(* error 
EXTERN int		Tcl_GetEnsembleSubcommandList(Tcl_Interp *interp,
in declaration at line 1578 *)
    { 548  }
(* error 
EXTERN int		Tcl_GetEnsembleMappingDict(Tcl_Interp *interp,
in declaration at line 1581 *)
    { 549  }
(* error 
EXTERN int		Tcl_GetEnsembleUnknownHandler(Tcl_Interp *interp,
in declaration at line 1584 *)
    { 550  }
(* error 
EXTERN int		Tcl_GetEnsembleFlags(Tcl_Interp *interp,
in declaration at line 1587 *)
    { 551  }
(* error 
EXTERN int		Tcl_GetEnsembleNamespace(Tcl_Interp *interp,
in declaration at line 1591 *)
    { 552  }
(* error 
EXTERN void		Tcl_SetTimeProc(Tcl_GetTimeProc *getProc,
in declaration at line 1595 *)
    { 553  }
(* error 
EXTERN void		Tcl_QueryTimeProc(Tcl_GetTimeProc **getProc,
in declaration at line 1599 *)
    { 554  }
(* error 
EXTERN Tcl_DriverThreadActionProc * Tcl_ChannelThreadActionProc(
 in declarator_list *)
    { 555  }
(* error 
EXTERN Tcl_Obj *	Tcl_NewBignumObj(mp_int *value);
 in declarator_list *)
    { 556  }
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewBignumObj(mp_int *value, const char *file,
(* error 
EXTERN Tcl_Obj *	Tcl_DbNewBignumObj(mp_int *value, const char *file,
(* error 
				int line);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 557  }
(* error 
EXTERN void		Tcl_SetBignumObj(Tcl_Obj *obj, mp_int *value);
in declaration at line 1609 *)
    { 558  }
(* error 
EXTERN int		Tcl_GetBignumFromObj(Tcl_Interp *interp,
in declaration at line 1612 *)
    { 559  }
(* error 
EXTERN int		Tcl_TakeBignumFromObj(Tcl_Interp *interp,
in declaration at line 1615 *)
    { 560  }
(* error 
EXTERN int		Tcl_TruncateChannel(Tcl_Channel chan,
in declaration at line 1618 *)
    { 561  }
(* error 
EXTERN Tcl_DriverTruncateProc * Tcl_ChannelTruncateProc(
 in declarator_list *)
    { 562  }
(* error 
EXTERN void		Tcl_SetChannelErrorInterp(Tcl_Interp *interp,
in declaration at line 1624 *)
    { 563  }
(* error 
EXTERN void		Tcl_GetChannelErrorInterp(Tcl_Interp *interp,
in declaration at line 1627 *)
    { 564  }
(* error 
EXTERN void		Tcl_SetChannelError(Tcl_Channel chan, Tcl_Obj *msg);
in declaration at line 1629 *)
    { 565  }
(* error 
EXTERN void		Tcl_GetChannelError(Tcl_Channel chan, Tcl_Obj **msg);
in declaration at line 1631 *)
    { 566  }
(* error 
EXTERN int		Tcl_InitBignumFromDouble(Tcl_Interp *interp,
in declaration at line 1634 *)
    { 567  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetNamespaceUnknownHandler(Tcl_Interp *interp,
(* error 
				Tcl_Namespace *nsPtr);
 in declarator_list *)
 in declarator_list *)
    { 568  }
(* error 
EXTERN int		Tcl_SetNamespaceUnknownHandler(Tcl_Interp *interp,
in declaration at line 1640 *)
    { 569  }
(* error 
EXTERN int		Tcl_GetEncodingFromObj(Tcl_Interp *interp,
in declaration at line 1643 *)
    { 570  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetEncodingSearchPath(void);
 in declarator_list *)
    { 571  }
(* error 
EXTERN int		Tcl_SetEncodingSearchPath(Tcl_Obj *searchPath);
in declaration at line 1647 *)
    { 572  }
(* error 
EXTERN const char *	Tcl_GetEncodingNameFromEnvironment(
 in declarator_list *)
    { 573  }
(* error 
EXTERN int		Tcl_PkgRequireProc(Tcl_Interp *interp,
in declaration at line 1654 *)
    { 574  }
(* error 
EXTERN void		Tcl_AppendObjToErrorInfo(Tcl_Interp *interp,
in declaration at line 1657 *)
    { 575  }
(* error 
EXTERN void		Tcl_AppendLimitedToObj(Tcl_Obj *objPtr,
in declaration at line 1661 *)
    { 576  }
(* error 
EXTERN Tcl_Obj *	Tcl_Format(Tcl_Interp *interp, const char *format,
(* error 
EXTERN Tcl_Obj *	Tcl_Format(Tcl_Interp *interp, const char *format,
(* error 
				int objc, Tcl_Obj *const objv[]);
(* error 
				int objc, Tcl_Obj *const objv[]);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 577  }
(* error 
EXTERN int		Tcl_AppendFormatToObj(Tcl_Interp *interp,
in declaration at line 1668 *)
    { 578  }
(* error 
EXTERN Tcl_Obj *	Tcl_ObjPrintf(const char *format, ...) TCL_FORMAT_PRINTF(1, 2);
(* error 
EXTERN Tcl_Obj *	Tcl_ObjPrintf(const char *format, ...) TCL_FORMAT_PRINTF(1, 2);
(* error 
EXTERN Tcl_Obj *	Tcl_ObjPrintf(const char *format, ...) TCL_FORMAT_PRINTF(1, 2);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 579  }
(* error 
EXTERN void		Tcl_AppendPrintfToObj(Tcl_Obj *objPtr,
in declaration at line 1673 *)
    { 580  }
(* error 
EXTERN int		Tcl_CancelEval(Tcl_Interp *interp,
in declaration at line 1677 *)
    { 581  }
(* error 
EXTERN int		Tcl_Canceled(Tcl_Interp *interp, int flags);
in declaration at line 1679 *)
    { 582  }
(* error 
EXTERN int		Tcl_CreatePipe(Tcl_Interp *interp,
in declaration at line 1683 *)
    { 583  }
(* error 
EXTERN Tcl_Command	Tcl_NRCreateCommand(Tcl_Interp *interp,
(* error 
				const char *cmdName, Tcl_ObjCmdProc *proc,
(* error 
				const char *cmdName, Tcl_ObjCmdProc *proc,
(* error 
				Tcl_ObjCmdProc *nreProc,
(* error 
				ClientData clientData,
(* error 
				Tcl_CmdDeleteProc *deleteProc);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 584  }
(* error 
EXTERN int		Tcl_NREvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
in declaration at line 1692 *)
    { 585  }
(* error 
EXTERN int		Tcl_NREvalObjv(Tcl_Interp *interp, int objc,
in declaration at line 1695 *)
    { 586  }
(* error 
EXTERN int		Tcl_NRCmdSwap(Tcl_Interp *interp, Tcl_Command cmd,
in declaration at line 1698 *)
    { 587  }
(* error 
EXTERN void		Tcl_NRAddCallback(Tcl_Interp *interp,
in declaration at line 1703 *)
    { 588  }
(* error 
EXTERN int		Tcl_NRCallObjProc(Tcl_Interp *interp,
in declaration at line 1708 *)
    { 589  }
(* error 
EXTERN unsigned		Tcl_GetFSDeviceFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1710 *)
    { 590  }
(* error 
EXTERN unsigned		Tcl_GetFSInodeFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1712 *)
    { 591  }
(* error 
EXTERN unsigned		Tcl_GetModeFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1714 *)
    { 592  }
(* error 
EXTERN int		Tcl_GetLinkCountFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1716 *)
    { 593  }
(* error 
EXTERN int		Tcl_GetUserIdFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1718 *)
    { 594  }
(* error 
EXTERN int		Tcl_GetGroupIdFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1720 *)
    { 595  }
(* error 
EXTERN int		Tcl_GetDeviceTypeFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1722 *)
    { 596  }
(* error 
EXTERN Tcl_WideInt	Tcl_GetAccessTimeFromStat(const Tcl_StatBuf *statPtr);
 in declarator_list *)
    { 597  }
(* error 
EXTERN Tcl_WideInt	Tcl_GetModificationTimeFromStat(
 in declarator_list *)
    { 598  }
(* error 
EXTERN Tcl_WideInt	Tcl_GetChangeTimeFromStat(const Tcl_StatBuf *statPtr);
 in declarator_list *)
    { 599  }
(* error 
EXTERN Tcl_WideUInt	Tcl_GetSizeFromStat(const Tcl_StatBuf *statPtr);
 in declarator_list *)
    { 600  }
(* error 
EXTERN Tcl_WideUInt	Tcl_GetBlocksFromStat(const Tcl_StatBuf *statPtr);
 in declarator_list *)
    { 601  }
(* error 
EXTERN unsigned		Tcl_GetBlockSizeFromStat(const Tcl_StatBuf *statPtr);
in declaration at line 1735 *)
    { 602  }
(* error 
EXTERN int		Tcl_SetEnsembleParameterList(Tcl_Interp *interp,
in declaration at line 1738 *)
    { 603  }
(* error 
EXTERN int		Tcl_GetEnsembleParameterList(Tcl_Interp *interp,
in declaration at line 1741 *)
    { 604  }
(* error 
EXTERN int		Tcl_ParseArgsObjv(Tcl_Interp *interp,
in declaration at line 1745 *)
    { 605  }
(* error 
EXTERN int		Tcl_GetErrorLine(Tcl_Interp *interp);
in declaration at line 1747 *)
    { 606  }
(* error 
EXTERN void		Tcl_SetErrorLine(Tcl_Interp *interp, int lineNum);
in declaration at line 1749 *)
    { 607  }
(* error 
EXTERN void		Tcl_TransferResult(Tcl_Interp *sourceInterp,
in declaration at line 1752 *)
    { 608  }
(* error 
EXTERN int		Tcl_InterpActive(Tcl_Interp *interp);
in declaration at line 1754 *)
    { 609  }
(* error 
EXTERN void		Tcl_BackgroundException(Tcl_Interp *interp, int code);
in declaration at line 1756 *)
    { 610  }
(* error 
EXTERN int		Tcl_ZlibDeflate(Tcl_Interp *interp, int format,
in declaration at line 1760 *)
    { 611  }
(* error 
EXTERN int		Tcl_ZlibInflate(Tcl_Interp *interp, int format,
in declaration at line 1764 *)
    { 612  }
(* error 
EXTERN unsigned int	Tcl_ZlibCRC32(unsigned int crc,
in declaration at line 1767 *)
    { 613  }
(* error 
EXTERN unsigned int	Tcl_ZlibAdler32(unsigned int adler,
in declaration at line 1770 *)
    { 614  }
(* error 
EXTERN int		Tcl_ZlibStreamInit(Tcl_Interp *interp, int mode,
in declaration at line 1774 *)
    { 615  }
(* error 
EXTERN Tcl_Obj *	Tcl_ZlibStreamGetCommandName(Tcl_ZlibStream zshandle);
 in declarator_list *)
    { 616  }
(* error 
EXTERN int		Tcl_ZlibStreamEof(Tcl_ZlibStream zshandle);
in declaration at line 1778 *)
    { 617  }
(* error 
EXTERN int		Tcl_ZlibStreamChecksum(Tcl_ZlibStream zshandle);
in declaration at line 1780 *)
    { 618  }
(* error 
EXTERN int		Tcl_ZlibStreamPut(Tcl_ZlibStream zshandle,
in declaration at line 1783 *)
    { 619  }
(* error 
EXTERN int		Tcl_ZlibStreamGet(Tcl_ZlibStream zshandle,
in declaration at line 1786 *)
    { 620  }
(* error 
EXTERN int		Tcl_ZlibStreamClose(Tcl_ZlibStream zshandle);
in declaration at line 1788 *)
    { 621  }
(* error 
EXTERN int		Tcl_ZlibStreamReset(Tcl_ZlibStream zshandle);
in declaration at line 1790 *)
    { 622  }
(* error 
EXTERN void		Tcl_SetStartupScript(Tcl_Obj *path,
in declaration at line 1793 *)
    { 623  }
(* error 
EXTERN Tcl_Obj *	Tcl_GetStartupScript(const char **encodingPtr);
 in declarator_list *)
    { 624  }
(* error 
EXTERN int		Tcl_CloseEx(Tcl_Interp *interp, Tcl_Channel chan,
in declaration at line 1798 *)
    { 625  }
(* error 
EXTERN int		Tcl_NRExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
in declaration at line 1801 *)
    { 626  }
(* error 
EXTERN int		Tcl_NRSubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
in declaration at line 1804 *)
    { 627  }
(* error 
EXTERN int		Tcl_LoadFile(Tcl_Interp *interp, Tcl_Obj *pathPtr,
in declaration at line 1808 *)
    { 628  }
(* error 
EXTERN void *		Tcl_FindSymbol(Tcl_Interp *interp,
in declaration at line 1811 *)
    { 629  }
(* error 
EXTERN int		Tcl_FSUnloadFile(Tcl_Interp *interp,
in declaration at line 1814 *)
    { 630  }
(* error 
EXTERN void		Tcl_ZlibStreamSetCompressionDictionary(
in declaration at line 1818 *)
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)

    type
      TclStubHooks = record
          tclPlatStubs : ^TclPlatStubs;
          tclIntStubs : ^TclIntStubs;
          tclIntPlatStubs : ^TclIntPlatStubs;
        end;
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)
    { 0  }
(* error 
    CONST84_RETURN char * (*tcl_PkgRequireEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 1 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequireEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 1 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequireEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 1 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequireEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 1 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequireEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 1 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 1  }
(* error 
    TCL_NORETURN1 void (*tcl_Panic) (const char *format, ...) TCL_FORMAT_PRINTF(1, 2); /* 2 */
(* error 
    TCL_NORETURN1 void (*tcl_Panic) (const char *format, ...) TCL_FORMAT_PRINTF(1, 2); /* 2 */
(* error 
    TCL_NORETURN1 void (*tcl_Panic) (const char *format, ...) TCL_FORMAT_PRINTF(1, 2); /* 2 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 2  }
    { 3  }
    { 4  }
    { 5  }
(* Const before type ignored *)
    { 6  }
(* Const before type ignored *)
    { 7  }
(* Const before type ignored *)
    { 8  }
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 9  }
{$endif}
    { UNIX  }
{$if defined(_WIN32) /* WIN */}
{$endif}
    { WIN  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 9  }
{$endif}
    { MACOSX  }
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 10  }
{$endif}
    { UNIX  }
{$if defined(_WIN32) /* WIN */}
{$endif}
    { WIN  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 10  }
{$endif}
    { MACOSX  }
(* Const before type ignored *)
    { 11  }
    { 12  }
(* Const before type ignored *)
    { 13  }
    { 14  }
    { 15  }
(* Const before type ignored *)
    { 16  }
(* Const before declarator ignored *)
    { 17  }
(* Const before type ignored *)
    { 18  }
(* Const before type ignored *)
    { 19  }
(* Const before type ignored *)
    { 20  }
(* Const before type ignored *)
    { 21  }
(* Const before type ignored *)
    { 22  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 23  }
(* Const before type ignored *)
    { 24  }
(* Const before declarator ignored *)
(* Const before type ignored *)
    { 25  }
(* Const before type ignored *)
    { 26  }
(* Const before type ignored *)
    { 27  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 28  }
    { 29  }
    { 30  }
(* Const before type ignored *)
    { 31  }
    { 32  }
    { 33  }
(* Const before type ignored *)
    { 34  }
    { 35  }
(* error 
    int (*tcl_GetIndexFromObj) (Tcl_Interp *interp, Tcl_Obj *objPtr, CONST84 char *const *tablePtr, const char *msg, int flags, int *indexPtr); /* 36 */
(* error 
    int (*tcl_GetIndexFromObj) (Tcl_Interp *interp, Tcl_Obj *objPtr, CONST84 char *const *tablePtr, const char *msg, int flags, int *indexPtr); /* 36 */
(* error 
    int (*tcl_GetIndexFromObj) (Tcl_Interp *interp, Tcl_Obj *objPtr, CONST84 char *const *tablePtr, const char *msg, int flags, int *indexPtr); /* 36 */
(* error 
    int (*tcl_GetIndexFromObj) (Tcl_Interp *interp, Tcl_Obj *objPtr, CONST84 char *const *tablePtr, const char *msg, int flags, int *indexPtr); /* 36 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 36  }
(* Const before type ignored *)
    { 37  }
    { 38  }
    { 39  }
(* error 
    CONST86 Tcl_ObjType * (*tcl_GetObjType) (const char *typeName); /* 40 */
 in declarator_list *)
    { 40  }
    { 41  }
    { 42  }
    { 43  }
    { 44  }
    { 45  }
    { 46  }
    { 47  }
(* Const before declarator ignored *)
    { 48  }
    { 49  }
(* Const before type ignored *)
    { 50  }
    { 51  }
    { 52  }
(* Const before declarator ignored *)
    { 53  }
    { 54  }
    { 55  }
(* Const before type ignored *)
    { 56  }
    { 57  }
    { 58  }
(* Const before type ignored *)
    { 59  }
    { 60  }
    { 61  }
(* Const before declarator ignored *)
    { 62  }
    { 63  }
    { 64  }
(* Const before type ignored *)
    { 65  }
(* Const before type ignored *)
    { 66  }
(* Const before type ignored *)
    { 67  }
    { 68  }
(* Const before type ignored *)
    { 69  }
    { 70  }
    { 71  }
    { 72  }
    { 73  }
    { 74  }
    { 75  }
    { 76  }
(* Const before type ignored *)
    { 77  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 78  }
    { 79  }
    { 80  }
    { 81  }
(* Const before type ignored *)
    { 82  }
(* error 
    char * (*tcl_Concat) (int argc, CONST84 char *const *argv); /* 83 */
 in declarator_list *)
    { 83  }
(* Const before type ignored *)
    { 84  }
(* Const before type ignored *)
    { 85  }
(* Const before type ignored *)
(* Const before type ignored *)
(* error 
    int (*tcl_CreateAlias) (Tcl_Interp *slave, const char *slaveCmd, Tcl_Interp *target, const char *targetCmd, int argc, CONST84 char *const *argv); /* 86 */
 in declarator_list *)
    { 86  }
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before declarator ignored *)
    { 87  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 88  }
    { 89  }
    { 90  }
(* Const before type ignored *)
    { 91  }
    { 92  }
    { 93  }
    { 94  }
(* Const before type ignored *)
    { 95  }
(* Const before type ignored *)
    { 96  }
(* Const before type ignored *)
    { 97  }
    { 98  }
    { 99  }
(* Const before type ignored *)
    { 100  }
    { 101  }
    { 102  }
(* Const before type ignored *)
    { 103  }
    { 104  }
    { 105  }
    { 106  }
    { 107  }
    { 108  }
    { 109  }
    { 110  }
    { 111  }
    { 112  }
    { 113  }
    { 114  }
    { 115  }
    { 116  }
(* Const before type ignored *)
    { 117  }
(* Const before type ignored *)
    { 118  }
    { 119  }
    { 120  }
    { 121  }
    { 122  }
    { 123  }
    { 124  }
    { 125  }
    { 126  }
(* error 
    CONST84_RETURN char * (*tcl_ErrnoId) (void); /* 127 */
 in declarator_list *)
    { 127  }
(* error 
    CONST84_RETURN char * (*tcl_ErrnoMsg) (int err); /* 128 */
 in declarator_list *)
    { 128  }
(* Const before type ignored *)
    { 129  }
(* Const before type ignored *)
    { 130  }
    { 131  }
    { 132  }
(* error 
    TCL_NORETURN1 void (*tcl_Exit) (int status); /* 133 */
 in declarator_list *)
    { 133  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 134  }
(* Const before type ignored *)
    { 135  }
    { 136  }
(* Const before type ignored *)
    { 137  }
    { 138  }
(* Const before type ignored *)
    { 139  }
    { 140  }
    { 141  }
(* Const before type ignored *)
    { 142  }
    { 143  }
(* Const before type ignored *)
    { 144  }
    { 145  }
    { 146  }
    { 147  }
(* Const before type ignored *)
(* error 
    int (*tcl_GetAlias) (Tcl_Interp *interp, const char *slaveCmd, Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr, int *argcPtr, CONST84 char ***argvPtr); /* 148 */
(* error 
    int (*tcl_GetAlias) (Tcl_Interp *interp, const char *slaveCmd, Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr, int *argcPtr, CONST84 char ***argvPtr); /* 148 */
(* error 
    int (*tcl_GetAlias) (Tcl_Interp *interp, const char *slaveCmd, Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr, int *argcPtr, CONST84 char ***argvPtr); /* 148 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 148  }
(* Const before type ignored *)
(* error 
    int (*tcl_GetAliasObj) (Tcl_Interp *interp, const char *slaveCmd, Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr, int *objcPtr, Tcl_Obj ***objv); /* 149 */
(* error 
    int (*tcl_GetAliasObj) (Tcl_Interp *interp, const char *slaveCmd, Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr, int *objcPtr, Tcl_Obj ***objv); /* 149 */
(* error 
    int (*tcl_GetAliasObj) (Tcl_Interp *interp, const char *slaveCmd, Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr, int *objcPtr, Tcl_Obj ***objv); /* 149 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 149  }
(* Const before type ignored *)
    { 150  }
(* Const before type ignored *)
    { 151  }
    { 152  }
    { 153  }
    { 154  }
    { 155  }
(* error 
    CONST84_RETURN char * (*tcl_GetChannelName) (Tcl_Channel chan); /* 156 */
 in declarator_list *)
    { 156  }
(* Const before type ignored *)
    { 157  }
(* error 
    CONST86 Tcl_ChannelType * (*tcl_GetChannelType) (Tcl_Channel chan); /* 158 */
 in declarator_list *)
    { 158  }
(* Const before type ignored *)
    { 159  }
(* error 
    CONST84_RETURN char * (*tcl_GetCommandName) (Tcl_Interp *interp, Tcl_Command command); /* 160 */
(* error 
    CONST84_RETURN char * (*tcl_GetCommandName) (Tcl_Interp *interp, Tcl_Command command); /* 160 */
 in declarator_list *)
 in declarator_list *)
    { 160  }
    { 161  }
(* error 
    CONST84_RETURN char * (*tcl_GetHostName) (void); /* 162 */
 in declarator_list *)
    { 162  }
    { 163  }
    { 164  }
(* Const before type ignored *)
    { 165  }
    { 166  }
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
(* Const before type ignored *)
    { 167  }
{$endif}
    { UNIX  }
{$if defined(_WIN32) /* WIN */}
{$endif}
    { WIN  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
(* Const before type ignored *)
    { 167  }
{$endif}
    { MACOSX  }
(* Const before type ignored *)
    { 168  }
    { 169  }
    { 170  }
    { 171  }
(* Const before type ignored *)
    { 172  }
    { 173  }
(* error 
    CONST84_RETURN char * (*tcl_GetStringResult) (Tcl_Interp *interp); /* 174 */
 in declarator_list *)
    { 174  }
(* error 
    CONST84_RETURN char * (*tcl_GetVar) (Tcl_Interp *interp, const char *varName, int flags); /* 175 */
(* error 
    CONST84_RETURN char * (*tcl_GetVar) (Tcl_Interp *interp, const char *varName, int flags); /* 175 */
(* error 
    CONST84_RETURN char * (*tcl_GetVar) (Tcl_Interp *interp, const char *varName, int flags); /* 175 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 175  }
(* error 
    CONST84_RETURN char * (*tcl_GetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, int flags); /* 176 */
(* error 
    CONST84_RETURN char * (*tcl_GetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, int flags); /* 176 */
(* error 
    CONST84_RETURN char * (*tcl_GetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, int flags); /* 176 */
(* error 
    CONST84_RETURN char * (*tcl_GetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, int flags); /* 176 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 176  }
(* Const before type ignored *)
    { 177  }
    { 178  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 179  }
    { 180  }
    { 181  }
    { 182  }
    { 183  }
    { 184  }
    { 185  }
(* error 
    char * (*tcl_JoinPath) (int argc, CONST84 char *const *argv, Tcl_DString *resultPtr); /* 186 */
(* error 
    char * (*tcl_JoinPath) (int argc, CONST84 char *const *argv, Tcl_DString *resultPtr); /* 186 */
 in declarator_list *)
 in declarator_list *)
    { 186  }
(* Const before type ignored *)
    { 187  }
    { 189  }
    { 190  }
    { 191  }
(* error 
    char * (*tcl_Merge) (int argc, CONST84 char *const *argv); /* 192 */
 in declarator_list *)
    { 192  }
    { 193  }
    { 194  }
    { 195  }
    { 196  }
(* error 
    Tcl_Channel (*tcl_OpenCommandChannel) (Tcl_Interp *interp, int argc, CONST84 char **argv, int flags); /* 197 */
(* error 
    Tcl_Channel (*tcl_OpenCommandChannel) (Tcl_Interp *interp, int argc, CONST84 char **argv, int flags); /* 197 */
 in declarator_list *)
 in declarator_list *)
    { 197  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 198  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 199  }
(* Const before type ignored *)
    { 200  }
    { 201  }
    { 202  }
(* Const before type ignored *)
    { 203  }
(* error 
    CONST84_RETURN char * (*tcl_PosixError) (Tcl_Interp *interp); /* 204 */
 in declarator_list *)
    { 204  }
    { 205  }
    { 206  }
    { 207  }
(* Const before type ignored *)
    { 208  }
    { 209  }
    { 210  }
(* Const before type ignored *)
    { 211  }
(* Const before type ignored *)
    { 212  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 213  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 214  }
(* error 
    void (*tcl_RegExpRange) (Tcl_RegExp regexp, int index, CONST84 char **startPtr, CONST84 char **endPtr); /* 215 */
(* error 
    void (*tcl_RegExpRange) (Tcl_RegExp regexp, int index, CONST84 char **startPtr, CONST84 char **endPtr); /* 215 */
 in declarator_list *)
 in declarator_list *)
    { 215  }
    { 216  }
    { 217  }
(* Const before type ignored *)
    { 218  }
(* Const before type ignored *)
    { 219  }
    { 220  }
    { 221  }
    { 222  }
(* Const before type ignored *)
    { 223  }
    { 224  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 225  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 226  }
    { 227  }
    { 228  }
(* Const before type ignored *)
    { 229  }
(* error 
    void (*tcl_SetPanicProc) (TCL_NORETURN1 Tcl_PanicProc *panicProc); /* 230 */
 in declarator_list *)
    { 230  }
    { 231  }
    { 232  }
    { 233  }
    { 234  }
    { 235  }
    { 236  }
(* error 
    CONST84_RETURN char * (*tcl_SetVar) (Tcl_Interp *interp, const char *varName, const char *newValue, int flags); /* 237 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar) (Tcl_Interp *interp, const char *varName, const char *newValue, int flags); /* 237 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar) (Tcl_Interp *interp, const char *varName, const char *newValue, int flags); /* 237 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar) (Tcl_Interp *interp, const char *varName, const char *newValue, int flags); /* 237 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 237  }
(* error 
    CONST84_RETURN char * (*tcl_SetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, const char *newValue, int flags); /* 238 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, const char *newValue, int flags); /* 238 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, const char *newValue, int flags); /* 238 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, const char *newValue, int flags); /* 238 */
(* error 
    CONST84_RETURN char * (*tcl_SetVar2) (Tcl_Interp *interp, const char *part1, const char *part2, const char *newValue, int flags); /* 238 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 238  }
(* error 
    CONST84_RETURN char * (*tcl_SignalId) (int sig); /* 239 */
 in declarator_list *)
    { 239  }
(* error 
    CONST84_RETURN char * (*tcl_SignalMsg) (int sig); /* 240 */
 in declarator_list *)
    { 240  }
    { 241  }
(* Const before type ignored *)
(* error 
    int (*tcl_SplitList) (Tcl_Interp *interp, const char *listStr, int *argcPtr, CONST84 char ***argvPtr); /* 242 */
 in declarator_list *)
    { 242  }
(* Const before type ignored *)
(* error 
    void (*tcl_SplitPath) (const char *path, int *argcPtr, CONST84 char ***argvPtr); /* 243 */
 in declarator_list *)
    { 243  }
(* Const before type ignored *)
    { 244  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 245  }
    { 246  }
(* Const before type ignored *)
    { 247  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 248  }
(* Const before type ignored *)
    { 249  }
(* Const before type ignored *)
    { 250  }
(* Const before type ignored *)
    { 251  }
    { 252  }
(* Const before type ignored *)
    { 253  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 254  }
(* Const before type ignored *)
    { 255  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 256  }
(* Const before type ignored *)
    { 257  }
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)
    { 258  }
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)
    { 259  }
    { 260  }
(* Const before type ignored *)
    { 261  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 262  }
(* Const before type ignored *)
    { 263  }
(* Const before declarator ignored *)
(* Const before type ignored *)
    { 264  }
(* Const before type ignored *)
    { 265  }
(* Const before type ignored *)
    { 266  }
    { 267  }
    { 268  }
    { 269  }
(* error 
    CONST84_RETURN char * (*tcl_ParseVar) (Tcl_Interp *interp, const char *start, CONST84 char **termPtr); /* 270 */
(* error 
    CONST84_RETURN char * (*tcl_ParseVar) (Tcl_Interp *interp, const char *start, CONST84 char **termPtr); /* 270 */
(* error 
    CONST84_RETURN char * (*tcl_ParseVar) (Tcl_Interp *interp, const char *start, CONST84 char **termPtr); /* 270 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 270  }
(* error 
    CONST84_RETURN char * (*tcl_PkgPresent) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 271 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresent) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 271 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresent) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 271 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresent) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 271 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 271  }
(* error 
    CONST84_RETURN char * (*tcl_PkgPresentEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 272 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresentEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 272 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresentEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 272 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresentEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 272 */
(* error 
    CONST84_RETURN char * (*tcl_PkgPresentEx) (Tcl_Interp *interp, const char *name, const char *version, int exact, void *clientDataPtr); /* 272 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 272  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 273  }
(* error 
    CONST84_RETURN char * (*tcl_PkgRequire) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 274 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequire) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 274 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequire) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 274 */
(* error 
    CONST84_RETURN char * (*tcl_PkgRequire) (Tcl_Interp *interp, const char *name, const char *version, int exact); /* 274 */
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    { 274  }
    { 275  }
    { 276  }
    { 277  }
(* error 
    TCL_NORETURN1 void (*tcl_PanicVA) (const char *format, va_list argList); /* 278 */
(* error 
    TCL_NORETURN1 void (*tcl_PanicVA) (const char *format, va_list argList); /* 278 */
 in declarator_list *)
 in declarator_list *)
    { 278  }
    { 279  }
    { 280  }
(* Const before type ignored *)
    { 281  }
    { 282  }
    { 283  }
    { 284  }
    { 286  }
(* Const before type ignored *)
    { 287  }
    { 288  }
    { 289  }
    { 290  }
(* Const before type ignored *)
    { 291  }
(* Const before declarator ignored *)
    { 292  }
    { 293  }
    { 294  }
(* Const before type ignored *)
    { 295  }
(* Const before type ignored *)
    { 296  }
    { 297  }
    { 298  }
    { 299  }
    { 300  }
(* Const before type ignored *)
    { 301  }
(* error 
    CONST84_RETURN char * (*tcl_GetEncodingName) (Tcl_Encoding encoding); /* 302 */
 in declarator_list *)
    { 302  }
    { 303  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 304  }
    { 305  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 306  }
    { 307  }
    { 308  }
    { 309  }
    { 310  }
(* Const before type ignored *)
    { 311  }
(* Const before type ignored *)
    { 312  }
    { 313  }
    { 314  }
    { 315  }
(* Const before type ignored *)
    { 316  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 317  }
    { 318  }
    { 319  }
(* Const before type ignored *)
    { 320  }
    { 321  }
    { 322  }
    { 323  }
    { 324  }
(* error 
    CONST84_RETURN char * (*tcl_UtfAtIndex) (const char *src, int index); /* 325 */
(* error 
    CONST84_RETURN char * (*tcl_UtfAtIndex) (const char *src, int index); /* 325 */
 in declarator_list *)
 in declarator_list *)
    { 325  }
(* Const before type ignored *)
    { 326  }
(* Const before type ignored *)
    { 327  }
(* error 
    CONST84_RETURN char * (*tcl_UtfFindFirst) (const char *src, int ch); /* 328 */
(* error 
    CONST84_RETURN char * (*tcl_UtfFindFirst) (const char *src, int ch); /* 328 */
 in declarator_list *)
 in declarator_list *)
    { 328  }
(* error 
    CONST84_RETURN char * (*tcl_UtfFindLast) (const char *src, int ch); /* 329 */
(* error 
    CONST84_RETURN char * (*tcl_UtfFindLast) (const char *src, int ch); /* 329 */
 in declarator_list *)
 in declarator_list *)
    { 329  }
(* error 
    CONST84_RETURN char * (*tcl_UtfNext) (const char *src); /* 330 */
 in declarator_list *)
    { 330  }
(* error 
    CONST84_RETURN char * (*tcl_UtfPrev) (const char *src, const char *start); /* 331 */
(* error 
    CONST84_RETURN char * (*tcl_UtfPrev) (const char *src, const char *start); /* 331 */
 in declarator_list *)
 in declarator_list *)
    { 331  }
(* Const before type ignored *)
    { 332  }
(* Const before type ignored *)
    { 333  }
    { 334  }
    { 335  }
(* Const before type ignored *)
    { 336  }
    { 337  }
(* Const before type ignored *)
    { 338  }
    { 339  }
    { 340  }
(* error 
    CONST84_RETURN char * (*tcl_GetDefaultEncodingDir) (void); /* 341 */
 in declarator_list *)
    { 341  }
(* Const before type ignored *)
    { 342  }
    { 343  }
    { 344  }
    { 345  }
    { 346  }
    { 347  }
    { 348  }
    { 349  }
    { 350  }
    { 351  }
(* Const before type ignored *)
    { 352  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 353  }
(* Const before type ignored *)
    { 354  }
(* Const before type ignored *)
    { 355  }
    { 356  }
    { 357  }
    { 358  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 359  }
(* Const before type ignored *)
(* error 
    int (*tcl_ParseBraces) (Tcl_Interp *interp, const char *start, int numBytes, Tcl_Parse *parsePtr, int append, CONST84 char **termPtr); /* 360 */
 in declarator_list *)
    { 360  }
(* Const before type ignored *)
    { 361  }
(* Const before type ignored *)
    { 362  }
(* Const before type ignored *)
(* error 
    int (*tcl_ParseQuotedString) (Tcl_Interp *interp, const char *start, int numBytes, Tcl_Parse *parsePtr, int append, CONST84 char **termPtr); /* 363 */
 in declarator_list *)
    { 363  }
(* Const before type ignored *)
    { 364  }
    { 365  }
(* Const before type ignored *)
    { 366  }
(* Const before type ignored *)
    { 367  }
(* Const before type ignored *)
    { 368  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 369  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 370  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 371  }
    { 372  }
    { 373  }
    { 374  }
    { 375  }
    { 376  }
    { 377  }
(* Const before type ignored *)
    { 378  }
(* Const before type ignored *)
    { 379  }
    { 380  }
    { 381  }
    { 382  }
    { 383  }
(* Const before type ignored *)
    { 384  }
    { 385  }
    { 386  }
    { 387  }
    { 388  }
(* Const before type ignored *)
    { 389  }
(* Const before declarator ignored *)
    { 390  }
    { 391  }
    { 392  }
    { 393  }
    { 394  }
(* Const before type ignored *)
    { 395  }
    { 396  }
    { 397  }
(* error 
    CONST84_RETURN char * (*tcl_ChannelName) (const Tcl_ChannelType *chanTypePtr); /* 398 */
 in declarator_list *)
    { 398  }
(* Const before type ignored *)
    { 399  }
(* Const before type ignored *)
    { 400  }
(* Const before type ignored *)
    { 401  }
(* Const before type ignored *)
    { 402  }
(* Const before type ignored *)
    { 403  }
(* Const before type ignored *)
    { 404  }
(* Const before type ignored *)
    { 405  }
(* Const before type ignored *)
    { 406  }
(* Const before type ignored *)
    { 407  }
(* Const before type ignored *)
    { 408  }
(* Const before type ignored *)
    { 409  }
(* Const before type ignored *)
    { 410  }
(* Const before type ignored *)
    { 411  }
    { 412  }
    { 413  }
    { 414  }
    { 415  }
    { 416  }
    { 417  }
(* Const before type ignored *)
    { 418  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 419  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 420  }
(* Const before type ignored *)
    { 421  }
(* Const before type ignored *)
    { 422  }
(* Const before type ignored *)
    { 423  }
    { 424  }
(* Const before type ignored *)
    { 425  }
(* Const before type ignored *)
    { 426  }
(* Const before type ignored *)
    { 427  }
    { 428  }
(* Const before type ignored *)
    { 429  }
    { 430  }
(* Const before type ignored *)
    { 431  }
    { 432  }
    { 433  }
    { 434  }
(* Const before type ignored *)
    { 435  }
(* Const before type ignored *)
    { 436  }
    { 437  }
    { 438  }
    { 439  }
    { 440  }
    { 441  }
    { 442  }
    { 443  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 444  }
(* Const before type ignored *)
    { 445  }
    { 446  }
    { 447  }
    { 448  }
    { 449  }
    { 450  }
    { 451  }
    { 452  }
(* Const before type ignored *)
(* error 
    const char *CONST86 * (*tcl_FSFileAttrStrings) (Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef); /* 453 */
(* error 
    const char *CONST86 * (*tcl_FSFileAttrStrings) (Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef); /* 453 */
 in declarator_list *)
 in declarator_list *)
    { 453  }
    { 454  }
    { 455  }
(* Const before type ignored *)
    { 456  }
    { 457  }
    { 458  }
    { 459  }
    { 460  }
    { 461  }
    { 462  }
    { 463  }
(* Const before declarator ignored *)
    { 464  }
(* Const before type ignored *)
    { 465  }
    { 466  }
    { 467  }
(* Const before type ignored *)
    { 468  }
(* Const before type ignored *)
    { 469  }
    { 470  }
    { 471  }
    { 472  }
(* Const before type ignored *)
    { 473  }
(* Const before type ignored *)
    { 474  }
(* Const before type ignored *)
    { 475  }
(* Const before type ignored *)
    { 476  }
(* error 
    CONST86 Tcl_Filesystem * (*tcl_FSGetFileSystemForPath) (Tcl_Obj *pathPtr); /* 477 */
 in declarator_list *)
    { 477  }
    { 478  }
    { 479  }
(* Const before type ignored *)
    { 480  }
    { 481  }
    { 482  }
    { 483  }
    { 484  }
(* Const before type ignored *)
    { 485  }
(* Const before type ignored *)
    { 486  }
    { 487  }
    { 488  }
    { 489  }
    { 490  }
    { 491  }
    { 492  }
(* Const before type ignored *)
    { 493  }
    { 494  }
    { 495  }
    { 496  }
    { 497  }
    { 498  }
    { 499  }
    { 500  }
(* Const before declarator ignored *)
    { 501  }
(* Const before declarator ignored *)
    { 502  }
    { 503  }
(* Const before type ignored *)
    { 504  }
(* Const before type ignored *)
(* Const before type ignored *)
(* Const before type ignored *)
    { 505  }
(* Const before type ignored *)
    { 506  }
    { 507  }
    { 508  }
(* Const before type ignored *)
    { 509  }
(* Const before type ignored *)
    { 510  }
(* Const before type ignored *)
    { 511  }
    { 512  }
    { 513  }
(* Const before type ignored *)
    { 514  }
(* Const before type ignored *)
    { 515  }
    { 516  }
    { 517  }
(* Const before type ignored *)
    { 518  }
(* error 
    Tcl_ExitProc * (*tcl_SetExitProc) (TCL_NORETURN1 Tcl_ExitProc *proc); /* 519 */
 in declarator_list *)
    { 519  }
    { 520  }
    { 521  }
    { 522  }
    { 523  }
    { 524  }
    { 525  }
    { 526  }
    { 527  }
    { 528  }
    { 529  }
    { 530  }
    { 531  }
    { 532  }
    { 533  }
    { 534  }
    { 535  }
    { 536  }
    { 537  }
    { 538  }
    { 539  }
    { 540  }
(* Const before type ignored *)
    { 541  }
    { 542  }
    { 543  }
    { 544  }
    { 545  }
    { 546  }
    { 547  }
    { 548  }
    { 549  }
    { 550  }
    { 551  }
    { 552  }
    { 553  }
(* Const before type ignored *)
    { 554  }
    { 555  }
(* Const before type ignored *)
    { 556  }
    { 557  }
    { 558  }
    { 559  }
    { 560  }
(* Const before type ignored *)
    { 561  }
    { 562  }
    { 563  }
    { 564  }
    { 565  }
    { 566  }
    { 567  }
    { 568  }
    { 569  }
    { 570  }
    { 571  }
(* Const before type ignored *)
    { 572  }
(* Const before type ignored *)
(* Const before declarator ignored *)
    { 573  }
    { 574  }
(* Const before type ignored *)
(* Const before type ignored *)
    { 575  }
(* Const before type ignored *)
(* Const before declarator ignored *)
    { 576  }
(* Const before type ignored *)
(* Const before declarator ignored *)
    { 577  }
(* Const before type ignored *)
(* error 
    Tcl_Obj * (*tcl_ObjPrintf) (const char *format, ...) TCL_FORMAT_PRINTF(1, 2); /* 578 */
(* error 
    Tcl_Obj * (*tcl_ObjPrintf) (const char *format, ...) TCL_FORMAT_PRINTF(1, 2); /* 578 */
 in declarator_list *)
 in declarator_list *)
    { 578  }
(* Const before type ignored *)
(* error 
    void (*tcl_AppendPrintfToObj) (Tcl_Obj *objPtr, const char *format, ...) TCL_FORMAT_PRINTF(2, 3); /* 579 */
(* error 
    void (*tcl_AppendPrintfToObj) (Tcl_Obj *objPtr, const char *format, ...) TCL_FORMAT_PRINTF(2, 3); /* 579 */
 in declarator_list *)
 in declarator_list *)
    { 579  }
    { 580  }
    { 581  }
    { 582  }
(* Const before type ignored *)
    { 583  }
    { 584  }
(* Const before declarator ignored *)
    { 585  }
(* Const before declarator ignored *)
    { 586  }
    { 587  }
(* Const before declarator ignored *)
    { 588  }
(* Const before type ignored *)
    { 589  }
(* Const before type ignored *)
    { 590  }
(* Const before type ignored *)
    { 591  }
(* Const before type ignored *)
    { 592  }
(* Const before type ignored *)
    { 593  }
(* Const before type ignored *)
    { 594  }
(* Const before type ignored *)
    { 595  }
(* Const before type ignored *)
    { 596  }
(* Const before type ignored *)
    { 597  }
(* Const before type ignored *)
    { 598  }
(* Const before type ignored *)
    { 599  }
(* Const before type ignored *)
    { 600  }
(* Const before type ignored *)
    { 601  }
    { 602  }
    { 603  }
(* Const before type ignored *)
(* Const before declarator ignored *)
    { 604  }
    { 605  }
    { 606  }
    { 607  }
    { 608  }
    { 609  }
    { 610  }
    { 611  }
(* Const before type ignored *)
    { 612  }
(* Const before type ignored *)
    { 613  }
    { 614  }
    { 615  }
    { 616  }
    { 617  }
    { 618  }
    { 619  }
    { 620  }
    { 621  }
(* Const before type ignored *)
    { 622  }
(* Const before type ignored *)
    { 623  }
    { 624  }
    { 625  }
    { 626  }
(* Const before type ignored *)
(* Const before declarator ignored *)
    { 627  }
(* Const before type ignored *)
    { 628  }
    { 629  }
    { 630  }

    type
      TclStubs = record
          magic : longint;
          hooks : ^TclStubHooks;
          tcl_PkgProvideEx : function (interp:PTcl_Interp; name:Pchar; version:Pchar; clientData:pointer):longint;cdecl;
          tcl_Alloc : function (size:dword):Pchar;cdecl;
          tcl_Free : procedure (ptr:Pchar);cdecl;
          tcl_Realloc : function (ptr:Pchar; size:dword):Pchar;cdecl;
          tcl_DbCkalloc : function (size:dword; file:Pchar; line:longint):Pchar;cdecl;
          tcl_DbCkfree : procedure (ptr:Pchar; file:Pchar; line:longint);cdecl;
          tcl_DbCkrealloc : function (ptr:Pchar; size:dword; file:Pchar; line:longint):Pchar;cdecl;
          tcl_CreateFileHandler : procedure (fd:longint; mask:longint; proc:PTcl_FileProc; clientData:ClientData);cdecl;
          reserved9 : procedure ;cdecl;
          tcl_CreateFileHandler : procedure (fd:longint; mask:longint; proc:PTcl_FileProc; clientData:ClientData);cdecl;
          tcl_DeleteFileHandler : procedure (fd:longint);cdecl;
          reserved10 : procedure ;cdecl;
          tcl_DeleteFileHandler : procedure (fd:longint);cdecl;
          tcl_SetTimer : procedure (timePtr:PTcl_Time);cdecl;
          tcl_Sleep : procedure (ms:longint);cdecl;
          tcl_WaitForEvent : function (timePtr:PTcl_Time):longint;cdecl;
          tcl_AppendAllObjTypes : function (interp:PTcl_Interp; objPtr:PTcl_Obj):longint;cdecl;
          tcl_AppendStringsToObj : procedure (objPtr:PTcl_Obj; args:array of const);cdecl;
          tcl_AppendToObj : procedure (objPtr:PTcl_Obj; bytes:Pchar; length:longint);cdecl;
          tcl_ConcatObj : function (objc:longint; objv:PPTcl_Obj):PTcl_Obj;cdecl;
          tcl_ConvertToType : function (interp:PTcl_Interp; objPtr:PTcl_Obj; typePtr:PTcl_ObjType):longint;cdecl;
          tcl_DbDecrRefCount : procedure (objPtr:PTcl_Obj; file:Pchar; line:longint);cdecl;
          tcl_DbIncrRefCount : procedure (objPtr:PTcl_Obj; file:Pchar; line:longint);cdecl;
          tcl_DbIsShared : function (objPtr:PTcl_Obj; file:Pchar; line:longint):longint;cdecl;
          tcl_DbNewBooleanObj : function (boolValue:longint; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DbNewByteArrayObj : function (bytes:Pbyte; length:longint; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DbNewDoubleObj : function (doubleValue:double; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DbNewListObj : function (objc:longint; objv:PPTcl_Obj; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DbNewLongObj : function (longValue:longint; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DbNewObj : function (file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DbNewStringObj : function (bytes:Pchar; length:longint; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_DuplicateObj : function (objPtr:PTcl_Obj):PTcl_Obj;cdecl;
          tclFreeObj : procedure (objPtr:PTcl_Obj);cdecl;
          tcl_GetBoolean : function (interp:PTcl_Interp; src:Pchar; boolPtr:Plongint):longint;cdecl;
          tcl_GetBooleanFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; boolPtr:Plongint):longint;cdecl;
          tcl_GetByteArrayFromObj : function (objPtr:PTcl_Obj; lengthPtr:Plongint):Pbyte;cdecl;
          tcl_GetDouble : function (interp:PTcl_Interp; src:Pchar; doublePtr:Pdouble):longint;cdecl;
          tcl_GetDoubleFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; doublePtr:Pdouble):longint;cdecl;
          tcl_GetInt : function (interp:PTcl_Interp; src:Pchar; intPtr:Plongint):longint;cdecl;
          tcl_GetIntFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; intPtr:Plongint):longint;cdecl;
          tcl_GetLongFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; longPtr:Plongint):longint;cdecl;
;
          tcl_GetStringFromObj : function (objPtr:PTcl_Obj; lengthPtr:Plongint):Pchar;cdecl;
          tcl_InvalidateStringRep : procedure (objPtr:PTcl_Obj);cdecl;
          tcl_ListObjAppendList : function (interp:PTcl_Interp; listPtr:PTcl_Obj; elemListPtr:PTcl_Obj):longint;cdecl;
          tcl_ListObjAppendElement : function (interp:PTcl_Interp; listPtr:PTcl_Obj; objPtr:PTcl_Obj):longint;cdecl;
          tcl_ListObjGetElements : function (interp:PTcl_Interp; listPtr:PTcl_Obj; objcPtr:Plongint; objvPtr:PPPTcl_Obj):longint;cdecl;
          tcl_ListObjIndex : function (interp:PTcl_Interp; listPtr:PTcl_Obj; index:longint; objPtrPtr:PPTcl_Obj):longint;cdecl;
          tcl_ListObjLength : function (interp:PTcl_Interp; listPtr:PTcl_Obj; lengthPtr:Plongint):longint;cdecl;
          tcl_ListObjReplace : function (interp:PTcl_Interp; listPtr:PTcl_Obj; first:longint; count:longint; objc:longint; 
                       objv:PPTcl_Obj):longint;cdecl;
          tcl_NewBooleanObj : function (boolValue:longint):PTcl_Obj;cdecl;
          tcl_NewByteArrayObj : function (bytes:Pbyte; length:longint):PTcl_Obj;cdecl;
          tcl_NewDoubleObj : function (doubleValue:double):PTcl_Obj;cdecl;
          tcl_NewIntObj : function (intValue:longint):PTcl_Obj;cdecl;
          tcl_NewListObj : function (objc:longint; objv:PPTcl_Obj):PTcl_Obj;cdecl;
          tcl_NewLongObj : function (longValue:longint):PTcl_Obj;cdecl;
          tcl_NewObj : function :PTcl_Obj;cdecl;
          tcl_NewStringObj : function (bytes:Pchar; length:longint):PTcl_Obj;cdecl;
          tcl_SetBooleanObj : procedure (objPtr:PTcl_Obj; boolValue:longint);cdecl;
          tcl_SetByteArrayLength : function (objPtr:PTcl_Obj; length:longint):Pbyte;cdecl;
          tcl_SetByteArrayObj : procedure (objPtr:PTcl_Obj; bytes:Pbyte; length:longint);cdecl;
          tcl_SetDoubleObj : procedure (objPtr:PTcl_Obj; doubleValue:double);cdecl;
          tcl_SetIntObj : procedure (objPtr:PTcl_Obj; intValue:longint);cdecl;
          tcl_SetListObj : procedure (objPtr:PTcl_Obj; objc:longint; objv:PPTcl_Obj);cdecl;
          tcl_SetLongObj : procedure (objPtr:PTcl_Obj; longValue:longint);cdecl;
          tcl_SetObjLength : procedure (objPtr:PTcl_Obj; length:longint);cdecl;
          tcl_SetStringObj : procedure (objPtr:PTcl_Obj; bytes:Pchar; length:longint);cdecl;
          tcl_AddErrorInfo : procedure (interp:PTcl_Interp; message:Pchar);cdecl;
          tcl_AddObjErrorInfo : procedure (interp:PTcl_Interp; message:Pchar; length:longint);cdecl;
          tcl_AllowExceptions : procedure (interp:PTcl_Interp);cdecl;
          tcl_AppendElement : procedure (interp:PTcl_Interp; element:Pchar);cdecl;
          tcl_AppendResult : procedure (interp:PTcl_Interp; args:array of const);cdecl;
          tcl_AsyncCreate : function (proc:PTcl_AsyncProc; clientData:ClientData):Tcl_AsyncHandler;cdecl;
          tcl_AsyncDelete : procedure (async:Tcl_AsyncHandler);cdecl;
          tcl_AsyncInvoke : function (interp:PTcl_Interp; code:longint):longint;cdecl;
          tcl_AsyncMark : procedure (async:Tcl_AsyncHandler);cdecl;
          tcl_AsyncReady : function :longint;cdecl;
          tcl_BackgroundError : procedure (interp:PTcl_Interp);cdecl;
          tcl_Backslash : function (src:Pchar; readPtr:Plongint):char;cdecl;
          tcl_BadChannelOption : function (interp:PTcl_Interp; optionName:Pchar; optionList:Pchar):longint;cdecl;
          tcl_CallWhenDeleted : procedure (interp:PTcl_Interp; proc:PTcl_InterpDeleteProc; clientData:ClientData);cdecl;
          tcl_CancelIdleCall : procedure (idleProc:PTcl_IdleProc; clientData:ClientData);cdecl;
          tcl_Close : function (interp:PTcl_Interp; chan:Tcl_Channel):longint;cdecl;
          tcl_CommandComplete : function (cmd:Pchar):longint;cdecl;
;
          tcl_ConvertElement : function (src:Pchar; dst:Pchar; flags:longint):longint;cdecl;
          tcl_ConvertCountedElement : function (src:Pchar; length:longint; dst:Pchar; flags:longint):longint;cdecl;
;
          tcl_CreateAliasObj : function (slave:PTcl_Interp; slaveCmd:Pchar; target:PTcl_Interp; targetCmd:Pchar; objc:longint; 
                       objv:PPTcl_Obj):longint;cdecl;
          tcl_CreateChannel : function (typePtr:PTcl_ChannelType; chanName:Pchar; instanceData:ClientData; mask:longint):Tcl_Channel;cdecl;
          tcl_CreateChannelHandler : procedure (chan:Tcl_Channel; mask:longint; proc:PTcl_ChannelProc; clientData:ClientData);cdecl;
          tcl_CreateCloseHandler : procedure (chan:Tcl_Channel; proc:PTcl_CloseProc; clientData:ClientData);cdecl;
          tcl_CreateCommand : function (interp:PTcl_Interp; cmdName:Pchar; proc:PTcl_CmdProc; clientData:ClientData; deleteProc:PTcl_CmdDeleteProc):Tcl_Command;cdecl;
          tcl_CreateEventSource : procedure (setupProc:PTcl_EventSetupProc; checkProc:PTcl_EventCheckProc; clientData:ClientData);cdecl;
          tcl_CreateExitHandler : procedure (proc:PTcl_ExitProc; clientData:ClientData);cdecl;
          tcl_CreateInterp : function :PTcl_Interp;cdecl;
          tcl_CreateMathFunc : procedure (interp:PTcl_Interp; name:Pchar; numArgs:longint; argTypes:PTcl_ValueType; proc:PTcl_MathProc; 
                        clientData:ClientData);cdecl;
          tcl_CreateObjCommand : function (interp:PTcl_Interp; cmdName:Pchar; proc:PTcl_ObjCmdProc; clientData:ClientData; deleteProc:PTcl_CmdDeleteProc):Tcl_Command;cdecl;
          tcl_CreateSlave : function (interp:PTcl_Interp; slaveName:Pchar; isSafe:longint):PTcl_Interp;cdecl;
          tcl_CreateTimerHandler : function (milliseconds:longint; proc:PTcl_TimerProc; clientData:ClientData):Tcl_TimerToken;cdecl;
          tcl_CreateTrace : function (interp:PTcl_Interp; level:longint; proc:PTcl_CmdTraceProc; clientData:ClientData):Tcl_Trace;cdecl;
          tcl_DeleteAssocData : procedure (interp:PTcl_Interp; name:Pchar);cdecl;
          tcl_DeleteChannelHandler : procedure (chan:Tcl_Channel; proc:PTcl_ChannelProc; clientData:ClientData);cdecl;
          tcl_DeleteCloseHandler : procedure (chan:Tcl_Channel; proc:PTcl_CloseProc; clientData:ClientData);cdecl;
          tcl_DeleteCommand : function (interp:PTcl_Interp; cmdName:Pchar):longint;cdecl;
          tcl_DeleteCommandFromToken : function (interp:PTcl_Interp; command:Tcl_Command):longint;cdecl;
          tcl_DeleteEvents : procedure (proc:PTcl_EventDeleteProc; clientData:ClientData);cdecl;
          tcl_DeleteEventSource : procedure (setupProc:PTcl_EventSetupProc; checkProc:PTcl_EventCheckProc; clientData:ClientData);cdecl;
          tcl_DeleteExitHandler : procedure (proc:PTcl_ExitProc; clientData:ClientData);cdecl;
          tcl_DeleteHashEntry : procedure (entryPtr:PTcl_HashEntry);cdecl;
          tcl_DeleteHashTable : procedure (tablePtr:PTcl_HashTable);cdecl;
          tcl_DeleteInterp : procedure (interp:PTcl_Interp);cdecl;
          tcl_DetachPids : procedure (numPids:longint; pidPtr:PTcl_Pid);cdecl;
          tcl_DeleteTimerHandler : procedure (token:Tcl_TimerToken);cdecl;
          tcl_DeleteTrace : procedure (interp:PTcl_Interp; trace:Tcl_Trace);cdecl;
          tcl_DontCallWhenDeleted : procedure (interp:PTcl_Interp; proc:PTcl_InterpDeleteProc; clientData:ClientData);cdecl;
          tcl_DoOneEvent : function (flags:longint):longint;cdecl;
          tcl_DoWhenIdle : procedure (proc:PTcl_IdleProc; clientData:ClientData);cdecl;
          tcl_DStringAppend : function (dsPtr:PTcl_DString; bytes:Pchar; length:longint):Pchar;cdecl;
          tcl_DStringAppendElement : function (dsPtr:PTcl_DString; element:Pchar):Pchar;cdecl;
          tcl_DStringEndSublist : procedure (dsPtr:PTcl_DString);cdecl;
          tcl_DStringFree : procedure (dsPtr:PTcl_DString);cdecl;
          tcl_DStringGetResult : procedure (interp:PTcl_Interp; dsPtr:PTcl_DString);cdecl;
          tcl_DStringInit : procedure (dsPtr:PTcl_DString);cdecl;
          tcl_DStringResult : procedure (interp:PTcl_Interp; dsPtr:PTcl_DString);cdecl;
          tcl_DStringSetLength : procedure (dsPtr:PTcl_DString; length:longint);cdecl;
          tcl_DStringStartSublist : procedure (dsPtr:PTcl_DString);cdecl;
          tcl_Eof : function (chan:Tcl_Channel):longint;cdecl;
;
;
          tcl_Eval : function (interp:PTcl_Interp; script:Pchar):longint;cdecl;
          tcl_EvalFile : function (interp:PTcl_Interp; fileName:Pchar):longint;cdecl;
          tcl_EvalObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj):longint;cdecl;
          tcl_EventuallyFree : procedure (clientData:ClientData; freeProc:PTcl_FreeProc);cdecl;
;
          tcl_ExposeCommand : function (interp:PTcl_Interp; hiddenCmdToken:Pchar; cmdName:Pchar):longint;cdecl;
          tcl_ExprBoolean : function (interp:PTcl_Interp; expr:Pchar; ptr:Plongint):longint;cdecl;
          tcl_ExprBooleanObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; ptr:Plongint):longint;cdecl;
          tcl_ExprDouble : function (interp:PTcl_Interp; expr:Pchar; ptr:Pdouble):longint;cdecl;
          tcl_ExprDoubleObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; ptr:Pdouble):longint;cdecl;
          tcl_ExprLong : function (interp:PTcl_Interp; expr:Pchar; ptr:Plongint):longint;cdecl;
          tcl_ExprLongObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; ptr:Plongint):longint;cdecl;
          tcl_ExprObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; resultPtrPtr:PPTcl_Obj):longint;cdecl;
          tcl_ExprString : function (interp:PTcl_Interp; expr:Pchar):longint;cdecl;
          tcl_Finalize : procedure ;cdecl;
          tcl_FindExecutable : procedure (argv0:Pchar);cdecl;
          tcl_FirstHashEntry : function (tablePtr:PTcl_HashTable; searchPtr:PTcl_HashSearch):PTcl_HashEntry;cdecl;
          tcl_Flush : function (chan:Tcl_Channel):longint;cdecl;
          tcl_FreeResult : procedure (interp:PTcl_Interp);cdecl;
;
;
          tcl_GetAssocData : function (interp:PTcl_Interp; name:Pchar; procPtr:PPTcl_InterpDeleteProc):ClientData;cdecl;
          tcl_GetChannel : function (interp:PTcl_Interp; chanName:Pchar; modePtr:Plongint):Tcl_Channel;cdecl;
          tcl_GetChannelBufferSize : function (chan:Tcl_Channel):longint;cdecl;
          tcl_GetChannelHandle : function (chan:Tcl_Channel; direction:longint; handlePtr:PClientData):longint;cdecl;
          tcl_GetChannelInstanceData : function (chan:Tcl_Channel):ClientData;cdecl;
          tcl_GetChannelMode : function (chan:Tcl_Channel):longint;cdecl;
;
          tcl_GetChannelOption : function (interp:PTcl_Interp; chan:Tcl_Channel; optionName:Pchar; dsPtr:PTcl_DString):longint;cdecl;
;
          tcl_GetCommandInfo : function (interp:PTcl_Interp; cmdName:Pchar; infoPtr:PTcl_CmdInfo):longint;cdecl;
;
          tcl_GetErrno : function :longint;cdecl;
;
          tcl_GetInterpPath : function (askInterp:PTcl_Interp; slaveInterp:PTcl_Interp):longint;cdecl;
          tcl_GetMaster : function (interp:PTcl_Interp):PTcl_Interp;cdecl;
          tcl_GetNameOfExecutable : function :Pchar;cdecl;
          tcl_GetObjResult : function (interp:PTcl_Interp):PTcl_Obj;cdecl;
          tcl_GetOpenFile : function (interp:PTcl_Interp; chanID:Pchar; forWriting:longint; checkUsage:longint; filePtr:PClientData):longint;cdecl;
          reserved167 : procedure ;cdecl;
          tcl_GetOpenFile : function (interp:PTcl_Interp; chanID:Pchar; forWriting:longint; checkUsage:longint; filePtr:PClientData):longint;cdecl;
          tcl_GetPathType : function (path:Pchar):Tcl_PathType;cdecl;
          tcl_Gets : function (chan:Tcl_Channel; dsPtr:PTcl_DString):longint;cdecl;
          tcl_GetsObj : function (chan:Tcl_Channel; objPtr:PTcl_Obj):longint;cdecl;
          tcl_GetServiceMode : function :longint;cdecl;
          tcl_GetSlave : function (interp:PTcl_Interp; slaveName:Pchar):PTcl_Interp;cdecl;
          tcl_GetStdChannel : function (_type:longint):Tcl_Channel;cdecl;
;
          tcl_GlobalEval : function (interp:PTcl_Interp; command:Pchar):longint;cdecl;
          tcl_GlobalEvalObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj):longint;cdecl;
          tcl_HideCommand : function (interp:PTcl_Interp; cmdName:Pchar; hiddenCmdToken:Pchar):longint;cdecl;
          tcl_Init : function (interp:PTcl_Interp):longint;cdecl;
          tcl_InitHashTable : procedure (tablePtr:PTcl_HashTable; keyType:longint);cdecl;
          tcl_InputBlocked : function (chan:Tcl_Channel):longint;cdecl;
          tcl_InputBuffered : function (chan:Tcl_Channel):longint;cdecl;
          tcl_InterpDeleted : function (interp:PTcl_Interp):longint;cdecl;
          tcl_IsSafe : function (interp:PTcl_Interp):longint;cdecl;
;
          tcl_LinkVar : function (interp:PTcl_Interp; varName:Pchar; addr:Pchar; _type:longint):longint;cdecl;
          reserved188 : procedure ;cdecl;
          tcl_MakeFileChannel : function (handle:ClientData; mode:longint):Tcl_Channel;cdecl;
          tcl_MakeSafe : function (interp:PTcl_Interp):longint;cdecl;
          tcl_MakeTcpClientChannel : function (tcpSocket:ClientData):Tcl_Channel;cdecl;
;
          tcl_NextHashEntry : function (searchPtr:PTcl_HashSearch):PTcl_HashEntry;cdecl;
          tcl_NotifyChannel : procedure (channel:Tcl_Channel; mask:longint);cdecl;
          tcl_ObjGetVar2 : function (interp:PTcl_Interp; part1Ptr:PTcl_Obj; part2Ptr:PTcl_Obj; flags:longint):PTcl_Obj;cdecl;
          tcl_ObjSetVar2 : function (interp:PTcl_Interp; part1Ptr:PTcl_Obj; part2Ptr:PTcl_Obj; newValuePtr:PTcl_Obj; flags:longint):PTcl_Obj;cdecl;
          tcl_OpenFileChannel : function (interp:PTcl_Interp; fileName:Pchar; modeString:Pchar; permissions:longint):Tcl_Channel;cdecl;
          tcl_OpenTcpClient : function (interp:PTcl_Interp; port:longint; address:Pchar; myaddr:Pchar; myport:longint; 
                       async:longint):Tcl_Channel;cdecl;
          tcl_OpenTcpServer : function (interp:PTcl_Interp; port:longint; host:Pchar; acceptProc:PTcl_TcpAcceptProc; callbackData:ClientData):Tcl_Channel;cdecl;
          tcl_Preserve : procedure (data:ClientData);cdecl;
          tcl_PrintDouble : procedure (interp:PTcl_Interp; value:double; dst:Pchar);cdecl;
          tcl_PutEnv : function (assignment:Pchar):longint;cdecl;
;
          tcl_QueueEvent : procedure (evPtr:PTcl_Event; position:Tcl_QueuePosition);cdecl;
          tcl_Read : function (chan:Tcl_Channel; bufPtr:Pchar; toRead:longint):longint;cdecl;
          tcl_ReapDetachedProcs : procedure ;cdecl;
          tcl_RecordAndEval : function (interp:PTcl_Interp; cmd:Pchar; flags:longint):longint;cdecl;
          tcl_RecordAndEvalObj : function (interp:PTcl_Interp; cmdPtr:PTcl_Obj; flags:longint):longint;cdecl;
          tcl_RegisterChannel : procedure (interp:PTcl_Interp; chan:Tcl_Channel);cdecl;
          tcl_RegisterObjType : procedure (typePtr:PTcl_ObjType);cdecl;
          tcl_RegExpCompile : function (interp:PTcl_Interp; pattern:Pchar):Tcl_RegExp;cdecl;
          tcl_RegExpExec : function (interp:PTcl_Interp; regexp:Tcl_RegExp; text:Pchar; start:Pchar):longint;cdecl;
          tcl_RegExpMatch : function (interp:PTcl_Interp; text:Pchar; pattern:Pchar):longint;cdecl;
;
          tcl_Release : procedure (clientData:ClientData);cdecl;
          tcl_ResetResult : procedure (interp:PTcl_Interp);cdecl;
          tcl_ScanElement : function (src:Pchar; flagPtr:Plongint):longint;cdecl;
          tcl_ScanCountedElement : function (src:Pchar; length:longint; flagPtr:Plongint):longint;cdecl;
          tcl_SeekOld : function (chan:Tcl_Channel; offset:longint; mode:longint):longint;cdecl;
          tcl_ServiceAll : function :longint;cdecl;
          tcl_ServiceEvent : function (flags:longint):longint;cdecl;
          tcl_SetAssocData : procedure (interp:PTcl_Interp; name:Pchar; proc:PTcl_InterpDeleteProc; clientData:ClientData);cdecl;
          tcl_SetChannelBufferSize : procedure (chan:Tcl_Channel; sz:longint);cdecl;
          tcl_SetChannelOption : function (interp:PTcl_Interp; chan:Tcl_Channel; optionName:Pchar; newValue:Pchar):longint;cdecl;
          tcl_SetCommandInfo : function (interp:PTcl_Interp; cmdName:Pchar; infoPtr:PTcl_CmdInfo):longint;cdecl;
          tcl_SetErrno : procedure (err:longint);cdecl;
          tcl_SetErrorCode : procedure (interp:PTcl_Interp; args:array of const);cdecl;
          tcl_SetMaxBlockTime : procedure (timePtr:PTcl_Time);cdecl;
;
          tcl_SetRecursionLimit : function (interp:PTcl_Interp; depth:longint):longint;cdecl;
          tcl_SetResult : procedure (interp:PTcl_Interp; result:Pchar; freeProc:PTcl_FreeProc);cdecl;
          tcl_SetServiceMode : function (mode:longint):longint;cdecl;
          tcl_SetObjErrorCode : procedure (interp:PTcl_Interp; errorObjPtr:PTcl_Obj);cdecl;
          tcl_SetObjResult : procedure (interp:PTcl_Interp; resultObjPtr:PTcl_Obj);cdecl;
          tcl_SetStdChannel : procedure (channel:Tcl_Channel; _type:longint);cdecl;
;
;
          tcl_SourceRCFile : procedure (interp:PTcl_Interp);cdecl;
;
;
          tcl_StaticPackage : procedure (interp:PTcl_Interp; pkgName:Pchar; initProc:PTcl_PackageInitProc; safeInitProc:PTcl_PackageInitProc);cdecl;
          tcl_StringMatch : function (str:Pchar; pattern:Pchar):longint;cdecl;
          tcl_TellOld : function (chan:Tcl_Channel):longint;cdecl;
          tcl_TraceVar : function (interp:PTcl_Interp; varName:Pchar; flags:longint; proc:PTcl_VarTraceProc; clientData:ClientData):longint;cdecl;
          tcl_TraceVar2 : function (interp:PTcl_Interp; part1:Pchar; part2:Pchar; flags:longint; proc:PTcl_VarTraceProc; 
                       clientData:ClientData):longint;cdecl;
          tcl_TranslateFileName : function (interp:PTcl_Interp; name:Pchar; bufferPtr:PTcl_DString):Pchar;cdecl;
          tcl_Ungets : function (chan:Tcl_Channel; str:Pchar; len:longint; atHead:longint):longint;cdecl;
          tcl_UnlinkVar : procedure (interp:PTcl_Interp; varName:Pchar);cdecl;
          tcl_UnregisterChannel : function (interp:PTcl_Interp; chan:Tcl_Channel):longint;cdecl;
          tcl_UnsetVar : function (interp:PTcl_Interp; varName:Pchar; flags:longint):longint;cdecl;
          tcl_UnsetVar2 : function (interp:PTcl_Interp; part1:Pchar; part2:Pchar; flags:longint):longint;cdecl;
          tcl_UntraceVar : procedure (interp:PTcl_Interp; varName:Pchar; flags:longint; proc:PTcl_VarTraceProc; clientData:ClientData);cdecl;
          tcl_UntraceVar2 : procedure (interp:PTcl_Interp; part1:Pchar; part2:Pchar; flags:longint; proc:PTcl_VarTraceProc; 
                        clientData:ClientData);cdecl;
          tcl_UpdateLinkedVar : procedure (interp:PTcl_Interp; varName:Pchar);cdecl;
          tcl_UpVar : function (interp:PTcl_Interp; frameName:Pchar; varName:Pchar; localName:Pchar; flags:longint):longint;cdecl;
          tcl_UpVar2 : function (interp:PTcl_Interp; frameName:Pchar; part1:Pchar; part2:Pchar; localName:Pchar; 
                       flags:longint):longint;cdecl;
          tcl_VarEval : function (interp:PTcl_Interp; args:array of const):longint;cdecl;
          tcl_VarTraceInfo : function (interp:PTcl_Interp; varName:Pchar; flags:longint; procPtr:PTcl_VarTraceProc; prevClientData:ClientData):ClientData;cdecl;
          tcl_VarTraceInfo2 : function (interp:PTcl_Interp; part1:Pchar; part2:Pchar; flags:longint; procPtr:PTcl_VarTraceProc; 
                       prevClientData:ClientData):ClientData;cdecl;
          tcl_Write : function (chan:Tcl_Channel; s:Pchar; slen:longint):longint;cdecl;
          tcl_WrongNumArgs : procedure (interp:PTcl_Interp; objc:longint; objv:PPTcl_Obj; message:Pchar);cdecl;
          tcl_DumpActiveMemory : function (fileName:Pchar):longint;cdecl;
          tcl_ValidateAllMemory : procedure (file:Pchar; line:longint);cdecl;
          tcl_AppendResultVA : procedure (interp:PTcl_Interp; argList:va_list);cdecl;
          tcl_AppendStringsToObjVA : procedure (objPtr:PTcl_Obj; argList:va_list);cdecl;
          tcl_HashStats : function (tablePtr:PTcl_HashTable):Pchar;cdecl;
;
          tcl_PkgProvide : function (interp:PTcl_Interp; name:Pchar; version:Pchar):longint;cdecl;
          tcl_SetErrorCodeVA : procedure (interp:PTcl_Interp; argList:va_list);cdecl;
          tcl_VarEvalVA : function (interp:PTcl_Interp; argList:va_list):longint;cdecl;
          tcl_WaitPid : function (pid:Tcl_Pid; statPtr:Plongint; options:longint):Tcl_Pid;cdecl;
;
          tcl_GetVersion : procedure (major:Plongint; minor:Plongint; patchLevel:Plongint; _type:Plongint);cdecl;
          tcl_InitMemory : procedure (interp:PTcl_Interp);cdecl;
          tcl_StackChannel : function (interp:PTcl_Interp; typePtr:PTcl_ChannelType; instanceData:ClientData; mask:longint; prevChan:Tcl_Channel):Tcl_Channel;cdecl;
          tcl_UnstackChannel : function (interp:PTcl_Interp; chan:Tcl_Channel):longint;cdecl;
          tcl_GetStackedChannel : function (chan:Tcl_Channel):Tcl_Channel;cdecl;
          tcl_SetMainLoop : procedure (proc:PTcl_MainLoopProc);cdecl;
          reserved285 : procedure ;cdecl;
          tcl_AppendObjToObj : procedure (objPtr:PTcl_Obj; appendObjPtr:PTcl_Obj);cdecl;
          tcl_CreateEncoding : function (typePtr:PTcl_EncodingType):Tcl_Encoding;cdecl;
          tcl_CreateThreadExitHandler : procedure (proc:PTcl_ExitProc; clientData:ClientData);cdecl;
          tcl_DeleteThreadExitHandler : procedure (proc:PTcl_ExitProc; clientData:ClientData);cdecl;
          tcl_DiscardResult : procedure (statePtr:PTcl_SavedResult);cdecl;
          tcl_EvalEx : function (interp:PTcl_Interp; script:Pchar; numBytes:longint; flags:longint):longint;cdecl;
          tcl_EvalObjv : function (interp:PTcl_Interp; objc:longint; objv:PPTcl_Obj; flags:longint):longint;cdecl;
          tcl_EvalObjEx : function (interp:PTcl_Interp; objPtr:PTcl_Obj; flags:longint):longint;cdecl;
          tcl_ExitThread : procedure (status:longint);cdecl;
          tcl_ExternalToUtf : function (interp:PTcl_Interp; encoding:Tcl_Encoding; src:Pchar; srcLen:longint; flags:longint; 
                       statePtr:PTcl_EncodingState; dst:Pchar; dstLen:longint; srcReadPtr:Plongint; dstWrotePtr:Plongint; 
                       dstCharsPtr:Plongint):longint;cdecl;
          tcl_ExternalToUtfDString : function (encoding:Tcl_Encoding; src:Pchar; srcLen:longint; dsPtr:PTcl_DString):Pchar;cdecl;
          tcl_FinalizeThread : procedure ;cdecl;
          tcl_FinalizeNotifier : procedure (clientData:ClientData);cdecl;
          tcl_FreeEncoding : procedure (encoding:Tcl_Encoding);cdecl;
          tcl_GetCurrentThread : function :Tcl_ThreadId;cdecl;
          tcl_GetEncoding : function (interp:PTcl_Interp; name:Pchar):Tcl_Encoding;cdecl;
;
          tcl_GetEncodingNames : procedure (interp:PTcl_Interp);cdecl;
          tcl_GetIndexFromObjStruct : function (interp:PTcl_Interp; objPtr:PTcl_Obj; tablePtr:pointer; offset:longint; msg:Pchar; 
                       flags:longint; indexPtr:Plongint):longint;cdecl;
          tcl_GetThreadData : function (keyPtr:PTcl_ThreadDataKey; size:longint):pointer;cdecl;
          tcl_GetVar2Ex : function (interp:PTcl_Interp; part1:Pchar; part2:Pchar; flags:longint):PTcl_Obj;cdecl;
          tcl_InitNotifier : function :ClientData;cdecl;
          tcl_MutexLock : procedure (mutexPtr:PTcl_Mutex);cdecl;
          tcl_MutexUnlock : procedure (mutexPtr:PTcl_Mutex);cdecl;
          tcl_ConditionNotify : procedure (condPtr:PTcl_Condition);cdecl;
          tcl_ConditionWait : procedure (condPtr:PTcl_Condition; mutexPtr:PTcl_Mutex; timePtr:PTcl_Time);cdecl;
          tcl_NumUtfChars : function (src:Pchar; length:longint):longint;cdecl;
          tcl_ReadChars : function (channel:Tcl_Channel; objPtr:PTcl_Obj; charsToRead:longint; appendFlag:longint):longint;cdecl;
          tcl_RestoreResult : procedure (interp:PTcl_Interp; statePtr:PTcl_SavedResult);cdecl;
          tcl_SaveResult : procedure (interp:PTcl_Interp; statePtr:PTcl_SavedResult);cdecl;
          tcl_SetSystemEncoding : function (interp:PTcl_Interp; name:Pchar):longint;cdecl;
          tcl_SetVar2Ex : function (interp:PTcl_Interp; part1:Pchar; part2:Pchar; newValuePtr:PTcl_Obj; flags:longint):PTcl_Obj;cdecl;
          tcl_ThreadAlert : procedure (threadId:Tcl_ThreadId);cdecl;
          tcl_ThreadQueueEvent : procedure (threadId:Tcl_ThreadId; evPtr:PTcl_Event; position:Tcl_QueuePosition);cdecl;
          tcl_UniCharAtIndex : function (src:Pchar; index:longint):Tcl_UniChar;cdecl;
          tcl_UniCharToLower : function (ch:longint):Tcl_UniChar;cdecl;
          tcl_UniCharToTitle : function (ch:longint):Tcl_UniChar;cdecl;
          tcl_UniCharToUpper : function (ch:longint):Tcl_UniChar;cdecl;
          tcl_UniCharToUtf : function (ch:longint; buf:Pchar):longint;cdecl;
          tcl_UtfCharComplete : function (src:Pchar; length:longint):longint;cdecl;
          tcl_UtfBackslash : function (src:Pchar; readPtr:Plongint; dst:Pchar):longint;cdecl;
;
          tcl_UtfToExternal : function (interp:PTcl_Interp; encoding:Tcl_Encoding; src:Pchar; srcLen:longint; flags:longint; 
                       statePtr:PTcl_EncodingState; dst:Pchar; dstLen:longint; srcReadPtr:Plongint; dstWrotePtr:Plongint; 
                       dstCharsPtr:Plongint):longint;cdecl;
          tcl_UtfToExternalDString : function (encoding:Tcl_Encoding; src:Pchar; srcLen:longint; dsPtr:PTcl_DString):Pchar;cdecl;
          tcl_UtfToLower : function (src:Pchar):longint;cdecl;
          tcl_UtfToTitle : function (src:Pchar):longint;cdecl;
          tcl_UtfToUniChar : function (src:Pchar; chPtr:PTcl_UniChar):longint;cdecl;
          tcl_UtfToUpper : function (src:Pchar):longint;cdecl;
          tcl_WriteChars : function (chan:Tcl_Channel; src:Pchar; srcLen:longint):longint;cdecl;
          tcl_WriteObj : function (chan:Tcl_Channel; objPtr:PTcl_Obj):longint;cdecl;
          tcl_GetString : function (objPtr:PTcl_Obj):Pchar;cdecl;
;
          tcl_SetDefaultEncodingDir : procedure (path:Pchar);cdecl;
          tcl_AlertNotifier : procedure (clientData:ClientData);cdecl;
          tcl_ServiceModeHook : procedure (mode:longint);cdecl;
          tcl_UniCharIsAlnum : function (ch:longint):longint;cdecl;
          tcl_UniCharIsAlpha : function (ch:longint):longint;cdecl;
          tcl_UniCharIsDigit : function (ch:longint):longint;cdecl;
          tcl_UniCharIsLower : function (ch:longint):longint;cdecl;
          tcl_UniCharIsSpace : function (ch:longint):longint;cdecl;
          tcl_UniCharIsUpper : function (ch:longint):longint;cdecl;
          tcl_UniCharIsWordChar : function (ch:longint):longint;cdecl;
          tcl_UniCharLen : function (uniStr:PTcl_UniChar):longint;cdecl;
          tcl_UniCharNcmp : function (ucs:PTcl_UniChar; uct:PTcl_UniChar; numChars:dword):longint;cdecl;
          tcl_UniCharToUtfDString : function (uniStr:PTcl_UniChar; uniLength:longint; dsPtr:PTcl_DString):Pchar;cdecl;
          tcl_UtfToUniCharDString : function (src:Pchar; length:longint; dsPtr:PTcl_DString):PTcl_UniChar;cdecl;
          tcl_GetRegExpFromObj : function (interp:PTcl_Interp; patObj:PTcl_Obj; flags:longint):Tcl_RegExp;cdecl;
          tcl_EvalTokens : function (interp:PTcl_Interp; tokenPtr:PTcl_Token; count:longint):PTcl_Obj;cdecl;
          tcl_FreeParse : procedure (parsePtr:PTcl_Parse);cdecl;
          tcl_LogCommandInfo : procedure (interp:PTcl_Interp; script:Pchar; command:Pchar; length:longint);cdecl;
;
          tcl_ParseCommand : function (interp:PTcl_Interp; start:Pchar; numBytes:longint; nested:longint; parsePtr:PTcl_Parse):longint;cdecl;
          tcl_ParseExpr : function (interp:PTcl_Interp; start:Pchar; numBytes:longint; parsePtr:PTcl_Parse):longint;cdecl;
;
          tcl_ParseVarName : function (interp:PTcl_Interp; start:Pchar; numBytes:longint; parsePtr:PTcl_Parse; append:longint):longint;cdecl;
          tcl_GetCwd : function (interp:PTcl_Interp; cwdPtr:PTcl_DString):Pchar;cdecl;
          tcl_Chdir : function (dirName:Pchar):longint;cdecl;
          tcl_Access : function (path:Pchar; mode:longint):longint;cdecl;
          tcl_Stat : function (path:Pchar; bufPtr:Pstat):longint;cdecl;
          tcl_UtfNcmp : function (s1:Pchar; s2:Pchar; n:dword):longint;cdecl;
          tcl_UtfNcasecmp : function (s1:Pchar; s2:Pchar; n:dword):longint;cdecl;
          tcl_StringCaseMatch : function (str:Pchar; pattern:Pchar; nocase:longint):longint;cdecl;
          tcl_UniCharIsControl : function (ch:longint):longint;cdecl;
          tcl_UniCharIsGraph : function (ch:longint):longint;cdecl;
          tcl_UniCharIsPrint : function (ch:longint):longint;cdecl;
          tcl_UniCharIsPunct : function (ch:longint):longint;cdecl;
          tcl_RegExpExecObj : function (interp:PTcl_Interp; regexp:Tcl_RegExp; textObj:PTcl_Obj; offset:longint; nmatches:longint; 
                       flags:longint):longint;cdecl;
          tcl_RegExpGetInfo : procedure (regexp:Tcl_RegExp; infoPtr:PTcl_RegExpInfo);cdecl;
          tcl_NewUnicodeObj : function (unicode:PTcl_UniChar; numChars:longint):PTcl_Obj;cdecl;
          tcl_SetUnicodeObj : procedure (objPtr:PTcl_Obj; unicode:PTcl_UniChar; numChars:longint);cdecl;
          tcl_GetCharLength : function (objPtr:PTcl_Obj):longint;cdecl;
          tcl_GetUniChar : function (objPtr:PTcl_Obj; index:longint):Tcl_UniChar;cdecl;
          tcl_GetUnicode : function (objPtr:PTcl_Obj):PTcl_UniChar;cdecl;
          tcl_GetRange : function (objPtr:PTcl_Obj; first:longint; last:longint):PTcl_Obj;cdecl;
          tcl_AppendUnicodeToObj : procedure (objPtr:PTcl_Obj; unicode:PTcl_UniChar; length:longint);cdecl;
          tcl_RegExpMatchObj : function (interp:PTcl_Interp; textObj:PTcl_Obj; patternObj:PTcl_Obj):longint;cdecl;
          tcl_SetNotifier : procedure (notifierProcPtr:PTcl_NotifierProcs);cdecl;
          tcl_GetAllocMutex : function :PTcl_Mutex;cdecl;
          tcl_GetChannelNames : function (interp:PTcl_Interp):longint;cdecl;
          tcl_GetChannelNamesEx : function (interp:PTcl_Interp; pattern:Pchar):longint;cdecl;
          tcl_ProcObjCmd : function (clientData:ClientData; interp:PTcl_Interp; objc:longint; objv:PPTcl_Obj):longint;cdecl;
          tcl_ConditionFinalize : procedure (condPtr:PTcl_Condition);cdecl;
          tcl_MutexFinalize : procedure (mutex:PTcl_Mutex);cdecl;
          tcl_CreateThread : function (idPtr:PTcl_ThreadId; proc:PTcl_ThreadCreateProc; clientData:ClientData; stackSize:longint; flags:longint):longint;cdecl;
          tcl_ReadRaw : function (chan:Tcl_Channel; dst:Pchar; bytesToRead:longint):longint;cdecl;
          tcl_WriteRaw : function (chan:Tcl_Channel; src:Pchar; srcLen:longint):longint;cdecl;
          tcl_GetTopChannel : function (chan:Tcl_Channel):Tcl_Channel;cdecl;
          tcl_ChannelBuffered : function (chan:Tcl_Channel):longint;cdecl;
;
          tcl_ChannelVersion : function (chanTypePtr:PTcl_ChannelType):Tcl_ChannelTypeVersion;cdecl;
          tcl_ChannelBlockModeProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverBlockModeProc;cdecl;
          tcl_ChannelCloseProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverCloseProc;cdecl;
          tcl_ChannelClose2Proc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverClose2Proc;cdecl;
          tcl_ChannelInputProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverInputProc;cdecl;
          tcl_ChannelOutputProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverOutputProc;cdecl;
          tcl_ChannelSeekProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverSeekProc;cdecl;
          tcl_ChannelSetOptionProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverSetOptionProc;cdecl;
          tcl_ChannelGetOptionProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverGetOptionProc;cdecl;
          tcl_ChannelWatchProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverWatchProc;cdecl;
          tcl_ChannelGetHandleProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverGetHandleProc;cdecl;
          tcl_ChannelFlushProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverFlushProc;cdecl;
          tcl_ChannelHandlerProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverHandlerProc;cdecl;
          tcl_JoinThread : function (threadId:Tcl_ThreadId; result:Plongint):longint;cdecl;
          tcl_IsChannelShared : function (channel:Tcl_Channel):longint;cdecl;
          tcl_IsChannelRegistered : function (interp:PTcl_Interp; channel:Tcl_Channel):longint;cdecl;
          tcl_CutChannel : procedure (channel:Tcl_Channel);cdecl;
          tcl_SpliceChannel : procedure (channel:Tcl_Channel);cdecl;
          tcl_ClearChannelHandlers : procedure (channel:Tcl_Channel);cdecl;
          tcl_IsChannelExisting : function (channelName:Pchar):longint;cdecl;
          tcl_UniCharNcasecmp : function (ucs:PTcl_UniChar; uct:PTcl_UniChar; numChars:dword):longint;cdecl;
          tcl_UniCharCaseMatch : function (uniStr:PTcl_UniChar; uniPattern:PTcl_UniChar; nocase:longint):longint;cdecl;
          tcl_FindHashEntry : function (tablePtr:PTcl_HashTable; key:pointer):PTcl_HashEntry;cdecl;
          tcl_CreateHashEntry : function (tablePtr:PTcl_HashTable; key:pointer; newPtr:Plongint):PTcl_HashEntry;cdecl;
          tcl_InitCustomHashTable : procedure (tablePtr:PTcl_HashTable; keyType:longint; typePtr:PTcl_HashKeyType);cdecl;
          tcl_InitObjHashTable : procedure (tablePtr:PTcl_HashTable);cdecl;
          tcl_CommandTraceInfo : function (interp:PTcl_Interp; varName:Pchar; flags:longint; procPtr:PTcl_CommandTraceProc; prevClientData:ClientData):ClientData;cdecl;
          tcl_TraceCommand : function (interp:PTcl_Interp; varName:Pchar; flags:longint; proc:PTcl_CommandTraceProc; clientData:ClientData):longint;cdecl;
          tcl_UntraceCommand : procedure (interp:PTcl_Interp; varName:Pchar; flags:longint; proc:PTcl_CommandTraceProc; clientData:ClientData);cdecl;
          tcl_AttemptAlloc : function (size:dword):Pchar;cdecl;
          tcl_AttemptDbCkalloc : function (size:dword; file:Pchar; line:longint):Pchar;cdecl;
          tcl_AttemptRealloc : function (ptr:Pchar; size:dword):Pchar;cdecl;
          tcl_AttemptDbCkrealloc : function (ptr:Pchar; size:dword; file:Pchar; line:longint):Pchar;cdecl;
          tcl_AttemptSetObjLength : function (objPtr:PTcl_Obj; length:longint):longint;cdecl;
          tcl_GetChannelThread : function (channel:Tcl_Channel):Tcl_ThreadId;cdecl;
          tcl_GetUnicodeFromObj : function (objPtr:PTcl_Obj; lengthPtr:Plongint):PTcl_UniChar;cdecl;
          tcl_GetMathFuncInfo : function (interp:PTcl_Interp; name:Pchar; numArgsPtr:Plongint; argTypesPtr:PPTcl_ValueType; procPtr:PPTcl_MathProc; 
                       clientDataPtr:PClientData):longint;cdecl;
          tcl_ListMathFuncs : function (interp:PTcl_Interp; pattern:Pchar):PTcl_Obj;cdecl;
          tcl_SubstObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; flags:longint):PTcl_Obj;cdecl;
          tcl_DetachChannel : function (interp:PTcl_Interp; channel:Tcl_Channel):longint;cdecl;
          tcl_IsStandardChannel : function (channel:Tcl_Channel):longint;cdecl;
          tcl_FSCopyFile : function (srcPathPtr:PTcl_Obj; destPathPtr:PTcl_Obj):longint;cdecl;
          tcl_FSCopyDirectory : function (srcPathPtr:PTcl_Obj; destPathPtr:PTcl_Obj; errorPtr:PPTcl_Obj):longint;cdecl;
          tcl_FSCreateDirectory : function (pathPtr:PTcl_Obj):longint;cdecl;
          tcl_FSDeleteFile : function (pathPtr:PTcl_Obj):longint;cdecl;
          tcl_FSLoadFile : function (interp:PTcl_Interp; pathPtr:PTcl_Obj; sym1:Pchar; sym2:Pchar; proc1Ptr:PPTcl_PackageInitProc; 
                       proc2Ptr:PPTcl_PackageInitProc; handlePtr:PTcl_LoadHandle; unloadProcPtr:PPTcl_FSUnloadFileProc):longint;cdecl;
          tcl_FSMatchInDirectory : function (interp:PTcl_Interp; result:PTcl_Obj; pathPtr:PTcl_Obj; pattern:Pchar; types:PTcl_GlobTypeData):longint;cdecl;
          tcl_FSLink : function (pathPtr:PTcl_Obj; toPtr:PTcl_Obj; linkAction:longint):PTcl_Obj;cdecl;
          tcl_FSRemoveDirectory : function (pathPtr:PTcl_Obj; recursive:longint; errorPtr:PPTcl_Obj):longint;cdecl;
          tcl_FSRenameFile : function (srcPathPtr:PTcl_Obj; destPathPtr:PTcl_Obj):longint;cdecl;
          tcl_FSLstat : function (pathPtr:PTcl_Obj; buf:PTcl_StatBuf):longint;cdecl;
          tcl_FSUtime : function (pathPtr:PTcl_Obj; tval:Putimbuf):longint;cdecl;
          tcl_FSFileAttrsGet : function (interp:PTcl_Interp; index:longint; pathPtr:PTcl_Obj; objPtrRef:PPTcl_Obj):longint;cdecl;
          tcl_FSFileAttrsSet : function (interp:PTcl_Interp; index:longint; pathPtr:PTcl_Obj; objPtr:PTcl_Obj):longint;cdecl;
;
          tcl_FSStat : function (pathPtr:PTcl_Obj; buf:PTcl_StatBuf):longint;cdecl;
          tcl_FSAccess : function (pathPtr:PTcl_Obj; mode:longint):longint;cdecl;
          tcl_FSOpenFileChannel : function (interp:PTcl_Interp; pathPtr:PTcl_Obj; modeString:Pchar; permissions:longint):Tcl_Channel;cdecl;
          tcl_FSGetCwd : function (interp:PTcl_Interp):PTcl_Obj;cdecl;
          tcl_FSChdir : function (pathPtr:PTcl_Obj):longint;cdecl;
          tcl_FSConvertToPathType : function (interp:PTcl_Interp; pathPtr:PTcl_Obj):longint;cdecl;
          tcl_FSJoinPath : function (listObj:PTcl_Obj; elements:longint):PTcl_Obj;cdecl;
          tcl_FSSplitPath : function (pathPtr:PTcl_Obj; lenPtr:Plongint):PTcl_Obj;cdecl;
          tcl_FSEqualPaths : function (firstPtr:PTcl_Obj; secondPtr:PTcl_Obj):longint;cdecl;
          tcl_FSGetNormalizedPath : function (interp:PTcl_Interp; pathPtr:PTcl_Obj):PTcl_Obj;cdecl;
          tcl_FSJoinToPath : function (pathPtr:PTcl_Obj; objc:longint; objv:PPTcl_Obj):PTcl_Obj;cdecl;
          tcl_FSGetInternalRep : function (pathPtr:PTcl_Obj; fsPtr:PTcl_Filesystem):ClientData;cdecl;
          tcl_FSGetTranslatedPath : function (interp:PTcl_Interp; pathPtr:PTcl_Obj):PTcl_Obj;cdecl;
          tcl_FSEvalFile : function (interp:PTcl_Interp; fileName:PTcl_Obj):longint;cdecl;
          tcl_FSNewNativePath : function (fromFilesystem:PTcl_Filesystem; clientData:ClientData):PTcl_Obj;cdecl;
          tcl_FSGetNativePath : function (pathPtr:PTcl_Obj):pointer;cdecl;
          tcl_FSFileSystemInfo : function (pathPtr:PTcl_Obj):PTcl_Obj;cdecl;
          tcl_FSPathSeparator : function (pathPtr:PTcl_Obj):PTcl_Obj;cdecl;
          tcl_FSListVolumes : function :PTcl_Obj;cdecl;
          tcl_FSRegister : function (clientData:ClientData; fsPtr:PTcl_Filesystem):longint;cdecl;
          tcl_FSUnregister : function (fsPtr:PTcl_Filesystem):longint;cdecl;
          tcl_FSData : function (fsPtr:PTcl_Filesystem):ClientData;cdecl;
          tcl_FSGetTranslatedStringPath : function (interp:PTcl_Interp; pathPtr:PTcl_Obj):Pchar;cdecl;
;
          tcl_FSGetPathType : function (pathPtr:PTcl_Obj):Tcl_PathType;cdecl;
          tcl_OutputBuffered : function (chan:Tcl_Channel):longint;cdecl;
          tcl_FSMountsChanged : procedure (fsPtr:PTcl_Filesystem);cdecl;
          tcl_EvalTokensStandard : function (interp:PTcl_Interp; tokenPtr:PTcl_Token; count:longint):longint;cdecl;
          tcl_GetTime : procedure (timeBuf:PTcl_Time);cdecl;
          tcl_CreateObjTrace : function (interp:PTcl_Interp; level:longint; flags:longint; objProc:PTcl_CmdObjTraceProc; clientData:ClientData; 
                       delProc:PTcl_CmdObjTraceDeleteProc):Tcl_Trace;cdecl;
          tcl_GetCommandInfoFromToken : function (token:Tcl_Command; infoPtr:PTcl_CmdInfo):longint;cdecl;
          tcl_SetCommandInfoFromToken : function (token:Tcl_Command; infoPtr:PTcl_CmdInfo):longint;cdecl;
          tcl_DbNewWideIntObj : function (wideValue:Tcl_WideInt; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_GetWideIntFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; widePtr:PTcl_WideInt):longint;cdecl;
          tcl_NewWideIntObj : function (wideValue:Tcl_WideInt):PTcl_Obj;cdecl;
          tcl_SetWideIntObj : procedure (objPtr:PTcl_Obj; wideValue:Tcl_WideInt);cdecl;
          tcl_AllocStatBuf : function :PTcl_StatBuf;cdecl;
          tcl_Seek : function (chan:Tcl_Channel; offset:Tcl_WideInt; mode:longint):Tcl_WideInt;cdecl;
          tcl_Tell : function (chan:Tcl_Channel):Tcl_WideInt;cdecl;
          tcl_ChannelWideSeekProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverWideSeekProc;cdecl;
          tcl_DictObjPut : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; keyPtr:PTcl_Obj; valuePtr:PTcl_Obj):longint;cdecl;
          tcl_DictObjGet : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; keyPtr:PTcl_Obj; valuePtrPtr:PPTcl_Obj):longint;cdecl;
          tcl_DictObjRemove : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; keyPtr:PTcl_Obj):longint;cdecl;
          tcl_DictObjSize : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; sizePtr:Plongint):longint;cdecl;
          tcl_DictObjFirst : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; searchPtr:PTcl_DictSearch; keyPtrPtr:PPTcl_Obj; valuePtrPtr:PPTcl_Obj; 
                       donePtr:Plongint):longint;cdecl;
          tcl_DictObjNext : procedure (searchPtr:PTcl_DictSearch; keyPtrPtr:PPTcl_Obj; valuePtrPtr:PPTcl_Obj; donePtr:Plongint);cdecl;
          tcl_DictObjDone : procedure (searchPtr:PTcl_DictSearch);cdecl;
          tcl_DictObjPutKeyList : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; keyc:longint; keyv:PPTcl_Obj; valuePtr:PTcl_Obj):longint;cdecl;
          tcl_DictObjRemoveKeyList : function (interp:PTcl_Interp; dictPtr:PTcl_Obj; keyc:longint; keyv:PPTcl_Obj):longint;cdecl;
          tcl_NewDictObj : function :PTcl_Obj;cdecl;
          tcl_DbNewDictObj : function (file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_RegisterConfig : procedure (interp:PTcl_Interp; pkgName:Pchar; configuration:PTcl_Config; valEncoding:Pchar);cdecl;
          tcl_CreateNamespace : function (interp:PTcl_Interp; name:Pchar; clientData:ClientData; deleteProc:PTcl_NamespaceDeleteProc):PTcl_Namespace;cdecl;
          tcl_DeleteNamespace : procedure (nsPtr:PTcl_Namespace);cdecl;
          tcl_AppendExportList : function (interp:PTcl_Interp; nsPtr:PTcl_Namespace; objPtr:PTcl_Obj):longint;cdecl;
          tcl_Export : function (interp:PTcl_Interp; nsPtr:PTcl_Namespace; pattern:Pchar; resetListFirst:longint):longint;cdecl;
          tcl_Import : function (interp:PTcl_Interp; nsPtr:PTcl_Namespace; pattern:Pchar; allowOverwrite:longint):longint;cdecl;
          tcl_ForgetImport : function (interp:PTcl_Interp; nsPtr:PTcl_Namespace; pattern:Pchar):longint;cdecl;
          tcl_GetCurrentNamespace : function (interp:PTcl_Interp):PTcl_Namespace;cdecl;
          tcl_GetGlobalNamespace : function (interp:PTcl_Interp):PTcl_Namespace;cdecl;
          tcl_FindNamespace : function (interp:PTcl_Interp; name:Pchar; contextNsPtr:PTcl_Namespace; flags:longint):PTcl_Namespace;cdecl;
          tcl_FindCommand : function (interp:PTcl_Interp; name:Pchar; contextNsPtr:PTcl_Namespace; flags:longint):Tcl_Command;cdecl;
          tcl_GetCommandFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj):Tcl_Command;cdecl;
          tcl_GetCommandFullName : procedure (interp:PTcl_Interp; command:Tcl_Command; objPtr:PTcl_Obj);cdecl;
          tcl_FSEvalFileEx : function (interp:PTcl_Interp; fileName:PTcl_Obj; encodingName:Pchar):longint;cdecl;
;
          tcl_LimitAddHandler : procedure (interp:PTcl_Interp; _type:longint; handlerProc:PTcl_LimitHandlerProc; clientData:ClientData; deleteProc:PTcl_LimitHandlerDeleteProc);cdecl;
          tcl_LimitRemoveHandler : procedure (interp:PTcl_Interp; _type:longint; handlerProc:PTcl_LimitHandlerProc; clientData:ClientData);cdecl;
          tcl_LimitReady : function (interp:PTcl_Interp):longint;cdecl;
          tcl_LimitCheck : function (interp:PTcl_Interp):longint;cdecl;
          tcl_LimitExceeded : function (interp:PTcl_Interp):longint;cdecl;
          tcl_LimitSetCommands : procedure (interp:PTcl_Interp; commandLimit:longint);cdecl;
          tcl_LimitSetTime : procedure (interp:PTcl_Interp; timeLimitPtr:PTcl_Time);cdecl;
          tcl_LimitSetGranularity : procedure (interp:PTcl_Interp; _type:longint; granularity:longint);cdecl;
          tcl_LimitTypeEnabled : function (interp:PTcl_Interp; _type:longint):longint;cdecl;
          tcl_LimitTypeExceeded : function (interp:PTcl_Interp; _type:longint):longint;cdecl;
          tcl_LimitTypeSet : procedure (interp:PTcl_Interp; _type:longint);cdecl;
          tcl_LimitTypeReset : procedure (interp:PTcl_Interp; _type:longint);cdecl;
          tcl_LimitGetCommands : function (interp:PTcl_Interp):longint;cdecl;
          tcl_LimitGetTime : procedure (interp:PTcl_Interp; timeLimitPtr:PTcl_Time);cdecl;
          tcl_LimitGetGranularity : function (interp:PTcl_Interp; _type:longint):longint;cdecl;
          tcl_SaveInterpState : function (interp:PTcl_Interp; status:longint):Tcl_InterpState;cdecl;
          tcl_RestoreInterpState : function (interp:PTcl_Interp; state:Tcl_InterpState):longint;cdecl;
          tcl_DiscardInterpState : procedure (state:Tcl_InterpState);cdecl;
          tcl_SetReturnOptions : function (interp:PTcl_Interp; options:PTcl_Obj):longint;cdecl;
          tcl_GetReturnOptions : function (interp:PTcl_Interp; result:longint):PTcl_Obj;cdecl;
          tcl_IsEnsemble : function (token:Tcl_Command):longint;cdecl;
          tcl_CreateEnsemble : function (interp:PTcl_Interp; name:Pchar; namespacePtr:PTcl_Namespace; flags:longint):Tcl_Command;cdecl;
          tcl_FindEnsemble : function (interp:PTcl_Interp; cmdNameObj:PTcl_Obj; flags:longint):Tcl_Command;cdecl;
          tcl_SetEnsembleSubcommandList : function (interp:PTcl_Interp; token:Tcl_Command; subcmdList:PTcl_Obj):longint;cdecl;
          tcl_SetEnsembleMappingDict : function (interp:PTcl_Interp; token:Tcl_Command; mapDict:PTcl_Obj):longint;cdecl;
          tcl_SetEnsembleUnknownHandler : function (interp:PTcl_Interp; token:Tcl_Command; unknownList:PTcl_Obj):longint;cdecl;
          tcl_SetEnsembleFlags : function (interp:PTcl_Interp; token:Tcl_Command; flags:longint):longint;cdecl;
          tcl_GetEnsembleSubcommandList : function (interp:PTcl_Interp; token:Tcl_Command; subcmdListPtr:PPTcl_Obj):longint;cdecl;
          tcl_GetEnsembleMappingDict : function (interp:PTcl_Interp; token:Tcl_Command; mapDictPtr:PPTcl_Obj):longint;cdecl;
          tcl_GetEnsembleUnknownHandler : function (interp:PTcl_Interp; token:Tcl_Command; unknownListPtr:PPTcl_Obj):longint;cdecl;
          tcl_GetEnsembleFlags : function (interp:PTcl_Interp; token:Tcl_Command; flagsPtr:Plongint):longint;cdecl;
          tcl_GetEnsembleNamespace : function (interp:PTcl_Interp; token:Tcl_Command; namespacePtrPtr:PPTcl_Namespace):longint;cdecl;
          tcl_SetTimeProc : procedure (getProc:PTcl_GetTimeProc; scaleProc:PTcl_ScaleTimeProc; clientData:ClientData);cdecl;
          tcl_QueryTimeProc : procedure (getProc:PPTcl_GetTimeProc; scaleProc:PPTcl_ScaleTimeProc; clientData:PClientData);cdecl;
          tcl_ChannelThreadActionProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverThreadActionProc;cdecl;
          tcl_NewBignumObj : function (value:Pmp_int):PTcl_Obj;cdecl;
          tcl_DbNewBignumObj : function (value:Pmp_int; file:Pchar; line:longint):PTcl_Obj;cdecl;
          tcl_SetBignumObj : procedure (obj:PTcl_Obj; value:Pmp_int);cdecl;
          tcl_GetBignumFromObj : function (interp:PTcl_Interp; obj:PTcl_Obj; value:Pmp_int):longint;cdecl;
          tcl_TakeBignumFromObj : function (interp:PTcl_Interp; obj:PTcl_Obj; value:Pmp_int):longint;cdecl;
          tcl_TruncateChannel : function (chan:Tcl_Channel; length:Tcl_WideInt):longint;cdecl;
          tcl_ChannelTruncateProc : function (chanTypePtr:PTcl_ChannelType):PTcl_DriverTruncateProc;cdecl;
          tcl_SetChannelErrorInterp : procedure (interp:PTcl_Interp; msg:PTcl_Obj);cdecl;
          tcl_GetChannelErrorInterp : procedure (interp:PTcl_Interp; msg:PPTcl_Obj);cdecl;
          tcl_SetChannelError : procedure (chan:Tcl_Channel; msg:PTcl_Obj);cdecl;
          tcl_GetChannelError : procedure (chan:Tcl_Channel; msg:PPTcl_Obj);cdecl;
          tcl_InitBignumFromDouble : function (interp:PTcl_Interp; initval:double; toInit:Pmp_int):longint;cdecl;
          tcl_GetNamespaceUnknownHandler : function (interp:PTcl_Interp; nsPtr:PTcl_Namespace):PTcl_Obj;cdecl;
          tcl_SetNamespaceUnknownHandler : function (interp:PTcl_Interp; nsPtr:PTcl_Namespace; handlerPtr:PTcl_Obj):longint;cdecl;
          tcl_GetEncodingFromObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; encodingPtr:PTcl_Encoding):longint;cdecl;
          tcl_GetEncodingSearchPath : function :PTcl_Obj;cdecl;
          tcl_SetEncodingSearchPath : function (searchPath:PTcl_Obj):longint;cdecl;
          tcl_GetEncodingNameFromEnvironment : function (bufPtr:PTcl_DString):Pchar;cdecl;
          tcl_PkgRequireProc : function (interp:PTcl_Interp; name:Pchar; objc:longint; objv:PPTcl_Obj; clientDataPtr:pointer):longint;cdecl;
          tcl_AppendObjToErrorInfo : procedure (interp:PTcl_Interp; objPtr:PTcl_Obj);cdecl;
          tcl_AppendLimitedToObj : procedure (objPtr:PTcl_Obj; bytes:Pchar; length:longint; limit:longint; ellipsis:Pchar);cdecl;
          tcl_Format : function (interp:PTcl_Interp; format:Pchar; objc:longint; objv:PPTcl_Obj):PTcl_Obj;cdecl;
          tcl_AppendFormatToObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; format:Pchar; objc:longint; objv:PPTcl_Obj):longint;cdecl;
          tcl_CancelEval : function (interp:PTcl_Interp; resultObjPtr:PTcl_Obj; clientData:ClientData; flags:longint):longint;cdecl;
          tcl_Canceled : function (interp:PTcl_Interp; flags:longint):longint;cdecl;
          tcl_CreatePipe : function (interp:PTcl_Interp; rchan:PTcl_Channel; wchan:PTcl_Channel; flags:longint):longint;cdecl;
          tcl_NRCreateCommand : function (interp:PTcl_Interp; cmdName:Pchar; proc:PTcl_ObjCmdProc; nreProc:PTcl_ObjCmdProc; clientData:ClientData; 
                       deleteProc:PTcl_CmdDeleteProc):Tcl_Command;cdecl;
          tcl_NREvalObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; flags:longint):longint;cdecl;
          tcl_NREvalObjv : function (interp:PTcl_Interp; objc:longint; objv:PPTcl_Obj; flags:longint):longint;cdecl;
          tcl_NRCmdSwap : function (interp:PTcl_Interp; cmd:Tcl_Command; objc:longint; objv:PPTcl_Obj; flags:longint):longint;cdecl;
          tcl_NRAddCallback : procedure (interp:PTcl_Interp; postProcPtr:PTcl_NRPostProc; data0:ClientData; data1:ClientData; data2:ClientData; 
                        data3:ClientData);cdecl;
          tcl_NRCallObjProc : function (interp:PTcl_Interp; objProc:PTcl_ObjCmdProc; clientData:ClientData; objc:longint; objv:PPTcl_Obj):longint;cdecl;
          tcl_GetFSDeviceFromStat : function (statPtr:PTcl_StatBuf):dword;cdecl;
          tcl_GetFSInodeFromStat : function (statPtr:PTcl_StatBuf):dword;cdecl;
          tcl_GetModeFromStat : function (statPtr:PTcl_StatBuf):dword;cdecl;
          tcl_GetLinkCountFromStat : function (statPtr:PTcl_StatBuf):longint;cdecl;
          tcl_GetUserIdFromStat : function (statPtr:PTcl_StatBuf):longint;cdecl;
          tcl_GetGroupIdFromStat : function (statPtr:PTcl_StatBuf):longint;cdecl;
          tcl_GetDeviceTypeFromStat : function (statPtr:PTcl_StatBuf):longint;cdecl;
          tcl_GetAccessTimeFromStat : function (statPtr:PTcl_StatBuf):Tcl_WideInt;cdecl;
          tcl_GetModificationTimeFromStat : function (statPtr:PTcl_StatBuf):Tcl_WideInt;cdecl;
          tcl_GetChangeTimeFromStat : function (statPtr:PTcl_StatBuf):Tcl_WideInt;cdecl;
          tcl_GetSizeFromStat : function (statPtr:PTcl_StatBuf):Tcl_WideUInt;cdecl;
          tcl_GetBlocksFromStat : function (statPtr:PTcl_StatBuf):Tcl_WideUInt;cdecl;
          tcl_GetBlockSizeFromStat : function (statPtr:PTcl_StatBuf):dword;cdecl;
          tcl_SetEnsembleParameterList : function (interp:PTcl_Interp; token:Tcl_Command; paramList:PTcl_Obj):longint;cdecl;
          tcl_GetEnsembleParameterList : function (interp:PTcl_Interp; token:Tcl_Command; paramListPtr:PPTcl_Obj):longint;cdecl;
          tcl_ParseArgsObjv : function (interp:PTcl_Interp; argTable:PTcl_ArgvInfo; objcPtr:Plongint; objv:PPTcl_Obj; remObjv:PPPTcl_Obj):longint;cdecl;
          tcl_GetErrorLine : function (interp:PTcl_Interp):longint;cdecl;
          tcl_SetErrorLine : procedure (interp:PTcl_Interp; lineNum:longint);cdecl;
          tcl_TransferResult : procedure (sourceInterp:PTcl_Interp; result:longint; targetInterp:PTcl_Interp);cdecl;
          tcl_InterpActive : function (interp:PTcl_Interp):longint;cdecl;
          tcl_BackgroundException : procedure (interp:PTcl_Interp; code:longint);cdecl;
          tcl_ZlibDeflate : function (interp:PTcl_Interp; format:longint; data:PTcl_Obj; level:longint; gzipHeaderDictObj:PTcl_Obj):longint;cdecl;
          tcl_ZlibInflate : function (interp:PTcl_Interp; format:longint; data:PTcl_Obj; buffersize:longint; gzipHeaderDictObj:PTcl_Obj):longint;cdecl;
          tcl_ZlibCRC32 : function (crc:dword; buf:Pbyte; len:longint):dword;cdecl;
          tcl_ZlibAdler32 : function (adler:dword; buf:Pbyte; len:longint):dword;cdecl;
          tcl_ZlibStreamInit : function (interp:PTcl_Interp; mode:longint; format:longint; level:longint; dictObj:PTcl_Obj; 
                       zshandle:PTcl_ZlibStream):longint;cdecl;
          tcl_ZlibStreamGetCommandName : function (zshandle:Tcl_ZlibStream):PTcl_Obj;cdecl;
          tcl_ZlibStreamEof : function (zshandle:Tcl_ZlibStream):longint;cdecl;
          tcl_ZlibStreamChecksum : function (zshandle:Tcl_ZlibStream):longint;cdecl;
          tcl_ZlibStreamPut : function (zshandle:Tcl_ZlibStream; data:PTcl_Obj; flush:longint):longint;cdecl;
          tcl_ZlibStreamGet : function (zshandle:Tcl_ZlibStream; data:PTcl_Obj; count:longint):longint;cdecl;
          tcl_ZlibStreamClose : function (zshandle:Tcl_ZlibStream):longint;cdecl;
          tcl_ZlibStreamReset : function (zshandle:Tcl_ZlibStream):longint;cdecl;
          tcl_SetStartupScript : procedure (path:PTcl_Obj; encoding:Pchar);cdecl;
          tcl_GetStartupScript : function (encodingPtr:PPchar):PTcl_Obj;cdecl;
          tcl_CloseEx : function (interp:PTcl_Interp; chan:Tcl_Channel; flags:longint):longint;cdecl;
          tcl_NRExprObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; resultPtr:PTcl_Obj):longint;cdecl;
          tcl_NRSubstObj : function (interp:PTcl_Interp; objPtr:PTcl_Obj; flags:longint):longint;cdecl;
          tcl_LoadFile : function (interp:PTcl_Interp; pathPtr:PTcl_Obj; symv:PPchar; flags:longint; procPtrs:pointer; 
                       handlePtr:PTcl_LoadHandle):longint;cdecl;
          tcl_FindSymbol : function (interp:PTcl_Interp; handle:Tcl_LoadHandle; symbol:Pchar):pointer;cdecl;
          tcl_FSUnloadFile : function (interp:PTcl_Interp; handlePtr:Tcl_LoadHandle):longint;cdecl;
          tcl_ZlibStreamSetCompressionDictionary : procedure (zhandle:Tcl_ZlibStream; compressionDictionaryObj:PTcl_Obj);cdecl;
        end;
(* Const before type ignored *)

      var
        tclStubsPtr : ^TclStubs;cvar;external;
{ C++ end of extern C conditionnal removed }
{$if defined(USE_TCL_STUBS)}
    {
     * Inline function declarations:
      }
    { 0  }

    const
      Tcl_PkgProvideEx = tclStubsPtr^.tcl_PkgProvideEx;      
    { 1  }
      Tcl_PkgRequireEx = tclStubsPtr^.tcl_PkgRequireEx;      
    { 2  }
      Tcl_Panic = tclStubsPtr^.tcl_Panic;      
    { 3  }
      Tcl_Alloc = tclStubsPtr^.tcl_Alloc;      
    { 4  }
      Tcl_Free = tclStubsPtr^.tcl_Free;      
    { 5  }
      Tcl_Realloc = tclStubsPtr^.tcl_Realloc;      
    { 6  }
      Tcl_DbCkalloc = tclStubsPtr^.tcl_DbCkalloc;      
    { 7  }
      Tcl_DbCkfree = tclStubsPtr^.tcl_DbCkfree;      
    { 8  }
      Tcl_DbCkrealloc = tclStubsPtr^.tcl_DbCkrealloc;      
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 9  }

    const
      Tcl_CreateFileHandler = tclStubsPtr^.tcl_CreateFileHandler;      
{$endif}
    { UNIX  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 9  }

    const
      Tcl_CreateFileHandler = tclStubsPtr^.tcl_CreateFileHandler;      
{$endif}
    { MACOSX  }
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 10  }

    const
      Tcl_DeleteFileHandler = tclStubsPtr^.tcl_DeleteFileHandler;      
{$endif}
    { UNIX  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 10  }

    const
      Tcl_DeleteFileHandler = tclStubsPtr^.tcl_DeleteFileHandler;      
{$endif}
    { MACOSX  }
    { 11  }

    const
      Tcl_SetTimer = tclStubsPtr^.tcl_SetTimer;      
    { 12  }
      Tcl_Sleep = tclStubsPtr^.tcl_Sleep;      
    { 13  }
      Tcl_WaitForEvent = tclStubsPtr^.tcl_WaitForEvent;      
    { 14  }
      Tcl_AppendAllObjTypes = tclStubsPtr^.tcl_AppendAllObjTypes;      
    { 15  }
      Tcl_AppendStringsToObj = tclStubsPtr^.tcl_AppendStringsToObj;      
    { 16  }
      Tcl_AppendToObj = tclStubsPtr^.tcl_AppendToObj;      
    { 17  }
      Tcl_ConcatObj = tclStubsPtr^.tcl_ConcatObj;      
    { 18  }
      Tcl_ConvertToType = tclStubsPtr^.tcl_ConvertToType;      
    { 19  }
      Tcl_DbDecrRefCount = tclStubsPtr^.tcl_DbDecrRefCount;      
    { 20  }
      Tcl_DbIncrRefCount = tclStubsPtr^.tcl_DbIncrRefCount;      
    { 21  }
      Tcl_DbIsShared = tclStubsPtr^.tcl_DbIsShared;      
    { 22  }
      Tcl_DbNewBooleanObj = tclStubsPtr^.tcl_DbNewBooleanObj;      
    { 23  }
      Tcl_DbNewByteArrayObj = tclStubsPtr^.tcl_DbNewByteArrayObj;      
    { 24  }
      Tcl_DbNewDoubleObj = tclStubsPtr^.tcl_DbNewDoubleObj;      
    { 25  }
      Tcl_DbNewListObj = tclStubsPtr^.tcl_DbNewListObj;      
    { 26  }
      Tcl_DbNewLongObj = tclStubsPtr^.tcl_DbNewLongObj;      
    { 27  }
      Tcl_DbNewObj = tclStubsPtr^.tcl_DbNewObj;      
    { 28  }
      Tcl_DbNewStringObj = tclStubsPtr^.tcl_DbNewStringObj;      
    { 29  }
      Tcl_DuplicateObj = tclStubsPtr^.tcl_DuplicateObj;      
    { 30  }
      TclFreeObj = tclStubsPtr^.tclFreeObj;      
    { 31  }
      Tcl_GetBoolean = tclStubsPtr^.tcl_GetBoolean;      
    { 32  }
      Tcl_GetBooleanFromObj = tclStubsPtr^.tcl_GetBooleanFromObj;      
    { 33  }
      Tcl_GetByteArrayFromObj = tclStubsPtr^.tcl_GetByteArrayFromObj;      
    { 34  }
      Tcl_GetDouble = tclStubsPtr^.tcl_GetDouble;      
    { 35  }
      Tcl_GetDoubleFromObj = tclStubsPtr^.tcl_GetDoubleFromObj;      
    { 36  }
      Tcl_GetIndexFromObj = tclStubsPtr^.tcl_GetIndexFromObj;      
    { 37  }
      Tcl_GetInt = tclStubsPtr^.tcl_GetInt;      
    { 38  }
      Tcl_GetIntFromObj = tclStubsPtr^.tcl_GetIntFromObj;      
    { 39  }
      Tcl_GetLongFromObj = tclStubsPtr^.tcl_GetLongFromObj;      
    { 40  }
      Tcl_GetObjType = tclStubsPtr^.tcl_GetObjType;      
    { 41  }
      Tcl_GetStringFromObj = tclStubsPtr^.tcl_GetStringFromObj;      
    { 42  }
      Tcl_InvalidateStringRep = tclStubsPtr^.tcl_InvalidateStringRep;      
    { 43  }
      Tcl_ListObjAppendList = tclStubsPtr^.tcl_ListObjAppendList;      
    { 44  }
      Tcl_ListObjAppendElement = tclStubsPtr^.tcl_ListObjAppendElement;      
    { 45  }
      Tcl_ListObjGetElements = tclStubsPtr^.tcl_ListObjGetElements;      
    { 46  }
      Tcl_ListObjIndex = tclStubsPtr^.tcl_ListObjIndex;      
    { 47  }
      Tcl_ListObjLength = tclStubsPtr^.tcl_ListObjLength;      
    { 48  }
      Tcl_ListObjReplace = tclStubsPtr^.tcl_ListObjReplace;      
    { 49  }
      Tcl_NewBooleanObj = tclStubsPtr^.tcl_NewBooleanObj;      
    { 50  }
      Tcl_NewByteArrayObj = tclStubsPtr^.tcl_NewByteArrayObj;      
    { 51  }
      Tcl_NewDoubleObj = tclStubsPtr^.tcl_NewDoubleObj;      
    { 52  }
      Tcl_NewIntObj = tclStubsPtr^.tcl_NewIntObj;      
    { 53  }
      Tcl_NewListObj = tclStubsPtr^.tcl_NewListObj;      
    { 54  }
      Tcl_NewLongObj = tclStubsPtr^.tcl_NewLongObj;      
    { 55  }
      Tcl_NewObj = tclStubsPtr^.tcl_NewObj;      
    { 56  }
      Tcl_NewStringObj = tclStubsPtr^.tcl_NewStringObj;      
    { 57  }
      Tcl_SetBooleanObj = tclStubsPtr^.tcl_SetBooleanObj;      
    { 58  }
      Tcl_SetByteArrayLength = tclStubsPtr^.tcl_SetByteArrayLength;      
    { 59  }
      Tcl_SetByteArrayObj = tclStubsPtr^.tcl_SetByteArrayObj;      
    { 60  }
      Tcl_SetDoubleObj = tclStubsPtr^.tcl_SetDoubleObj;      
    { 61  }
      Tcl_SetIntObj = tclStubsPtr^.tcl_SetIntObj;      
    { 62  }
      Tcl_SetListObj = tclStubsPtr^.tcl_SetListObj;      
    { 63  }
      Tcl_SetLongObj = tclStubsPtr^.tcl_SetLongObj;      
    { 64  }
      Tcl_SetObjLength = tclStubsPtr^.tcl_SetObjLength;      
    { 65  }
      Tcl_SetStringObj = tclStubsPtr^.tcl_SetStringObj;      
    { 66  }
      Tcl_AddErrorInfo = tclStubsPtr^.tcl_AddErrorInfo;      
    { 67  }
      Tcl_AddObjErrorInfo = tclStubsPtr^.tcl_AddObjErrorInfo;      
    { 68  }
      Tcl_AllowExceptions = tclStubsPtr^.tcl_AllowExceptions;      
    { 69  }
      Tcl_AppendElement = tclStubsPtr^.tcl_AppendElement;      
    { 70  }
      Tcl_AppendResult = tclStubsPtr^.tcl_AppendResult;      
    { 71  }
      Tcl_AsyncCreate = tclStubsPtr^.tcl_AsyncCreate;      
    { 72  }
      Tcl_AsyncDelete = tclStubsPtr^.tcl_AsyncDelete;      
    { 73  }
      Tcl_AsyncInvoke = tclStubsPtr^.tcl_AsyncInvoke;      
    { 74  }
      Tcl_AsyncMark = tclStubsPtr^.tcl_AsyncMark;      
    { 75  }
      Tcl_AsyncReady = tclStubsPtr^.tcl_AsyncReady;      
    { 76  }
      Tcl_BackgroundError = tclStubsPtr^.tcl_BackgroundError;      
    { 77  }
      Tcl_Backslash = tclStubsPtr^.tcl_Backslash;      
    { 78  }
      Tcl_BadChannelOption = tclStubsPtr^.tcl_BadChannelOption;      
    { 79  }
      Tcl_CallWhenDeleted = tclStubsPtr^.tcl_CallWhenDeleted;      
    { 80  }
      Tcl_CancelIdleCall = tclStubsPtr^.tcl_CancelIdleCall;      
    { 81  }
      Tcl_Close = tclStubsPtr^.tcl_Close;      
    { 82  }
      Tcl_CommandComplete = tclStubsPtr^.tcl_CommandComplete;      
    { 83  }
      Tcl_Concat = tclStubsPtr^.tcl_Concat;      
    { 84  }
      Tcl_ConvertElement = tclStubsPtr^.tcl_ConvertElement;      
    { 85  }
      Tcl_ConvertCountedElement = tclStubsPtr^.tcl_ConvertCountedElement;      
    { 86  }
      Tcl_CreateAlias = tclStubsPtr^.tcl_CreateAlias;      
    { 87  }
      Tcl_CreateAliasObj = tclStubsPtr^.tcl_CreateAliasObj;      
    { 88  }
      Tcl_CreateChannel = tclStubsPtr^.tcl_CreateChannel;      
    { 89  }
      Tcl_CreateChannelHandler = tclStubsPtr^.tcl_CreateChannelHandler;      
    { 90  }
      Tcl_CreateCloseHandler = tclStubsPtr^.tcl_CreateCloseHandler;      
    { 91  }
      Tcl_CreateCommand = tclStubsPtr^.tcl_CreateCommand;      
    { 92  }
      Tcl_CreateEventSource = tclStubsPtr^.tcl_CreateEventSource;      
    { 93  }
      Tcl_CreateExitHandler = tclStubsPtr^.tcl_CreateExitHandler;      
    { 94  }
      Tcl_CreateInterp = tclStubsPtr^.tcl_CreateInterp;      
    { 95  }
      Tcl_CreateMathFunc = tclStubsPtr^.tcl_CreateMathFunc;      
    { 96  }
      Tcl_CreateObjCommand = tclStubsPtr^.tcl_CreateObjCommand;      
    { 97  }
      Tcl_CreateSlave = tclStubsPtr^.tcl_CreateSlave;      
    { 98  }
      Tcl_CreateTimerHandler = tclStubsPtr^.tcl_CreateTimerHandler;      
    { 99  }
      Tcl_CreateTrace = tclStubsPtr^.tcl_CreateTrace;      
    { 100  }
      Tcl_DeleteAssocData = tclStubsPtr^.tcl_DeleteAssocData;      
    { 101  }
      Tcl_DeleteChannelHandler = tclStubsPtr^.tcl_DeleteChannelHandler;      
    { 102  }
      Tcl_DeleteCloseHandler = tclStubsPtr^.tcl_DeleteCloseHandler;      
    { 103  }
      Tcl_DeleteCommand = tclStubsPtr^.tcl_DeleteCommand;      
    { 104  }
      Tcl_DeleteCommandFromToken = tclStubsPtr^.tcl_DeleteCommandFromToken;      
    { 105  }
      Tcl_DeleteEvents = tclStubsPtr^.tcl_DeleteEvents;      
    { 106  }
      Tcl_DeleteEventSource = tclStubsPtr^.tcl_DeleteEventSource;      
    { 107  }
      Tcl_DeleteExitHandler = tclStubsPtr^.tcl_DeleteExitHandler;      
    { 108  }
      Tcl_DeleteHashEntry = tclStubsPtr^.tcl_DeleteHashEntry;      
    { 109  }
      Tcl_DeleteHashTable = tclStubsPtr^.tcl_DeleteHashTable;      
    { 110  }
      Tcl_DeleteInterp = tclStubsPtr^.tcl_DeleteInterp;      
    { 111  }
      Tcl_DetachPids = tclStubsPtr^.tcl_DetachPids;      
    { 112  }
      Tcl_DeleteTimerHandler = tclStubsPtr^.tcl_DeleteTimerHandler;      
    { 113  }
      Tcl_DeleteTrace = tclStubsPtr^.tcl_DeleteTrace;      
    { 114  }
      Tcl_DontCallWhenDeleted = tclStubsPtr^.tcl_DontCallWhenDeleted;      
    { 115  }
      Tcl_DoOneEvent = tclStubsPtr^.tcl_DoOneEvent;      
    { 116  }
      Tcl_DoWhenIdle = tclStubsPtr^.tcl_DoWhenIdle;      
    { 117  }
      Tcl_DStringAppend = tclStubsPtr^.tcl_DStringAppend;      
    { 118  }
      Tcl_DStringAppendElement = tclStubsPtr^.tcl_DStringAppendElement;      
    { 119  }
      Tcl_DStringEndSublist = tclStubsPtr^.tcl_DStringEndSublist;      
    { 120  }
      Tcl_DStringFree = tclStubsPtr^.tcl_DStringFree;      
    { 121  }
      Tcl_DStringGetResult = tclStubsPtr^.tcl_DStringGetResult;      
    { 122  }
      Tcl_DStringInit = tclStubsPtr^.tcl_DStringInit;      
    { 123  }
      Tcl_DStringResult = tclStubsPtr^.tcl_DStringResult;      
    { 124  }
      Tcl_DStringSetLength = tclStubsPtr^.tcl_DStringSetLength;      
    { 125  }
      Tcl_DStringStartSublist = tclStubsPtr^.tcl_DStringStartSublist;      
    { 126  }
      Tcl_Eof = tclStubsPtr^.tcl_Eof;      
    { 127  }
      Tcl_ErrnoId = tclStubsPtr^.tcl_ErrnoId;      
    { 128  }
      Tcl_ErrnoMsg = tclStubsPtr^.tcl_ErrnoMsg;      
    { 129  }
      Tcl_Eval = tclStubsPtr^.tcl_Eval;      
    { 130  }
      Tcl_EvalFile = tclStubsPtr^.tcl_EvalFile;      
    { 131  }
      Tcl_EvalObj = tclStubsPtr^.tcl_EvalObj;      
    { 132  }
      Tcl_EventuallyFree = tclStubsPtr^.tcl_EventuallyFree;      
    { 133  }
      Tcl_Exit = tclStubsPtr^.tcl_Exit;      
    { 134  }
      Tcl_ExposeCommand = tclStubsPtr^.tcl_ExposeCommand;      
    { 135  }
      Tcl_ExprBoolean = tclStubsPtr^.tcl_ExprBoolean;      
    { 136  }
      Tcl_ExprBooleanObj = tclStubsPtr^.tcl_ExprBooleanObj;      
    { 137  }
      Tcl_ExprDouble = tclStubsPtr^.tcl_ExprDouble;      
    { 138  }
      Tcl_ExprDoubleObj = tclStubsPtr^.tcl_ExprDoubleObj;      
    { 139  }
      Tcl_ExprLong = tclStubsPtr^.tcl_ExprLong;      
    { 140  }
      Tcl_ExprLongObj = tclStubsPtr^.tcl_ExprLongObj;      
    { 141  }
      Tcl_ExprObj = tclStubsPtr^.tcl_ExprObj;      
    { 142  }
      Tcl_ExprString = tclStubsPtr^.tcl_ExprString;      
    { 143  }
      Tcl_Finalize = tclStubsPtr^.tcl_Finalize;      
    { 144  }
      Tcl_FindExecutable = tclStubsPtr^.tcl_FindExecutable;      
    { 145  }
      Tcl_FirstHashEntry = tclStubsPtr^.tcl_FirstHashEntry;      
    { 146  }
      Tcl_Flush = tclStubsPtr^.tcl_Flush;      
    { 147  }
      Tcl_FreeResult = tclStubsPtr^.tcl_FreeResult;      
    { 148  }
      Tcl_GetAlias = tclStubsPtr^.tcl_GetAlias;      
    { 149  }
      Tcl_GetAliasObj = tclStubsPtr^.tcl_GetAliasObj;      
    { 150  }
      Tcl_GetAssocData = tclStubsPtr^.tcl_GetAssocData;      
    { 151  }
      Tcl_GetChannel = tclStubsPtr^.tcl_GetChannel;      
    { 152  }
      Tcl_GetChannelBufferSize = tclStubsPtr^.tcl_GetChannelBufferSize;      
    { 153  }
      Tcl_GetChannelHandle = tclStubsPtr^.tcl_GetChannelHandle;      
    { 154  }
      Tcl_GetChannelInstanceData = tclStubsPtr^.tcl_GetChannelInstanceData;      
    { 155  }
      Tcl_GetChannelMode = tclStubsPtr^.tcl_GetChannelMode;      
    { 156  }
      Tcl_GetChannelName = tclStubsPtr^.tcl_GetChannelName;      
    { 157  }
      Tcl_GetChannelOption = tclStubsPtr^.tcl_GetChannelOption;      
    { 158  }
      Tcl_GetChannelType = tclStubsPtr^.tcl_GetChannelType;      
    { 159  }
      Tcl_GetCommandInfo = tclStubsPtr^.tcl_GetCommandInfo;      
    { 160  }
      Tcl_GetCommandName = tclStubsPtr^.tcl_GetCommandName;      
    { 161  }
      Tcl_GetErrno = tclStubsPtr^.tcl_GetErrno;      
    { 162  }
      Tcl_GetHostName = tclStubsPtr^.tcl_GetHostName;      
    { 163  }
      Tcl_GetInterpPath = tclStubsPtr^.tcl_GetInterpPath;      
    { 164  }
      Tcl_GetMaster = tclStubsPtr^.tcl_GetMaster;      
    { 165  }
      Tcl_GetNameOfExecutable = tclStubsPtr^.tcl_GetNameOfExecutable;      
    { 166  }
      Tcl_GetObjResult = tclStubsPtr^.tcl_GetObjResult;      
{$if !defined(_WIN32) && !defined(MAC_OSX_TCL) /* UNIX */}
    { 167  }

    const
      Tcl_GetOpenFile = tclStubsPtr^.tcl_GetOpenFile;      
{$endif}
    { UNIX  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
    { 167  }

    const
      Tcl_GetOpenFile = tclStubsPtr^.tcl_GetOpenFile;      
{$endif}
    { MACOSX  }
    { 168  }

    const
      Tcl_GetPathType = tclStubsPtr^.tcl_GetPathType;      
    { 169  }
      Tcl_Gets = tclStubsPtr^.tcl_Gets;      
    { 170  }
      Tcl_GetsObj = tclStubsPtr^.tcl_GetsObj;      
    { 171  }
      Tcl_GetServiceMode = tclStubsPtr^.tcl_GetServiceMode;      
    { 172  }
      Tcl_GetSlave = tclStubsPtr^.tcl_GetSlave;      
    { 173  }
      Tcl_GetStdChannel = tclStubsPtr^.tcl_GetStdChannel;      
    { 174  }
      Tcl_GetStringResult = tclStubsPtr^.tcl_GetStringResult;      
    { 175  }
      Tcl_GetVar = tclStubsPtr^.tcl_GetVar;      
    { 176  }
      Tcl_GetVar2 = tclStubsPtr^.tcl_GetVar2;      
    { 177  }
      Tcl_GlobalEval = tclStubsPtr^.tcl_GlobalEval;      
    { 178  }
      Tcl_GlobalEvalObj = tclStubsPtr^.tcl_GlobalEvalObj;      
    { 179  }
      Tcl_HideCommand = tclStubsPtr^.tcl_HideCommand;      
    { 180  }
      Tcl_Init = tclStubsPtr^.tcl_Init;      
    { 181  }
      Tcl_InitHashTable = tclStubsPtr^.tcl_InitHashTable;      
    { 182  }
      Tcl_InputBlocked = tclStubsPtr^.tcl_InputBlocked;      
    { 183  }
      Tcl_InputBuffered = tclStubsPtr^.tcl_InputBuffered;      
    { 184  }
      Tcl_InterpDeleted = tclStubsPtr^.tcl_InterpDeleted;      
    { 185  }
      Tcl_IsSafe = tclStubsPtr^.tcl_IsSafe;      
    { 186  }
      Tcl_JoinPath = tclStubsPtr^.tcl_JoinPath;      
    { 187  }
      Tcl_LinkVar = tclStubsPtr^.tcl_LinkVar;      
    { Slot 188 is reserved  }
    { 189  }
      Tcl_MakeFileChannel = tclStubsPtr^.tcl_MakeFileChannel;      
    { 190  }
      Tcl_MakeSafe = tclStubsPtr^.tcl_MakeSafe;      
    { 191  }
      Tcl_MakeTcpClientChannel = tclStubsPtr^.tcl_MakeTcpClientChannel;      
    { 192  }
      Tcl_Merge = tclStubsPtr^.tcl_Merge;      
    { 193  }
      Tcl_NextHashEntry = tclStubsPtr^.tcl_NextHashEntry;      
    { 194  }
      Tcl_NotifyChannel = tclStubsPtr^.tcl_NotifyChannel;      
    { 195  }
      Tcl_ObjGetVar2 = tclStubsPtr^.tcl_ObjGetVar2;      
    { 196  }
      Tcl_ObjSetVar2 = tclStubsPtr^.tcl_ObjSetVar2;      
    { 197  }
      Tcl_OpenCommandChannel = tclStubsPtr^.tcl_OpenCommandChannel;      
    { 198  }
      Tcl_OpenFileChannel = tclStubsPtr^.tcl_OpenFileChannel;      
    { 199  }
      Tcl_OpenTcpClient = tclStubsPtr^.tcl_OpenTcpClient;      
    { 200  }
      Tcl_OpenTcpServer = tclStubsPtr^.tcl_OpenTcpServer;      
    { 201  }
      Tcl_Preserve = tclStubsPtr^.tcl_Preserve;      
    { 202  }
      Tcl_PrintDouble = tclStubsPtr^.tcl_PrintDouble;      
    { 203  }
      Tcl_PutEnv = tclStubsPtr^.tcl_PutEnv;      
    { 204  }
      Tcl_PosixError = tclStubsPtr^.tcl_PosixError;      
    { 205  }
      Tcl_QueueEvent = tclStubsPtr^.tcl_QueueEvent;      
    { 206  }
      Tcl_Read = tclStubsPtr^.tcl_Read;      
    { 207  }
      Tcl_ReapDetachedProcs = tclStubsPtr^.tcl_ReapDetachedProcs;      
    { 208  }
      Tcl_RecordAndEval = tclStubsPtr^.tcl_RecordAndEval;      
    { 209  }
      Tcl_RecordAndEvalObj = tclStubsPtr^.tcl_RecordAndEvalObj;      
    { 210  }
      Tcl_RegisterChannel = tclStubsPtr^.tcl_RegisterChannel;      
    { 211  }
      Tcl_RegisterObjType = tclStubsPtr^.tcl_RegisterObjType;      
    { 212  }
      Tcl_RegExpCompile = tclStubsPtr^.tcl_RegExpCompile;      
    { 213  }
      Tcl_RegExpExec = tclStubsPtr^.tcl_RegExpExec;      
    { 214  }
      Tcl_RegExpMatch = tclStubsPtr^.tcl_RegExpMatch;      
    { 215  }
      Tcl_RegExpRange = tclStubsPtr^.tcl_RegExpRange;      
    { 216  }
      Tcl_Release = tclStubsPtr^.tcl_Release;      
    { 217  }
      Tcl_ResetResult = tclStubsPtr^.tcl_ResetResult;      
    { 218  }
      Tcl_ScanElement = tclStubsPtr^.tcl_ScanElement;      
    { 219  }
      Tcl_ScanCountedElement = tclStubsPtr^.tcl_ScanCountedElement;      
    { 220  }
      Tcl_SeekOld = tclStubsPtr^.tcl_SeekOld;      
    { 221  }
      Tcl_ServiceAll = tclStubsPtr^.tcl_ServiceAll;      
    { 222  }
      Tcl_ServiceEvent = tclStubsPtr^.tcl_ServiceEvent;      
    { 223  }
      Tcl_SetAssocData = tclStubsPtr^.tcl_SetAssocData;      
    { 224  }
      Tcl_SetChannelBufferSize = tclStubsPtr^.tcl_SetChannelBufferSize;      
    { 225  }
      Tcl_SetChannelOption = tclStubsPtr^.tcl_SetChannelOption;      
    { 226  }
      Tcl_SetCommandInfo = tclStubsPtr^.tcl_SetCommandInfo;      
    { 227  }
      Tcl_SetErrno = tclStubsPtr^.tcl_SetErrno;      
    { 228  }
      Tcl_SetErrorCode = tclStubsPtr^.tcl_SetErrorCode;      
    { 229  }
      Tcl_SetMaxBlockTime = tclStubsPtr^.tcl_SetMaxBlockTime;      
    { 230  }
      Tcl_SetPanicProc = tclStubsPtr^.tcl_SetPanicProc;      
    { 231  }
      Tcl_SetRecursionLimit = tclStubsPtr^.tcl_SetRecursionLimit;      
    { 232  }
      Tcl_SetResult = tclStubsPtr^.tcl_SetResult;      
    { 233  }
      Tcl_SetServiceMode = tclStubsPtr^.tcl_SetServiceMode;      
    { 234  }
      Tcl_SetObjErrorCode = tclStubsPtr^.tcl_SetObjErrorCode;      
    { 235  }
      Tcl_SetObjResult = tclStubsPtr^.tcl_SetObjResult;      
    { 236  }
      Tcl_SetStdChannel = tclStubsPtr^.tcl_SetStdChannel;      
    { 237  }
      Tcl_SetVar = tclStubsPtr^.tcl_SetVar;      
    { 238  }
      Tcl_SetVar2 = tclStubsPtr^.tcl_SetVar2;      
    { 239  }
      Tcl_SignalId = tclStubsPtr^.tcl_SignalId;      
    { 240  }
      Tcl_SignalMsg = tclStubsPtr^.tcl_SignalMsg;      
    { 241  }
      Tcl_SourceRCFile = tclStubsPtr^.tcl_SourceRCFile;      
    { 242  }
      Tcl_SplitList = tclStubsPtr^.tcl_SplitList;      
    { 243  }
      Tcl_SplitPath = tclStubsPtr^.tcl_SplitPath;      
    { 244  }
      Tcl_StaticPackage = tclStubsPtr^.tcl_StaticPackage;      
    { 245  }
      Tcl_StringMatch = tclStubsPtr^.tcl_StringMatch;      
    { 246  }
      Tcl_TellOld = tclStubsPtr^.tcl_TellOld;      
    { 247  }
      Tcl_TraceVar = tclStubsPtr^.tcl_TraceVar;      
    { 248  }
      Tcl_TraceVar2 = tclStubsPtr^.tcl_TraceVar2;      
    { 249  }
      Tcl_TranslateFileName = tclStubsPtr^.tcl_TranslateFileName;      
    { 250  }
      Tcl_Ungets = tclStubsPtr^.tcl_Ungets;      
    { 251  }
      Tcl_UnlinkVar = tclStubsPtr^.tcl_UnlinkVar;      
    { 252  }
      Tcl_UnregisterChannel = tclStubsPtr^.tcl_UnregisterChannel;      
    { 253  }
      Tcl_UnsetVar = tclStubsPtr^.tcl_UnsetVar;      
    { 254  }
      Tcl_UnsetVar2 = tclStubsPtr^.tcl_UnsetVar2;      
    { 255  }
      Tcl_UntraceVar = tclStubsPtr^.tcl_UntraceVar;      
    { 256  }
      Tcl_UntraceVar2 = tclStubsPtr^.tcl_UntraceVar2;      
    { 257  }
      Tcl_UpdateLinkedVar = tclStubsPtr^.tcl_UpdateLinkedVar;      
    { 258  }
      Tcl_UpVar = tclStubsPtr^.tcl_UpVar;      
    { 259  }
      Tcl_UpVar2 = tclStubsPtr^.tcl_UpVar2;      
    { 260  }
      Tcl_VarEval = tclStubsPtr^.tcl_VarEval;      
    { 261  }
      Tcl_VarTraceInfo = tclStubsPtr^.tcl_VarTraceInfo;      
    { 262  }
      Tcl_VarTraceInfo2 = tclStubsPtr^.tcl_VarTraceInfo2;      
    { 263  }
      Tcl_Write = tclStubsPtr^.tcl_Write;      
    { 264  }
      Tcl_WrongNumArgs = tclStubsPtr^.tcl_WrongNumArgs;      
    { 265  }
      Tcl_DumpActiveMemory = tclStubsPtr^.tcl_DumpActiveMemory;      
    { 266  }
      Tcl_ValidateAllMemory = tclStubsPtr^.tcl_ValidateAllMemory;      
    { 267  }
      Tcl_AppendResultVA = tclStubsPtr^.tcl_AppendResultVA;      
    { 268  }
      Tcl_AppendStringsToObjVA = tclStubsPtr^.tcl_AppendStringsToObjVA;      
    { 269  }
      Tcl_HashStats = tclStubsPtr^.tcl_HashStats;      
    { 270  }
      Tcl_ParseVar = tclStubsPtr^.tcl_ParseVar;      
    { 271  }
      Tcl_PkgPresent = tclStubsPtr^.tcl_PkgPresent;      
    { 272  }
      Tcl_PkgPresentEx = tclStubsPtr^.tcl_PkgPresentEx;      
    { 273  }
      Tcl_PkgProvide = tclStubsPtr^.tcl_PkgProvide;      
    { 274  }
      Tcl_PkgRequire = tclStubsPtr^.tcl_PkgRequire;      
    { 275  }
      Tcl_SetErrorCodeVA = tclStubsPtr^.tcl_SetErrorCodeVA;      
    { 276  }
      Tcl_VarEvalVA = tclStubsPtr^.tcl_VarEvalVA;      
    { 277  }
      Tcl_WaitPid = tclStubsPtr^.tcl_WaitPid;      
    { 278  }
      Tcl_PanicVA = tclStubsPtr^.tcl_PanicVA;      
    { 279  }
      Tcl_GetVersion = tclStubsPtr^.tcl_GetVersion;      
    { 280  }
      Tcl_InitMemory = tclStubsPtr^.tcl_InitMemory;      
    { 281  }
      Tcl_StackChannel = tclStubsPtr^.tcl_StackChannel;      
    { 282  }
      Tcl_UnstackChannel = tclStubsPtr^.tcl_UnstackChannel;      
    { 283  }
      Tcl_GetStackedChannel = tclStubsPtr^.tcl_GetStackedChannel;      
    { 284  }
      Tcl_SetMainLoop = tclStubsPtr^.tcl_SetMainLoop;      
    { Slot 285 is reserved  }
    { 286  }
      Tcl_AppendObjToObj = tclStubsPtr^.tcl_AppendObjToObj;      
    { 287  }
      Tcl_CreateEncoding = tclStubsPtr^.tcl_CreateEncoding;      
    { 288  }
      Tcl_CreateThreadExitHandler = tclStubsPtr^.tcl_CreateThreadExitHandler;      
    { 289  }
      Tcl_DeleteThreadExitHandler = tclStubsPtr^.tcl_DeleteThreadExitHandler;      
    { 290  }
      Tcl_DiscardResult = tclStubsPtr^.tcl_DiscardResult;      
    { 291  }
      Tcl_EvalEx = tclStubsPtr^.tcl_EvalEx;      
    { 292  }
      Tcl_EvalObjv = tclStubsPtr^.tcl_EvalObjv;      
    { 293  }
      Tcl_EvalObjEx = tclStubsPtr^.tcl_EvalObjEx;      
    { 294  }
      Tcl_ExitThread = tclStubsPtr^.tcl_ExitThread;      
    { 295  }
      Tcl_ExternalToUtf = tclStubsPtr^.tcl_ExternalToUtf;      
    { 296  }
      Tcl_ExternalToUtfDString = tclStubsPtr^.tcl_ExternalToUtfDString;      
    { 297  }
      Tcl_FinalizeThread = tclStubsPtr^.tcl_FinalizeThread;      
    { 298  }
      Tcl_FinalizeNotifier = tclStubsPtr^.tcl_FinalizeNotifier;      
    { 299  }
      Tcl_FreeEncoding = tclStubsPtr^.tcl_FreeEncoding;      
    { 300  }
      Tcl_GetCurrentThread = tclStubsPtr^.tcl_GetCurrentThread;      
    { 301  }
      Tcl_GetEncoding = tclStubsPtr^.tcl_GetEncoding;      
    { 302  }
      Tcl_GetEncodingName = tclStubsPtr^.tcl_GetEncodingName;      
    { 303  }
      Tcl_GetEncodingNames = tclStubsPtr^.tcl_GetEncodingNames;      
    { 304  }
      Tcl_GetIndexFromObjStruct = tclStubsPtr^.tcl_GetIndexFromObjStruct;      
    { 305  }
      Tcl_GetThreadData = tclStubsPtr^.tcl_GetThreadData;      
    { 306  }
      Tcl_GetVar2Ex = tclStubsPtr^.tcl_GetVar2Ex;      
    { 307  }
      Tcl_InitNotifier = tclStubsPtr^.tcl_InitNotifier;      
    { 308  }
      Tcl_MutexLock = tclStubsPtr^.tcl_MutexLock;      
    { 309  }
      Tcl_MutexUnlock = tclStubsPtr^.tcl_MutexUnlock;      
    { 310  }
      Tcl_ConditionNotify = tclStubsPtr^.tcl_ConditionNotify;      
    { 311  }
      Tcl_ConditionWait = tclStubsPtr^.tcl_ConditionWait;      
    { 312  }
      Tcl_NumUtfChars = tclStubsPtr^.tcl_NumUtfChars;      
    { 313  }
      Tcl_ReadChars = tclStubsPtr^.tcl_ReadChars;      
    { 314  }
      Tcl_RestoreResult = tclStubsPtr^.tcl_RestoreResult;      
    { 315  }
      Tcl_SaveResult = tclStubsPtr^.tcl_SaveResult;      
    { 316  }
      Tcl_SetSystemEncoding = tclStubsPtr^.tcl_SetSystemEncoding;      
    { 317  }
      Tcl_SetVar2Ex = tclStubsPtr^.tcl_SetVar2Ex;      
    { 318  }
      Tcl_ThreadAlert = tclStubsPtr^.tcl_ThreadAlert;      
    { 319  }
      Tcl_ThreadQueueEvent = tclStubsPtr^.tcl_ThreadQueueEvent;      
    { 320  }
      Tcl_UniCharAtIndex = tclStubsPtr^.tcl_UniCharAtIndex;      
    { 321  }
      Tcl_UniCharToLower = tclStubsPtr^.tcl_UniCharToLower;      
    { 322  }
      Tcl_UniCharToTitle = tclStubsPtr^.tcl_UniCharToTitle;      
    { 323  }
      Tcl_UniCharToUpper = tclStubsPtr^.tcl_UniCharToUpper;      
    { 324  }
      Tcl_UniCharToUtf = tclStubsPtr^.tcl_UniCharToUtf;      
    { 325  }
      Tcl_UtfAtIndex = tclStubsPtr^.tcl_UtfAtIndex;      
    { 326  }
      Tcl_UtfCharComplete = tclStubsPtr^.tcl_UtfCharComplete;      
    { 327  }
      Tcl_UtfBackslash = tclStubsPtr^.tcl_UtfBackslash;      
    { 328  }
      Tcl_UtfFindFirst = tclStubsPtr^.tcl_UtfFindFirst;      
    { 329  }
      Tcl_UtfFindLast = tclStubsPtr^.tcl_UtfFindLast;      
    { 330  }
      Tcl_UtfNext = tclStubsPtr^.tcl_UtfNext;      
    { 331  }
      Tcl_UtfPrev = tclStubsPtr^.tcl_UtfPrev;      
    { 332  }
      Tcl_UtfToExternal = tclStubsPtr^.tcl_UtfToExternal;      
    { 333  }
      Tcl_UtfToExternalDString = tclStubsPtr^.tcl_UtfToExternalDString;      
    { 334  }
      Tcl_UtfToLower = tclStubsPtr^.tcl_UtfToLower;      
    { 335  }
      Tcl_UtfToTitle = tclStubsPtr^.tcl_UtfToTitle;      
    { 336  }
      Tcl_UtfToUniChar = tclStubsPtr^.tcl_UtfToUniChar;      
    { 337  }
      Tcl_UtfToUpper = tclStubsPtr^.tcl_UtfToUpper;      
    { 338  }
      Tcl_WriteChars = tclStubsPtr^.tcl_WriteChars;      
    { 339  }
      Tcl_WriteObj = tclStubsPtr^.tcl_WriteObj;      
    { 340  }
      Tcl_GetString = tclStubsPtr^.tcl_GetString;      
    { 341  }
      Tcl_GetDefaultEncodingDir = tclStubsPtr^.tcl_GetDefaultEncodingDir;      
    { 342  }
      Tcl_SetDefaultEncodingDir = tclStubsPtr^.tcl_SetDefaultEncodingDir;      
    { 343  }
      Tcl_AlertNotifier = tclStubsPtr^.tcl_AlertNotifier;      
    { 344  }
      Tcl_ServiceModeHook = tclStubsPtr^.tcl_ServiceModeHook;      
    { 345  }
      Tcl_UniCharIsAlnum = tclStubsPtr^.tcl_UniCharIsAlnum;      
    { 346  }
      Tcl_UniCharIsAlpha = tclStubsPtr^.tcl_UniCharIsAlpha;      
    { 347  }
      Tcl_UniCharIsDigit = tclStubsPtr^.tcl_UniCharIsDigit;      
    { 348  }
      Tcl_UniCharIsLower = tclStubsPtr^.tcl_UniCharIsLower;      
    { 349  }
      Tcl_UniCharIsSpace = tclStubsPtr^.tcl_UniCharIsSpace;      
    { 350  }
      Tcl_UniCharIsUpper = tclStubsPtr^.tcl_UniCharIsUpper;      
    { 351  }
      Tcl_UniCharIsWordChar = tclStubsPtr^.tcl_UniCharIsWordChar;      
    { 352  }
      Tcl_UniCharLen = tclStubsPtr^.tcl_UniCharLen;      
    { 353  }
      Tcl_UniCharNcmp = tclStubsPtr^.tcl_UniCharNcmp;      
    { 354  }
      Tcl_UniCharToUtfDString = tclStubsPtr^.tcl_UniCharToUtfDString;      
    { 355  }
      Tcl_UtfToUniCharDString = tclStubsPtr^.tcl_UtfToUniCharDString;      
    { 356  }
      Tcl_GetRegExpFromObj = tclStubsPtr^.tcl_GetRegExpFromObj;      
    { 357  }
      Tcl_EvalTokens = tclStubsPtr^.tcl_EvalTokens;      
    { 358  }
      Tcl_FreeParse = tclStubsPtr^.tcl_FreeParse;      
    { 359  }
      Tcl_LogCommandInfo = tclStubsPtr^.tcl_LogCommandInfo;      
    { 360  }
      Tcl_ParseBraces = tclStubsPtr^.tcl_ParseBraces;      
    { 361  }
      Tcl_ParseCommand = tclStubsPtr^.tcl_ParseCommand;      
    { 362  }
      Tcl_ParseExpr = tclStubsPtr^.tcl_ParseExpr;      
    { 363  }
      Tcl_ParseQuotedString = tclStubsPtr^.tcl_ParseQuotedString;      
    { 364  }
      Tcl_ParseVarName = tclStubsPtr^.tcl_ParseVarName;      
    { 365  }
      Tcl_GetCwd = tclStubsPtr^.tcl_GetCwd;      
    { 366  }
      Tcl_Chdir = tclStubsPtr^.tcl_Chdir;      
    { 367  }
      Tcl_Access = tclStubsPtr^.tcl_Access;      
    { 368  }
      Tcl_Stat = tclStubsPtr^.tcl_Stat;      
    { 369  }
      Tcl_UtfNcmp = tclStubsPtr^.tcl_UtfNcmp;      
    { 370  }
      Tcl_UtfNcasecmp = tclStubsPtr^.tcl_UtfNcasecmp;      
    { 371  }
      Tcl_StringCaseMatch = tclStubsPtr^.tcl_StringCaseMatch;      
    { 372  }
      Tcl_UniCharIsControl = tclStubsPtr^.tcl_UniCharIsControl;      
    { 373  }
      Tcl_UniCharIsGraph = tclStubsPtr^.tcl_UniCharIsGraph;      
    { 374  }
      Tcl_UniCharIsPrint = tclStubsPtr^.tcl_UniCharIsPrint;      
    { 375  }
      Tcl_UniCharIsPunct = tclStubsPtr^.tcl_UniCharIsPunct;      
    { 376  }
      Tcl_RegExpExecObj = tclStubsPtr^.tcl_RegExpExecObj;      
    { 377  }
      Tcl_RegExpGetInfo = tclStubsPtr^.tcl_RegExpGetInfo;      
    { 378  }
      Tcl_NewUnicodeObj = tclStubsPtr^.tcl_NewUnicodeObj;      
    { 379  }
      Tcl_SetUnicodeObj = tclStubsPtr^.tcl_SetUnicodeObj;      
    { 380  }
      Tcl_GetCharLength = tclStubsPtr^.tcl_GetCharLength;      
    { 381  }
      Tcl_GetUniChar = tclStubsPtr^.tcl_GetUniChar;      
    { 382  }
      Tcl_GetUnicode = tclStubsPtr^.tcl_GetUnicode;      
    { 383  }
      Tcl_GetRange = tclStubsPtr^.tcl_GetRange;      
    { 384  }
      Tcl_AppendUnicodeToObj = tclStubsPtr^.tcl_AppendUnicodeToObj;      
    { 385  }
      Tcl_RegExpMatchObj = tclStubsPtr^.tcl_RegExpMatchObj;      
    { 386  }
      Tcl_SetNotifier = tclStubsPtr^.tcl_SetNotifier;      
    { 387  }
      Tcl_GetAllocMutex = tclStubsPtr^.tcl_GetAllocMutex;      
    { 388  }
      Tcl_GetChannelNames = tclStubsPtr^.tcl_GetChannelNames;      
    { 389  }
      Tcl_GetChannelNamesEx = tclStubsPtr^.tcl_GetChannelNamesEx;      
    { 390  }
      Tcl_ProcObjCmd = tclStubsPtr^.tcl_ProcObjCmd;      
    { 391  }
      Tcl_ConditionFinalize = tclStubsPtr^.tcl_ConditionFinalize;      
    { 392  }
      Tcl_MutexFinalize = tclStubsPtr^.tcl_MutexFinalize;      
    { 393  }
      Tcl_CreateThread = tclStubsPtr^.tcl_CreateThread;      
    { 394  }
      Tcl_ReadRaw = tclStubsPtr^.tcl_ReadRaw;      
    { 395  }
      Tcl_WriteRaw = tclStubsPtr^.tcl_WriteRaw;      
    { 396  }
      Tcl_GetTopChannel = tclStubsPtr^.tcl_GetTopChannel;      
    { 397  }
      Tcl_ChannelBuffered = tclStubsPtr^.tcl_ChannelBuffered;      
    { 398  }
      Tcl_ChannelName = tclStubsPtr^.tcl_ChannelName;      
    { 399  }
      Tcl_ChannelVersion = tclStubsPtr^.tcl_ChannelVersion;      
    { 400  }
      Tcl_ChannelBlockModeProc = tclStubsPtr^.tcl_ChannelBlockModeProc;      
    { 401  }
      Tcl_ChannelCloseProc = tclStubsPtr^.tcl_ChannelCloseProc;      
    { 402  }
      Tcl_ChannelClose2Proc = tclStubsPtr^.tcl_ChannelClose2Proc;      
    { 403  }
      Tcl_ChannelInputProc = tclStubsPtr^.tcl_ChannelInputProc;      
    { 404  }
      Tcl_ChannelOutputProc = tclStubsPtr^.tcl_ChannelOutputProc;      
    { 405  }
      Tcl_ChannelSeekProc = tclStubsPtr^.tcl_ChannelSeekProc;      
    { 406  }
      Tcl_ChannelSetOptionProc = tclStubsPtr^.tcl_ChannelSetOptionProc;      
    { 407  }
      Tcl_ChannelGetOptionProc = tclStubsPtr^.tcl_ChannelGetOptionProc;      
    { 408  }
      Tcl_ChannelWatchProc = tclStubsPtr^.tcl_ChannelWatchProc;      
    { 409  }
      Tcl_ChannelGetHandleProc = tclStubsPtr^.tcl_ChannelGetHandleProc;      
    { 410  }
      Tcl_ChannelFlushProc = tclStubsPtr^.tcl_ChannelFlushProc;      
    { 411  }
      Tcl_ChannelHandlerProc = tclStubsPtr^.tcl_ChannelHandlerProc;      
    { 412  }
      Tcl_JoinThread = tclStubsPtr^.tcl_JoinThread;      
    { 413  }
      Tcl_IsChannelShared = tclStubsPtr^.tcl_IsChannelShared;      
    { 414  }
      Tcl_IsChannelRegistered = tclStubsPtr^.tcl_IsChannelRegistered;      
    { 415  }
      Tcl_CutChannel = tclStubsPtr^.tcl_CutChannel;      
    { 416  }
      Tcl_SpliceChannel = tclStubsPtr^.tcl_SpliceChannel;      
    { 417  }
      Tcl_ClearChannelHandlers = tclStubsPtr^.tcl_ClearChannelHandlers;      
    { 418  }
      Tcl_IsChannelExisting = tclStubsPtr^.tcl_IsChannelExisting;      
    { 419  }
      Tcl_UniCharNcasecmp = tclStubsPtr^.tcl_UniCharNcasecmp;      
    { 420  }
      Tcl_UniCharCaseMatch = tclStubsPtr^.tcl_UniCharCaseMatch;      
    { 421  }
      Tcl_FindHashEntry = tclStubsPtr^.tcl_FindHashEntry;      
    { 422  }
      Tcl_CreateHashEntry = tclStubsPtr^.tcl_CreateHashEntry;      
    { 423  }
      Tcl_InitCustomHashTable = tclStubsPtr^.tcl_InitCustomHashTable;      
    { 424  }
      Tcl_InitObjHashTable = tclStubsPtr^.tcl_InitObjHashTable;      
    { 425  }
      Tcl_CommandTraceInfo = tclStubsPtr^.tcl_CommandTraceInfo;      
    { 426  }
      Tcl_TraceCommand = tclStubsPtr^.tcl_TraceCommand;      
    { 427  }
      Tcl_UntraceCommand = tclStubsPtr^.tcl_UntraceCommand;      
    { 428  }
      Tcl_AttemptAlloc = tclStubsPtr^.tcl_AttemptAlloc;      
    { 429  }
      Tcl_AttemptDbCkalloc = tclStubsPtr^.tcl_AttemptDbCkalloc;      
    { 430  }
      Tcl_AttemptRealloc = tclStubsPtr^.tcl_AttemptRealloc;      
    { 431  }
      Tcl_AttemptDbCkrealloc = tclStubsPtr^.tcl_AttemptDbCkrealloc;      
    { 432  }
      Tcl_AttemptSetObjLength = tclStubsPtr^.tcl_AttemptSetObjLength;      
    { 433  }
      Tcl_GetChannelThread = tclStubsPtr^.tcl_GetChannelThread;      
    { 434  }
      Tcl_GetUnicodeFromObj = tclStubsPtr^.tcl_GetUnicodeFromObj;      
    { 435  }
      Tcl_GetMathFuncInfo = tclStubsPtr^.tcl_GetMathFuncInfo;      
    { 436  }
      Tcl_ListMathFuncs = tclStubsPtr^.tcl_ListMathFuncs;      
    { 437  }
      Tcl_SubstObj = tclStubsPtr^.tcl_SubstObj;      
    { 438  }
      Tcl_DetachChannel = tclStubsPtr^.tcl_DetachChannel;      
    { 439  }
      Tcl_IsStandardChannel = tclStubsPtr^.tcl_IsStandardChannel;      
    { 440  }
      Tcl_FSCopyFile = tclStubsPtr^.tcl_FSCopyFile;      
    { 441  }
      Tcl_FSCopyDirectory = tclStubsPtr^.tcl_FSCopyDirectory;      
    { 442  }
      Tcl_FSCreateDirectory = tclStubsPtr^.tcl_FSCreateDirectory;      
    { 443  }
      Tcl_FSDeleteFile = tclStubsPtr^.tcl_FSDeleteFile;      
    { 444  }
      Tcl_FSLoadFile = tclStubsPtr^.tcl_FSLoadFile;      
    { 445  }
      Tcl_FSMatchInDirectory = tclStubsPtr^.tcl_FSMatchInDirectory;      
    { 446  }
      Tcl_FSLink = tclStubsPtr^.tcl_FSLink;      
    { 447  }
      Tcl_FSRemoveDirectory = tclStubsPtr^.tcl_FSRemoveDirectory;      
    { 448  }
      Tcl_FSRenameFile = tclStubsPtr^.tcl_FSRenameFile;      
    { 449  }
      Tcl_FSLstat = tclStubsPtr^.tcl_FSLstat;      
    { 450  }
      Tcl_FSUtime = tclStubsPtr^.tcl_FSUtime;      
    { 451  }
      Tcl_FSFileAttrsGet = tclStubsPtr^.tcl_FSFileAttrsGet;      
    { 452  }
      Tcl_FSFileAttrsSet = tclStubsPtr^.tcl_FSFileAttrsSet;      
    { 453  }
      Tcl_FSFileAttrStrings = tclStubsPtr^.tcl_FSFileAttrStrings;      
    { 454  }
      Tcl_FSStat = tclStubsPtr^.tcl_FSStat;      
    { 455  }
      Tcl_FSAccess = tclStubsPtr^.tcl_FSAccess;      
    { 456  }
      Tcl_FSOpenFileChannel = tclStubsPtr^.tcl_FSOpenFileChannel;      
    { 457  }
      Tcl_FSGetCwd = tclStubsPtr^.tcl_FSGetCwd;      
    { 458  }
      Tcl_FSChdir = tclStubsPtr^.tcl_FSChdir;      
    { 459  }
      Tcl_FSConvertToPathType = tclStubsPtr^.tcl_FSConvertToPathType;      
    { 460  }
      Tcl_FSJoinPath = tclStubsPtr^.tcl_FSJoinPath;      
    { 461  }
      Tcl_FSSplitPath = tclStubsPtr^.tcl_FSSplitPath;      
    { 462  }
      Tcl_FSEqualPaths = tclStubsPtr^.tcl_FSEqualPaths;      
    { 463  }
      Tcl_FSGetNormalizedPath = tclStubsPtr^.tcl_FSGetNormalizedPath;      
    { 464  }
      Tcl_FSJoinToPath = tclStubsPtr^.tcl_FSJoinToPath;      
    { 465  }
      Tcl_FSGetInternalRep = tclStubsPtr^.tcl_FSGetInternalRep;      
    { 466  }
      Tcl_FSGetTranslatedPath = tclStubsPtr^.tcl_FSGetTranslatedPath;      
    { 467  }
      Tcl_FSEvalFile = tclStubsPtr^.tcl_FSEvalFile;      
    { 468  }
      Tcl_FSNewNativePath = tclStubsPtr^.tcl_FSNewNativePath;      
    { 469  }
      Tcl_FSGetNativePath = tclStubsPtr^.tcl_FSGetNativePath;      
    { 470  }
      Tcl_FSFileSystemInfo = tclStubsPtr^.tcl_FSFileSystemInfo;      
    { 471  }
      Tcl_FSPathSeparator = tclStubsPtr^.tcl_FSPathSeparator;      
    { 472  }
      Tcl_FSListVolumes = tclStubsPtr^.tcl_FSListVolumes;      
    { 473  }
      Tcl_FSRegister = tclStubsPtr^.tcl_FSRegister;      
    { 474  }
      Tcl_FSUnregister = tclStubsPtr^.tcl_FSUnregister;      
    { 475  }
      Tcl_FSData = tclStubsPtr^.tcl_FSData;      
    { 476  }
      Tcl_FSGetTranslatedStringPath = tclStubsPtr^.tcl_FSGetTranslatedStringPath;      
    { 477  }
      Tcl_FSGetFileSystemForPath = tclStubsPtr^.tcl_FSGetFileSystemForPath;      
    { 478  }
      Tcl_FSGetPathType = tclStubsPtr^.tcl_FSGetPathType;      
    { 479  }
      Tcl_OutputBuffered = tclStubsPtr^.tcl_OutputBuffered;      
    { 480  }
      Tcl_FSMountsChanged = tclStubsPtr^.tcl_FSMountsChanged;      
    { 481  }
      Tcl_EvalTokensStandard = tclStubsPtr^.tcl_EvalTokensStandard;      
    { 482  }
      Tcl_GetTime = tclStubsPtr^.tcl_GetTime;      
    { 483  }
      Tcl_CreateObjTrace = tclStubsPtr^.tcl_CreateObjTrace;      
    { 484  }
      Tcl_GetCommandInfoFromToken = tclStubsPtr^.tcl_GetCommandInfoFromToken;      
    { 485  }
      Tcl_SetCommandInfoFromToken = tclStubsPtr^.tcl_SetCommandInfoFromToken;      
    { 486  }
      Tcl_DbNewWideIntObj = tclStubsPtr^.tcl_DbNewWideIntObj;      
    { 487  }
      Tcl_GetWideIntFromObj = tclStubsPtr^.tcl_GetWideIntFromObj;      
    { 488  }
      Tcl_NewWideIntObj = tclStubsPtr^.tcl_NewWideIntObj;      
    { 489  }
      Tcl_SetWideIntObj = tclStubsPtr^.tcl_SetWideIntObj;      
    { 490  }
      Tcl_AllocStatBuf = tclStubsPtr^.tcl_AllocStatBuf;      
    { 491  }
      Tcl_Seek = tclStubsPtr^.tcl_Seek;      
    { 492  }
      Tcl_Tell = tclStubsPtr^.tcl_Tell;      
    { 493  }
      Tcl_ChannelWideSeekProc = tclStubsPtr^.tcl_ChannelWideSeekProc;      
    { 494  }
      Tcl_DictObjPut = tclStubsPtr^.tcl_DictObjPut;      
    { 495  }
      Tcl_DictObjGet = tclStubsPtr^.tcl_DictObjGet;      
    { 496  }
      Tcl_DictObjRemove = tclStubsPtr^.tcl_DictObjRemove;      
    { 497  }
      Tcl_DictObjSize = tclStubsPtr^.tcl_DictObjSize;      
    { 498  }
      Tcl_DictObjFirst = tclStubsPtr^.tcl_DictObjFirst;      
    { 499  }
      Tcl_DictObjNext = tclStubsPtr^.tcl_DictObjNext;      
    { 500  }
      Tcl_DictObjDone = tclStubsPtr^.tcl_DictObjDone;      
    { 501  }
      Tcl_DictObjPutKeyList = tclStubsPtr^.tcl_DictObjPutKeyList;      
    { 502  }
      Tcl_DictObjRemoveKeyList = tclStubsPtr^.tcl_DictObjRemoveKeyList;      
    { 503  }
      Tcl_NewDictObj = tclStubsPtr^.tcl_NewDictObj;      
    { 504  }
      Tcl_DbNewDictObj = tclStubsPtr^.tcl_DbNewDictObj;      
    { 505  }
      Tcl_RegisterConfig = tclStubsPtr^.tcl_RegisterConfig;      
    { 506  }
      Tcl_CreateNamespace = tclStubsPtr^.tcl_CreateNamespace;      
    { 507  }
      Tcl_DeleteNamespace = tclStubsPtr^.tcl_DeleteNamespace;      
    { 508  }
      Tcl_AppendExportList = tclStubsPtr^.tcl_AppendExportList;      
    { 509  }
      Tcl_Export = tclStubsPtr^.tcl_Export;      
    { 510  }
      Tcl_Import = tclStubsPtr^.tcl_Import;      
    { 511  }
      Tcl_ForgetImport = tclStubsPtr^.tcl_ForgetImport;      
    { 512  }
      Tcl_GetCurrentNamespace = tclStubsPtr^.tcl_GetCurrentNamespace;      
    { 513  }
      Tcl_GetGlobalNamespace = tclStubsPtr^.tcl_GetGlobalNamespace;      
    { 514  }
      Tcl_FindNamespace = tclStubsPtr^.tcl_FindNamespace;      
    { 515  }
      Tcl_FindCommand = tclStubsPtr^.tcl_FindCommand;      
    { 516  }
      Tcl_GetCommandFromObj = tclStubsPtr^.tcl_GetCommandFromObj;      
    { 517  }
      Tcl_GetCommandFullName = tclStubsPtr^.tcl_GetCommandFullName;      
    { 518  }
      Tcl_FSEvalFileEx = tclStubsPtr^.tcl_FSEvalFileEx;      
    { 519  }
      Tcl_SetExitProc = tclStubsPtr^.tcl_SetExitProc;      
    { 520  }
      Tcl_LimitAddHandler = tclStubsPtr^.tcl_LimitAddHandler;      
    { 521  }
      Tcl_LimitRemoveHandler = tclStubsPtr^.tcl_LimitRemoveHandler;      
    { 522  }
      Tcl_LimitReady = tclStubsPtr^.tcl_LimitReady;      
    { 523  }
      Tcl_LimitCheck = tclStubsPtr^.tcl_LimitCheck;      
    { 524  }
      Tcl_LimitExceeded = tclStubsPtr^.tcl_LimitExceeded;      
    { 525  }
      Tcl_LimitSetCommands = tclStubsPtr^.tcl_LimitSetCommands;      
    { 526  }
      Tcl_LimitSetTime = tclStubsPtr^.tcl_LimitSetTime;      
    { 527  }
      Tcl_LimitSetGranularity = tclStubsPtr^.tcl_LimitSetGranularity;      
    { 528  }
      Tcl_LimitTypeEnabled = tclStubsPtr^.tcl_LimitTypeEnabled;      
    { 529  }
      Tcl_LimitTypeExceeded = tclStubsPtr^.tcl_LimitTypeExceeded;      
    { 530  }
      Tcl_LimitTypeSet = tclStubsPtr^.tcl_LimitTypeSet;      
    { 531  }
      Tcl_LimitTypeReset = tclStubsPtr^.tcl_LimitTypeReset;      
    { 532  }
      Tcl_LimitGetCommands = tclStubsPtr^.tcl_LimitGetCommands;      
    { 533  }
      Tcl_LimitGetTime = tclStubsPtr^.tcl_LimitGetTime;      
    { 534  }
      Tcl_LimitGetGranularity = tclStubsPtr^.tcl_LimitGetGranularity;      
    { 535  }
      Tcl_SaveInterpState = tclStubsPtr^.tcl_SaveInterpState;      
    { 536  }
      Tcl_RestoreInterpState = tclStubsPtr^.tcl_RestoreInterpState;      
    { 537  }
      Tcl_DiscardInterpState = tclStubsPtr^.tcl_DiscardInterpState;      
    { 538  }
      Tcl_SetReturnOptions = tclStubsPtr^.tcl_SetReturnOptions;      
    { 539  }
      Tcl_GetReturnOptions = tclStubsPtr^.tcl_GetReturnOptions;      
    { 540  }
      Tcl_IsEnsemble = tclStubsPtr^.tcl_IsEnsemble;      
    { 541  }
      Tcl_CreateEnsemble = tclStubsPtr^.tcl_CreateEnsemble;      
    { 542  }
      Tcl_FindEnsemble = tclStubsPtr^.tcl_FindEnsemble;      
    { 543  }
      Tcl_SetEnsembleSubcommandList = tclStubsPtr^.tcl_SetEnsembleSubcommandList;      
    { 544  }
      Tcl_SetEnsembleMappingDict = tclStubsPtr^.tcl_SetEnsembleMappingDict;      
    { 545  }
      Tcl_SetEnsembleUnknownHandler = tclStubsPtr^.tcl_SetEnsembleUnknownHandler;      
    { 546  }
      Tcl_SetEnsembleFlags = tclStubsPtr^.tcl_SetEnsembleFlags;      
    { 547  }
      Tcl_GetEnsembleSubcommandList = tclStubsPtr^.tcl_GetEnsembleSubcommandList;      
    { 548  }
      Tcl_GetEnsembleMappingDict = tclStubsPtr^.tcl_GetEnsembleMappingDict;      
    { 549  }
      Tcl_GetEnsembleUnknownHandler = tclStubsPtr^.tcl_GetEnsembleUnknownHandler;      
    { 550  }
      Tcl_GetEnsembleFlags = tclStubsPtr^.tcl_GetEnsembleFlags;      
    { 551  }
      Tcl_GetEnsembleNamespace = tclStubsPtr^.tcl_GetEnsembleNamespace;      
    { 552  }
      Tcl_SetTimeProc = tclStubsPtr^.tcl_SetTimeProc;      
    { 553  }
      Tcl_QueryTimeProc = tclStubsPtr^.tcl_QueryTimeProc;      
    { 554  }
      Tcl_ChannelThreadActionProc = tclStubsPtr^.tcl_ChannelThreadActionProc;      
    { 555  }
      Tcl_NewBignumObj = tclStubsPtr^.tcl_NewBignumObj;      
    { 556  }
      Tcl_DbNewBignumObj = tclStubsPtr^.tcl_DbNewBignumObj;      
    { 557  }
      Tcl_SetBignumObj = tclStubsPtr^.tcl_SetBignumObj;      
    { 558  }
      Tcl_GetBignumFromObj = tclStubsPtr^.tcl_GetBignumFromObj;      
    { 559  }
      Tcl_TakeBignumFromObj = tclStubsPtr^.tcl_TakeBignumFromObj;      
    { 560  }
      Tcl_TruncateChannel = tclStubsPtr^.tcl_TruncateChannel;      
    { 561  }
      Tcl_ChannelTruncateProc = tclStubsPtr^.tcl_ChannelTruncateProc;      
    { 562  }
      Tcl_SetChannelErrorInterp = tclStubsPtr^.tcl_SetChannelErrorInterp;      
    { 563  }
      Tcl_GetChannelErrorInterp = tclStubsPtr^.tcl_GetChannelErrorInterp;      
    { 564  }
      Tcl_SetChannelError = tclStubsPtr^.tcl_SetChannelError;      
    { 565  }
      Tcl_GetChannelError = tclStubsPtr^.tcl_GetChannelError;      
    { 566  }
      Tcl_InitBignumFromDouble = tclStubsPtr^.tcl_InitBignumFromDouble;      
    { 567  }
      Tcl_GetNamespaceUnknownHandler = tclStubsPtr^.tcl_GetNamespaceUnknownHandler;      
    { 568  }
      Tcl_SetNamespaceUnknownHandler = tclStubsPtr^.tcl_SetNamespaceUnknownHandler;      
    { 569  }
      Tcl_GetEncodingFromObj = tclStubsPtr^.tcl_GetEncodingFromObj;      
    { 570  }
      Tcl_GetEncodingSearchPath = tclStubsPtr^.tcl_GetEncodingSearchPath;      
    { 571  }
      Tcl_SetEncodingSearchPath = tclStubsPtr^.tcl_SetEncodingSearchPath;      
    { 572  }
      Tcl_GetEncodingNameFromEnvironment = tclStubsPtr^.tcl_GetEncodingNameFromEnvironment;      
    { 573  }
      Tcl_PkgRequireProc = tclStubsPtr^.tcl_PkgRequireProc;      
    { 574  }
      Tcl_AppendObjToErrorInfo = tclStubsPtr^.tcl_AppendObjToErrorInfo;      
    { 575  }
      Tcl_AppendLimitedToObj = tclStubsPtr^.tcl_AppendLimitedToObj;      
    { 576  }
      Tcl_Format = tclStubsPtr^.tcl_Format;      
    { 577  }
      Tcl_AppendFormatToObj = tclStubsPtr^.tcl_AppendFormatToObj;      
    { 578  }
      Tcl_ObjPrintf = tclStubsPtr^.tcl_ObjPrintf;      
    { 579  }
      Tcl_AppendPrintfToObj = tclStubsPtr^.tcl_AppendPrintfToObj;      
    { 580  }
      Tcl_CancelEval = tclStubsPtr^.tcl_CancelEval;      
    { 581  }
      Tcl_Canceled = tclStubsPtr^.tcl_Canceled;      
    { 582  }
      Tcl_CreatePipe = tclStubsPtr^.tcl_CreatePipe;      
    { 583  }
      Tcl_NRCreateCommand = tclStubsPtr^.tcl_NRCreateCommand;      
    { 584  }
      Tcl_NREvalObj = tclStubsPtr^.tcl_NREvalObj;      
    { 585  }
      Tcl_NREvalObjv = tclStubsPtr^.tcl_NREvalObjv;      
    { 586  }
      Tcl_NRCmdSwap = tclStubsPtr^.tcl_NRCmdSwap;      
    { 587  }
      Tcl_NRAddCallback = tclStubsPtr^.tcl_NRAddCallback;      
    { 588  }
      Tcl_NRCallObjProc = tclStubsPtr^.tcl_NRCallObjProc;      
    { 589  }
      Tcl_GetFSDeviceFromStat = tclStubsPtr^.tcl_GetFSDeviceFromStat;      
    { 590  }
      Tcl_GetFSInodeFromStat = tclStubsPtr^.tcl_GetFSInodeFromStat;      
    { 591  }
      Tcl_GetModeFromStat = tclStubsPtr^.tcl_GetModeFromStat;      
    { 592  }
      Tcl_GetLinkCountFromStat = tclStubsPtr^.tcl_GetLinkCountFromStat;      
    { 593  }
      Tcl_GetUserIdFromStat = tclStubsPtr^.tcl_GetUserIdFromStat;      
    { 594  }
      Tcl_GetGroupIdFromStat = tclStubsPtr^.tcl_GetGroupIdFromStat;      
    { 595  }
      Tcl_GetDeviceTypeFromStat = tclStubsPtr^.tcl_GetDeviceTypeFromStat;      
    { 596  }
      Tcl_GetAccessTimeFromStat = tclStubsPtr^.tcl_GetAccessTimeFromStat;      
    { 597  }
      Tcl_GetModificationTimeFromStat = tclStubsPtr^.tcl_GetModificationTimeFromStat;      
    { 598  }
      Tcl_GetChangeTimeFromStat = tclStubsPtr^.tcl_GetChangeTimeFromStat;      
    { 599  }
      Tcl_GetSizeFromStat = tclStubsPtr^.tcl_GetSizeFromStat;      
    { 600  }
      Tcl_GetBlocksFromStat = tclStubsPtr^.tcl_GetBlocksFromStat;      
    { 601  }
      Tcl_GetBlockSizeFromStat = tclStubsPtr^.tcl_GetBlockSizeFromStat;      
    { 602  }
      Tcl_SetEnsembleParameterList = tclStubsPtr^.tcl_SetEnsembleParameterList;      
    { 603  }
      Tcl_GetEnsembleParameterList = tclStubsPtr^.tcl_GetEnsembleParameterList;      
    { 604  }
      Tcl_ParseArgsObjv = tclStubsPtr^.tcl_ParseArgsObjv;      
    { 605  }
      Tcl_GetErrorLine = tclStubsPtr^.tcl_GetErrorLine;      
    { 606  }
      Tcl_SetErrorLine = tclStubsPtr^.tcl_SetErrorLine;      
    { 607  }
      Tcl_TransferResult = tclStubsPtr^.tcl_TransferResult;      
    { 608  }
      Tcl_InterpActive = tclStubsPtr^.tcl_InterpActive;      
    { 609  }
      Tcl_BackgroundException = tclStubsPtr^.tcl_BackgroundException;      
    { 610  }
      Tcl_ZlibDeflate = tclStubsPtr^.tcl_ZlibDeflate;      
    { 611  }
      Tcl_ZlibInflate = tclStubsPtr^.tcl_ZlibInflate;      
    { 612  }
      Tcl_ZlibCRC32 = tclStubsPtr^.tcl_ZlibCRC32;      
    { 613  }
      Tcl_ZlibAdler32 = tclStubsPtr^.tcl_ZlibAdler32;      
    { 614  }
      Tcl_ZlibStreamInit = tclStubsPtr^.tcl_ZlibStreamInit;      
    { 615  }
      Tcl_ZlibStreamGetCommandName = tclStubsPtr^.tcl_ZlibStreamGetCommandName;      
    { 616  }
      Tcl_ZlibStreamEof = tclStubsPtr^.tcl_ZlibStreamEof;      
    { 617  }
      Tcl_ZlibStreamChecksum = tclStubsPtr^.tcl_ZlibStreamChecksum;      
    { 618  }
      Tcl_ZlibStreamPut = tclStubsPtr^.tcl_ZlibStreamPut;      
    { 619  }
      Tcl_ZlibStreamGet = tclStubsPtr^.tcl_ZlibStreamGet;      
    { 620  }
      Tcl_ZlibStreamClose = tclStubsPtr^.tcl_ZlibStreamClose;      
    { 621  }
      Tcl_ZlibStreamReset = tclStubsPtr^.tcl_ZlibStreamReset;      
    { 622  }
      Tcl_SetStartupScript = tclStubsPtr^.tcl_SetStartupScript;      
    { 623  }
      Tcl_GetStartupScript = tclStubsPtr^.tcl_GetStartupScript;      
    { 624  }
      Tcl_CloseEx = tclStubsPtr^.tcl_CloseEx;      
    { 625  }
      Tcl_NRExprObj = tclStubsPtr^.tcl_NRExprObj;      
    { 626  }
      Tcl_NRSubstObj = tclStubsPtr^.tcl_NRSubstObj;      
    { 627  }
      Tcl_LoadFile = tclStubsPtr^.tcl_LoadFile;      
    { 628  }
      Tcl_FindSymbol = tclStubsPtr^.tcl_FindSymbol;      
    { 629  }
      Tcl_FSUnloadFile = tclStubsPtr^.tcl_FSUnloadFile;      
    { 630  }
      Tcl_ZlibStreamSetCompressionDictionary = tclStubsPtr^.tcl_ZlibStreamSetCompressionDictionary;      
{$endif}
    { defined(USE_TCL_STUBS)  }
    { !END!: Do not edit above this line.  }
{$if defined(USE_TCL_STUBS)}
{$undef Tcl_CreateInterp}
{$undef Tcl_FindExecutable}
{$undef Tcl_GetStringResult}
{$undef Tcl_Init}
{$undef Tcl_SetPanicProc}
{$undef Tcl_SetVar}
{$undef Tcl_ObjSetVar2}
{$undef Tcl_StaticPackage}
{$undef TclFSGetNativePath}
    { was #define dname(params) para_def_expr }
    { return type might be wrong }   

    function Tcl_CreateInterp : longint;    

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_GetStringResult(interp : longint) : longint;  

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_Init(interp : longint) : longint;  

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_SetPanicProc(proc : longint) : longint;  

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_SetVar(interp,varName,newValue,flags : longint) : longint;  

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_ObjSetVar2(interp,part1,part2,newValue,flags : longint) : longint;  

{$endif}
{$if defined(_WIN32) && defined(UNICODE)}
(* Const before type ignored *)
  { was #define dname(params) para_def_expr }
  { argument types are unknown }

  function Tcl_FindExecutable(arg : longint) : Tcl_FindExecutable;  

  const
    Tcl_MainEx = Tcl_MainExW;    
(* error 
    EXTERN void Tcl_MainExW(int argc, wchar_t **argv,
in declaration at line 3806 *)
{$endif}
{$undef TCL_STORAGE_CLASS}

    const
      TCL_STORAGE_CLASS = DLLIMPORT;      
{$undef Tcl_SeekOld}
{$undef Tcl_TellOld}
{$undef Tcl_PkgPresent}
    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   

    function Tcl_PkgPresent(interp,name,version,exact : longint) : longint;    

{$undef Tcl_PkgProvide}
  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_PkgProvide(interp,name,version : longint) : longint;  

{$undef Tcl_PkgRequire}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_PkgRequire(interp,name,version,exact : longint) : longint;

{$undef Tcl_GetIndexFromObj}
(* error 
	sizeof(char *), msg, flags, indexPtr)
in define line 3827 *)
{$undef Tcl_NewBooleanObj}
    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function Tcl_NewBooleanObj(boolValue : longint) : longint;    

{$undef Tcl_DbNewBooleanObj}
  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_DbNewBooleanObj(boolValue,file,line : longint) : longint;  

{$undef Tcl_SetBooleanObj}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_SetBooleanObj(objPtr,boolValue : longint) : longint;

{$undef Tcl_SetVar}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_SetVar(interp,varName,newValue,flags : longint) : longint;

{$undef Tcl_UnsetVar}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_UnsetVar(interp,varName,flags : longint) : longint;

{$undef Tcl_GetVar}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_GetVar(interp,varName,flags : longint) : longint;

{$undef Tcl_TraceVar}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_TraceVar(interp,varName,flags,proc,clientData : longint) : longint;

{$undef Tcl_UntraceVar}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_UntraceVar(interp,varName,flags,proc,clientData : longint) : longint;

{$undef Tcl_VarTraceInfo}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_VarTraceInfo(interp,varName,flags,proc,prevClientData : longint) : longint;

{$undef Tcl_UpVar}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_UpVar(interp,frameName,varName,localName,flags : longint) : longint;

{$if defined(USE_TCL_STUBS) && !defined(USE_TCL_STUB_PROCS)}
{$if defined(__CYGWIN__) && defined(TCL_WIDE_INT_IS_LONG)}
{ On Cygwin64, long is 64-bit while on Win64 long is 32-bit. Therefore
 * we have to make sure that all stub entries on Cygwin64 follow the
 * Win64 signature. Cygwin64 stubbed extensions cannot use those stub
 * entries any more, they should use the 64-bit alternatives where
 * possible. Tcl 9 must find a better solution, but that cannot be done
 * without introducing a binary incompatibility.
  }
{$undef Tcl_DbNewLongObj}
{$undef Tcl_GetLongFromObj}
{$undef Tcl_NewLongObj}
{$undef Tcl_SetLongObj}
{$undef Tcl_ExprLong}
{$undef Tcl_ExprLongObj}
{$undef Tcl_UniCharNcmp}
{$undef Tcl_UtfNcmp}
{$undef Tcl_UtfNcasecmp}
{$undef Tcl_UniCharNcasecmp}
(* error 
#	define Tcl_DbNewLongObj ((Tcl_Obj*(*)(long,const char*,int))Tcl_DbNewWideIntObj)
in define line 3878 *)
(* error 
#	define Tcl_GetLongFromObj ((int(*)(Tcl_Interp*,Tcl_Obj*,long*))Tcl_GetWideIntFromObj)
in define line 3879 *)
(* error 
#	define Tcl_NewLongObj ((Tcl_Obj*(*)(long))Tcl_NewWideIntObj)
in define line 3880 *)
(* error 
#	define Tcl_SetLongObj ((void(*)(Tcl_Obj*,long))Tcl_SetWideIntObj)
in define line 3881 *)

    const
      Tcl_ExprLong = TclExprLong;      
(* error 
	static inline int TclExprLong(Tcl_Interp *interp, const char *string, long *ptr){
(* error 
	static inline int TclExprLong(Tcl_Interp *interp, const char *string, long *ptr){
(* error 
	static inline int TclExprLong(Tcl_Interp *interp, const char *string, long *ptr){
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
(* error 
	    int intValue;
 in declarator_list *)
(* error 
	    int result = tclStubsPtr->tcl_ExprLong(interp, string, (long *)&intValue);
 in declarator_list *)
(* error 
	    int result = tclStubsPtr->tcl_ExprLong(interp, string, (long *)&intValue);
 in declarator_list *)
(* error 
	    if (result == TCL_OK) *ptr = (long)intValue;
 in declarator_list *)

      var
        result : return;cvar;public;
(* error 
	}
in define line 3889 *)
(* error 
	static inline int TclExprLongObj(Tcl_Interp *interp, Tcl_Obj *obj, long *ptr){
(* error 
	static inline int TclExprLongObj(Tcl_Interp *interp, Tcl_Obj *obj, long *ptr){
(* error 
	static inline int TclExprLongObj(Tcl_Interp *interp, Tcl_Obj *obj, long *ptr){
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
(* error 
	    int intValue;
 in declarator_list *)
(* error 
	    int result = tclStubsPtr->tcl_ExprLongObj(interp, obj, (long *)&intValue);
 in declarator_list *)
(* error 
	    int result = tclStubsPtr->tcl_ExprLongObj(interp, obj, (long *)&intValue);
 in declarator_list *)
(* error 
	    if (result == TCL_OK) *ptr = (long)intValue;
 in declarator_list *)
        result : return;cvar;public;
(* error 
	}
in define line 3897 *)
(* error 
		((int(*)(const char*,const char*,unsigned int))tclStubsPtr->tcl_UtfNcmp)(s1,s2,(unsigned int)(n))
in define line 3899 *)
(* error 
		((int(*)(const char*,const char*,unsigned int))tclStubsPtr->tcl_UtfNcasecmp)(s1,s2,(unsigned int)(n))
in define line 3901 *)
(* error 
		((int(*)(const Tcl_UniChar*,const Tcl_UniChar*,unsigned int))tclStubsPtr->tcl_UniCharNcasecmp)(ucs,uct,(unsigned int)(n))
in define line 3903 *)
{$endif}
{$endif}
    {
     * Deprecated Tcl procedures:
      }
{$undef Tcl_EvalObj}
    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   

    function Tcl_EvalObj(interp,objPtr : longint) : longint;    

{$undef Tcl_GlobalEvalObj}
  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_GlobalEvalObj(interp,objPtr : longint) : longint;  

{$endif}
{ _TCLDECLS  }

implementation

    { was #define dname(params) para_def_expr }
    { return type might be wrong }   
    function Tcl_CreateInterp : longint;
    begin
      Tcl_CreateInterp:=tclStubsPtr^.(tcl_CreateInterp);
    end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_GetStringResult(interp : longint) : longint;
  begin
    Tcl_GetStringResult:=tclStubsPtr^.(tcl_GetStringResult(interp));
  end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_Init(interp : longint) : longint;
  begin
    Tcl_Init:=tclStubsPtr^.(tcl_Init(interp));
  end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_SetPanicProc(proc : longint) : longint;
  begin
    Tcl_SetPanicProc:=tclStubsPtr^.(tcl_SetPanicProc(proc));
  end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_SetVar(interp,varName,newValue,flags : longint) : longint;
  begin
    Tcl_SetVar:=tclStubsPtr^.(tcl_SetVar(interp,varName,newValue,flags));
  end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_ObjSetVar2(interp,part1,part2,newValue,flags : longint) : longint;
  begin
    Tcl_ObjSetVar2:=tclStubsPtr^.(tcl_ObjSetVar2(interp,part1,part2,newValue,flags));
  end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  function Tcl_FindExecutable(arg : longint) : Tcl_FindExecutable;
  begin
    Tcl_FindExecutable:=Tcl_FindExecutable(pchar(arg));
  end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function Tcl_PkgPresent(interp,name,version,exact : longint) : longint;
    begin
      Tcl_PkgPresent:=Tcl_PkgPresentEx(interp,name,version,exact,NULL);
    end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_PkgProvide(interp,name,version : longint) : longint;
  begin
    Tcl_PkgProvide:=Tcl_PkgProvideEx(interp,name,version,NULL);
  end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_PkgRequire(interp,name,version,exact : longint) : longint;
begin
  Tcl_PkgRequire:=Tcl_PkgRequireEx(interp,name,version,exact,NULL);
end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function Tcl_NewBooleanObj(boolValue : longint) : longint;
    begin
      Tcl_NewBooleanObj:=Tcl_NewIntObj(boolValue<>0);
    end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_DbNewBooleanObj(boolValue,file,line : longint) : longint;
  begin
    Tcl_DbNewBooleanObj:=Tcl_DbNewLongObj(boolValue<>0,file,line);
  end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_SetBooleanObj(objPtr,boolValue : longint) : longint;
begin
  Tcl_SetBooleanObj:=Tcl_SetIntObj(objPtr,boolValue<>0);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_SetVar(interp,varName,newValue,flags : longint) : longint;
begin
  Tcl_SetVar:=Tcl_SetVar2(interp,varName,NULL,newValue,flags);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_UnsetVar(interp,varName,flags : longint) : longint;
begin
  Tcl_UnsetVar:=Tcl_UnsetVar2(interp,varName,NULL,flags);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_GetVar(interp,varName,flags : longint) : longint;
begin
  Tcl_GetVar:=Tcl_GetVar2(interp,varName,NULL,flags);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_TraceVar(interp,varName,flags,proc,clientData : longint) : longint;
begin
  Tcl_TraceVar:=Tcl_TraceVar2(interp,varName,NULL,flags,proc,clientData);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_UntraceVar(interp,varName,flags,proc,clientData : longint) : longint;
begin
  Tcl_UntraceVar:=Tcl_UntraceVar2(interp,varName,NULL,flags,proc,clientData);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_VarTraceInfo(interp,varName,flags,proc,prevClientData : longint) : longint;
begin
  Tcl_VarTraceInfo:=Tcl_VarTraceInfo2(interp,varName,NULL,flags,proc,prevClientData);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_UpVar(interp,frameName,varName,localName,flags : longint) : longint;
begin
  Tcl_UpVar:=Tcl_UpVar2(interp,frameName,varName,NULL,localName,flags);
end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function Tcl_EvalObj(interp,objPtr : longint) : longint;
    begin
      Tcl_EvalObj:=Tcl_EvalObjEx(interp,objPtr,0);
    end;

  { was #define dname(params) para_def_expr }
  { argument types are unknown }
  { return type might be wrong }   
  function Tcl_GlobalEvalObj(interp,objPtr : longint) : longint;
  begin
    Tcl_GlobalEvalObj:=Tcl_EvalObjEx(interp,objPtr,TCL_EVAL_GLOBAL);
  end;


end.
