TFPkgProvideEx = function(interp: PTcl_Interp; name: Pchar; version: Pchar; clientData: Pointer):cint; cdecl;
TFPkgRequireEx = function(interp: PTcl_Interp; name: Pchar; version: Pchar; exact: cint; clientDataPtr: Pointer):Pchar; cdecl;
TFPanic = procedure(format: Pchar); cdecl; varargs;
TFAlloc = function(size: longint):Pchar; cdecl;
TFFree = procedure(ptr: Pchar); cdecl;
TFRealloc = function(ptr: Pchar; size: longint):Pchar; cdecl;
TFDbCkalloc = function(size: longint; fileName: Pchar; line: cint):Pchar; cdecl;
TFDbCkfree = procedure(ptr: Pchar; fileName: Pchar; line: cint); cdecl;
TFDbCkrealloc = function(ptr: Pchar; size: longint; fileName: Pchar; line: cint):Pchar; cdecl;
TFCreateFileHandler = procedure(fd: cint; mask: cint; proc: PTcl_FileProc; clientData: ClientData); cdecl;
TFDeleteFileHandler = procedure(fd: cint); cdecl;
PTcl_Time = ^Tcl_Time;
TFSetTimer = procedure(timePtr: PTcl_Time); cdecl;
TFSleep = procedure(ms: cint); cdecl;
TFWaitForEvent = function(timePtr: PTcl_Time):cint; cdecl;
TFAppendAllObjTypes = function(interp: PTcl_Interp; objPtr: PTcl_Obj):cint; cdecl;
TFAppendStringsToObj = procedure(objPtr: PTcl_Obj); cdecl; varargs;
TFAppendToObj = procedure(objPtr: PTcl_Obj; bytes: Pchar; length: cint); cdecl;
TFConcatObj = function(objc: cint; objv: PPTcl_Obj):PTcl_Obj; cdecl;
PTcl_ObjType = ^Tcl_ObjType;
TFConvertToType = function(interp: PTcl_Interp; objPtr: PTcl_Obj; typePtr: PTcl_ObjType):cint; cdecl;
TFDbDecrRefCount = procedure(objPtr: PTcl_Obj; fileName: Pchar; line: cint); cdecl;
TFDbIncrRefCount = procedure(objPtr: PTcl_Obj; fileName: Pchar; line: cint); cdecl;
TFDbIsShared = function(objPtr: PTcl_Obj; fileName: Pchar; line: cint):cint; cdecl;
TFDbNewBooleanObj = function(boolValue: cint; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDbNewByteArrayObj = function(bytes: pcuchar; length: cint; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDbNewDoubleObj = function(doubleValue: double; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDbNewListObj = function(objc: cint; objv: PTcl_Obj; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDbNewLongObj = function(longValue: clong; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDbNewObj = function(fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDbNewStringObj = function(bytes: Pchar; length: cint; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFDuplicateObj = function(objPtr: PTcl_Obj):PTcl_Obj; cdecl;
TFTclFreeObj = procedure(objPtr: PTcl_Obj); cdecl;
TFGetBoolean = function(interp: PTcl_Interp; src: Pchar; boolPtr: pcint):cint; cdecl;
TFGetBooleanFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; boolPtr: pcint):cint; cdecl;
TFGetByteArrayFromObj = function(objPtr: PTcl_Obj; lengthPtr: pcint):pcuchar; cdecl;
TFGetDouble = function(interp: PTcl_Interp; src: Pchar; doublePtr: Pdouble):cint; cdecl;
TFGetDoubleFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; doublePtr: Pdouble):cint; cdecl;
TFGetIndexFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; tablePtr: PPChar; msg: Pchar; flags: cint; indexPtr: pcint):cint; cdecl;
TFGetInt = function(interp: PTcl_Interp; src: Pchar; intPtr: pcint):cint; cdecl;
TFGetIntFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; intPtr: pcint):cint; cdecl;
TFGetLongFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; longPtr: pclong):cint; cdecl;
TFGetObjType = function(typeName: Pchar):PTcl_ObjType; cdecl;
TFGetStringFromObj = function(objPtr: PTcl_Obj; lengthPtr: pcint):Pchar; cdecl;
TFInvalidateStringRep = procedure(objPtr: PTcl_Obj); cdecl;
TFListObjAppendList = function(interp: PTcl_Interp; listPtr: PTcl_Obj; elemListPtr: PTcl_Obj):cint; cdecl;
TFListObjAppendElement = function(interp: PTcl_Interp; listPtr: PTcl_Obj; objPtr: PTcl_Obj):cint; cdecl;
TFListObjGetElements = function(interp: PTcl_Interp; listPtr: PTcl_Obj; objcPtr: pcint; objvPtr: PTcl_Obj):cint; cdecl;
TFListObjIndex = function(interp: PTcl_Interp; listPtr: PTcl_Obj; index: cint; objPtrPtr: PTcl_Obj):cint; cdecl;
TFListObjLength = function(interp: PTcl_Interp; listPtr: PTcl_Obj; lengthPtr: pcint):cint; cdecl;
TFListObjReplace = function(interp: PTcl_Interp; listPtr: PTcl_Obj; first: cint; count: cint; objc: cint; objv: PPTcl_Obj):cint; cdecl;
TFNewBooleanObj = function(boolValue: cint):PTcl_Obj; cdecl;
TFNewByteArrayObj = function(bytes: pcuchar; length: cint):PTcl_Obj; cdecl;
TFNewDoubleObj = function(doubleValue: double):PTcl_Obj; cdecl;
TFNewIntObj = function(intValue: cint):PTcl_Obj; cdecl;
TFNewListObj = function(objc: cint; objv: PPTcl_Obj):PTcl_Obj; cdecl;
TFNewLongObj = function(longValue: clong):PTcl_Obj; cdecl;
TFNewObj = function():PTcl_Obj; cdecl;
TFNewStringObj = function(bytes: Pchar; length: cint):PTcl_Obj; cdecl;
TFSetBooleanObj = procedure(objPtr: PTcl_Obj; boolValue: cint); cdecl;
TFSetByteArrayLength = function(objPtr: PTcl_Obj; length: cint):pcuchar; cdecl;
TFSetByteArrayObj = procedure(objPtr: PTcl_Obj; bytes: pcuchar; length: cint); cdecl;
TFSetDoubleObj = procedure(objPtr: PTcl_Obj; doubleValue: double); cdecl;
TFSetIntObj = procedure(objPtr: PTcl_Obj; intValue: cint); cdecl;
TFSetListObj = procedure(objPtr: PTcl_Obj; objc: cint; objv: PPTcl_Obj); cdecl;
TFSetLongObj = procedure(objPtr: PTcl_Obj; longValue: clong); cdecl;
TFSetObjLength = procedure(objPtr: PTcl_Obj; length: cint); cdecl;
TFSetStringObj = procedure(objPtr: PTcl_Obj; bytes: Pchar; length: cint); cdecl;
TFAddErrorInfo = procedure(interp: PTcl_Interp; message: Pchar); cdecl;
TFAddObjErrorInfo = procedure(interp: PTcl_Interp; message: Pchar; length: cint); cdecl;
TFAllowExceptions = procedure(interp: PTcl_Interp); cdecl;
TFAppendElement = procedure(interp: PTcl_Interp; element: Pchar); cdecl;
TFAppendResult = procedure(interp: PTcl_Interp); cdecl; varargs;
PTcl_AsyncProc = ^Tcl_AsyncProc;
TFAsyncCreate = function(proc: PTcl_AsyncProc; clientData: ClientData):Tcl_AsyncHandler; cdecl;
TFAsyncDelete = procedure(async: Tcl_AsyncHandler); cdecl;
TFAsyncInvoke = function(interp: PTcl_Interp; code: cint):cint; cdecl;
TFAsyncMark = procedure(async: Tcl_AsyncHandler); cdecl;
TFAsyncReady = function():cint; cdecl;
TFBackgroundError = procedure(interp: PTcl_Interp); cdecl;
TFBackslash = function(src: Pchar; readPtr: pcint):char; cdecl;
TFBadChannelOption = function(interp: PTcl_Interp; optionName: Pchar; optionList: Pchar):cint; cdecl;
PTcl_InterpDeleteProc = ^Tcl_InterpDeleteProc;
TFCallWhenDeleted = procedure(interp: PTcl_Interp; proc: PTcl_InterpDeleteProc; clientData: ClientData); cdecl;
PTcl_IdleProc = ^Tcl_IdleProc;
TFCancelIdleCall = procedure(idleProc: PTcl_IdleProc; clientData: ClientData); cdecl;
TFClose = function(interp: PTcl_Interp; chan: Tcl_Channel):cint; cdecl;
TFCommandComplete = function(cmd: Pchar):cint; cdecl;
TFConcat = function(argc: cint; argv: PPChar):Pchar; cdecl;
TFConvertElement = function(src: Pchar; dst: Pchar; flags: cint):cint; cdecl;
TFConvertCountedElement = function(src: Pchar; length: cint; dst: Pchar; flags: cint):cint; cdecl;
TFCreateAlias = function(slave: PTcl_Interp; slaveCmd: Pchar; target: PTcl_Interp; targetCmd: Pchar; argc: cint; argv: PPChar):cint; cdecl;
TFCreateAliasObj = function(slave: PTcl_Interp; slaveCmd: Pchar; target: PTcl_Interp; targetCmd: Pchar; objc: cint; objv: PPTcl_Obj):cint; cdecl;
PTcl_ChannelType = ^Tcl_ChannelType;
TFCreateChannel = function(typePtr: PTcl_ChannelType; chanName: Pchar; instanceData: ClientData; mask: cint):Tcl_Channel; cdecl;
PTcl_ChannelProc = ^Tcl_ChannelProc;
TFCreateChannelHandler = procedure(chan: Tcl_Channel; mask: cint; proc: PTcl_ChannelProc; clientData: ClientData); cdecl;
PTcl_CloseProc = ^Tcl_CloseProc;
TFCreateCloseHandler = procedure(chan: Tcl_Channel; proc: PTcl_CloseProc; clientData: ClientData); cdecl;
PTcl_CmdProc = ^Tcl_CmdProc;
PTcl_CmdDeleteProc = ^Tcl_CmdDeleteProc;
TFCreateCommand = function(interp: PTcl_Interp; cmdName: Pchar; proc: PTcl_CmdProc; clientData: ClientData; deleteProc: PTcl_CmdDeleteProc):Tcl_Command; cdecl;
PTcl_EventSetupProc = ^Tcl_EventSetupProc;
PTcl_EventCheckProc = ^Tcl_EventCheckProc;
TFCreateEventSource = procedure(setupProc: PTcl_EventSetupProc; checkProc: PTcl_EventCheckProc; clientData: ClientData); cdecl;
PTcl_ExitProc = ^Tcl_ExitProc;
TFCreateExitHandler = procedure(proc: PTcl_ExitProc; clientData: ClientData); cdecl;
TFCreateInterp = function():PTcl_Interp; cdecl;
PTcl_ValueType = ^Tcl_ValueType;
PTcl_MathProc = ^Tcl_MathProc;
TFCreateMathFunc = procedure(interp: PTcl_Interp; name: Pchar; numArgs: cint; argTypes: PTcl_ValueType; proc: PTcl_MathProc; clientData: ClientData); cdecl;
TFCreateObjCommand = function(interp: PTcl_Interp; cmdName: Pchar; proc: PTcl_ObjCmdProc; clientData: ClientData; deleteProc: PTcl_CmdDeleteProc):Tcl_Command; cdecl;
TFCreateSlave = function(interp: PTcl_Interp; slaveName: Pchar; isSafe: cint):PTcl_Interp; cdecl;
PTcl_TimerProc = ^Tcl_TimerProc;
TFCreateTimerHandler = function(milliseconds: cint; proc: PTcl_TimerProc; clientData: ClientData):Tcl_TimerToken; cdecl;
PTcl_CmdTraceProc = ^Tcl_CmdTraceProc;
TFCreateTrace = function(interp: PTcl_Interp; level: cint; proc: PTcl_CmdTraceProc; clientData: ClientData):Tcl_Trace; cdecl;
TFDeleteAssocData = procedure(interp: PTcl_Interp; name: Pchar); cdecl;
TFDeleteChannelHandler = procedure(chan: Tcl_Channel; proc: PTcl_ChannelProc; clientData: ClientData); cdecl;
TFDeleteCloseHandler = procedure(chan: Tcl_Channel; proc: PTcl_CloseProc; clientData: ClientData); cdecl;
TFDeleteCommand = function(interp: PTcl_Interp; cmdName: Pchar):cint; cdecl;
TFDeleteCommandFromToken = function(interp: PTcl_Interp; command: Tcl_Command):cint; cdecl;
PTcl_EventDeleteProc = ^Tcl_EventDeleteProc;
TFDeleteEvents = procedure(proc: PTcl_EventDeleteProc; clientData: ClientData); cdecl;
TFDeleteEventSource = procedure(setupProc: PTcl_EventSetupProc; checkProc: PTcl_EventCheckProc; clientData: ClientData); cdecl;
TFDeleteExitHandler = procedure(proc: PTcl_ExitProc; clientData: ClientData); cdecl;
PTcl_HashEntry = ^Tcl_HashEntry;
TFDeleteHashEntry = procedure(entryPtr: PTcl_HashEntry); cdecl;
PTcl_HashTable = ^Tcl_HashTable;
TFDeleteHashTable = procedure(tablePtr: PTcl_HashTable); cdecl;
TFDeleteInterp = procedure(interp: PTcl_Interp); cdecl;
PTcl_Pid = ^Tcl_Pid;
TFDetachPids = procedure(numPids: cint; pidPtr: PTcl_Pid); cdecl;
TFDeleteTimerHandler = procedure(token: Tcl_TimerToken); cdecl;
TFDeleteTrace = procedure(interp: PTcl_Interp; trace: Tcl_Trace); cdecl;
TFDontCallWhenDeleted = procedure(interp: PTcl_Interp; proc: PTcl_InterpDeleteProc; clientData: ClientData); cdecl;
TFDoOneEvent = function(flags: cint):cint; cdecl;
TFDoWhenIdle = procedure(proc: PTcl_IdleProc; clientData: ClientData); cdecl;
PTcl_DString = ^Tcl_DString;
TFDStringAppend = function(dsPtr: PTcl_DString; bytes: Pchar; length: cint):Pchar; cdecl;
TFDStringAppendElement = function(dsPtr: PTcl_DString; element: Pchar):Pchar; cdecl;
TFDStringEndSublist = procedure(dsPtr: PTcl_DString); cdecl;
TFDStringFree = procedure(dsPtr: PTcl_DString); cdecl;
TFDStringGetResult = procedure(interp: PTcl_Interp; dsPtr: PTcl_DString); cdecl;
TFDStringInit = procedure(dsPtr: PTcl_DString); cdecl;
TFDStringResult = procedure(interp: PTcl_Interp; dsPtr: PTcl_DString); cdecl;
TFDStringSetLength = procedure(dsPtr: PTcl_DString; length: cint); cdecl;
TFDStringStartSublist = procedure(dsPtr: PTcl_DString); cdecl;
TFEof = function(chan: Tcl_Channel):cint; cdecl;
TFErrnoId = function():Pchar; cdecl;
TFErrnoMsg = function(err: cint):Pchar; cdecl;
TFEval = function(interp: PTcl_Interp; script: Pchar):cint; cdecl;
TFEvalFile = function(interp: PTcl_Interp; fileName: Pchar):cint; cdecl;
TFEvalObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj):cint; cdecl;
PTcl_FreeProc = ^Tcl_FreeProc;
TFEventuallyFree = procedure(clientData: ClientData; freeProc: PTcl_FreeProc); cdecl;
TFExit = procedure(status: cint); cdecl;
TFExposeCommand = function(interp: PTcl_Interp; hiddenCmdToken: Pchar; cmdName: Pchar):cint; cdecl;
TFExprBoolean = function(interp: PTcl_Interp; expr: Pchar; ptr: pcint):cint; cdecl;
TFExprBooleanObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; ptr: pcint):cint; cdecl;
TFExprDouble = function(interp: PTcl_Interp; expr: Pchar; ptr: Pdouble):cint; cdecl;
TFExprDoubleObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; ptr: Pdouble):cint; cdecl;
TFExprLong = function(interp: PTcl_Interp; expr: Pchar; ptr: pclong):cint; cdecl;
TFExprLongObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; ptr: pclong):cint; cdecl;
TFExprObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; resultPtrPtr: PTcl_Obj):cint; cdecl;
TFExprString = function(interp: PTcl_Interp; expr: Pchar):cint; cdecl;
TFFinalize = procedure(); cdecl;
TFFindExecutable = procedure(argv0: Pchar); cdecl;
PTcl_HashSearch = ^Tcl_HashSearch;
TFFirstHashEntry = function(tablePtr: PTcl_HashTable; searchPtr: PTcl_HashSearch):PTcl_HashEntry; cdecl;
TFFlush = function(chan: Tcl_Channel):cint; cdecl;
TFFreeResult = procedure(interp: PTcl_Interp); cdecl;
TFGetAlias = function(interp: PTcl_Interp; slaveCmd: Pchar; targetInterpPtr: PTcl_Interp; targetCmdPtr: Pchar; argcPtr: pcint; argvPtr: Pchar):cint; cdecl;
TFGetAliasObj = function(interp: PTcl_Interp; slaveCmd: Pchar; targetInterpPtr: PTcl_Interp; targetCmdPtr: Pchar; objcPtr: pcint; objv: PTcl_Obj):cint; cdecl;
TFGetAssocData = function(interp: PTcl_Interp; name: Pchar; procPtr: PTcl_InterpDeleteProc):ClientData; cdecl;
TFGetChannel = function(interp: PTcl_Interp; chanName: Pchar; modePtr: pcint):Tcl_Channel; cdecl;
TFGetChannelBufferSize = function(chan: Tcl_Channel):cint; cdecl;
TFGetChannelHandle = function(chan: Tcl_Channel; direction: cint; handlePtr: PClientData):cint; cdecl;
TFGetChannelInstanceData = function(chan: Tcl_Channel):ClientData; cdecl;
TFGetChannelMode = function(chan: Tcl_Channel):cint; cdecl;
TFGetChannelName = function(chan: Tcl_Channel):Pchar; cdecl;
TFGetChannelOption = function(interp: PTcl_Interp; chan: Tcl_Channel; optionName: Pchar; dsPtr: PTcl_DString):cint; cdecl;
TFGetChannelType = function(chan: Tcl_Channel):PTcl_ChannelType; cdecl;
PTcl_CmdInfo = ^Tcl_CmdInfo;
TFGetCommandInfo = function(interp: PTcl_Interp; cmdName: Pchar; infoPtr: PTcl_CmdInfo):cint; cdecl;
TFGetCommandName = function(interp: PTcl_Interp; command: Tcl_Command):Pchar; cdecl;
TFGetErrno = function():cint; cdecl;
TFGetHostName = function():Pchar; cdecl;
TFGetInterpPath = function(askInterp: PTcl_Interp; slaveInterp: PTcl_Interp):cint; cdecl;
TFGetMaster = function(interp: PTcl_Interp):PTcl_Interp; cdecl;
TFGetNameOfExecutable = function():Pchar; cdecl;
TFGetObjResult = function(interp: PTcl_Interp):PTcl_Obj; cdecl;
TFGetOpenFile = function(interp: PTcl_Interp; chanID: Pchar; forWriting: cint; checkUsage: cint; filePtr: PClientData):cint; cdecl;
TFGetPathType = function(path: Pchar):Tcl_PathType; cdecl;
TFGets = function(chan: Tcl_Channel; dsPtr: PTcl_DString):cint; cdecl;
TFGetsObj = function(chan: Tcl_Channel; objPtr: PTcl_Obj):cint; cdecl;
TFGetServiceMode = function():cint; cdecl;
TFGetSlave = function(interp: PTcl_Interp; slaveName: Pchar):PTcl_Interp; cdecl;
TFGetStdChannel = function(typeVal: cint):Tcl_Channel; cdecl;
TFGetStringResult = function(interp: PTcl_Interp):Pchar; cdecl;
TFGetVar = function(interp: PTcl_Interp; varName: Pchar; flags: cint):Pchar; cdecl;
TFGetVar2 = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; flags: cint):Pchar; cdecl;
TFGlobalEval = function(interp: PTcl_Interp; command: Pchar):cint; cdecl;
TFGlobalEvalObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj):cint; cdecl;
TFHideCommand = function(interp: PTcl_Interp; cmdName: Pchar; hiddenCmdToken: Pchar):cint; cdecl;
TFInit = function(interp: PTcl_Interp):cint; cdecl;
TFInitHashTable = procedure(tablePtr: PTcl_HashTable; keyType: cint); cdecl;
TFInputBlocked = function(chan: Tcl_Channel):cint; cdecl;
TFInputBuffered = function(chan: Tcl_Channel):cint; cdecl;
TFInterpDeleted = function(interp: PTcl_Interp):cint; cdecl;
TFIsSafe = function(interp: PTcl_Interp):cint; cdecl;
TFJoinPath = function(argc: cint; argv: PPChar; resultPtr: PTcl_DString):Pchar; cdecl;
TFLinkVar = function(interp: PTcl_Interp; varName: Pchar; addr: Pchar; typeVal: cint):cint; cdecl;
TFMakeFileChannel = function(handle: ClientData; mode: cint):Tcl_Channel; cdecl;
TFMakeSafe = function(interp: PTcl_Interp):cint; cdecl;
TFMakeTcpClientChannel = function(tcpSocket: ClientData):Tcl_Channel; cdecl;
TFMerge = function(argc: cint; argv: PPChar):Pchar; cdecl;
TFNextHashEntry = function(searchPtr: PTcl_HashSearch):PTcl_HashEntry; cdecl;
TFNotifyChannel = procedure(channel: Tcl_Channel; mask: cint); cdecl;
TFObjGetVar2 = function(interp: PTcl_Interp; part1Ptr: PTcl_Obj; part2Ptr: PTcl_Obj; flags: cint):PTcl_Obj; cdecl;
TFObjSetVar2 = function(interp: PTcl_Interp; part1Ptr: PTcl_Obj; part2Ptr: PTcl_Obj; newValuePtr: PTcl_Obj; flags: cint):PTcl_Obj; cdecl;
TFOpenCommandChannel = function(interp: PTcl_Interp; argc: cint; argv: Pchar; flags: cint):Tcl_Channel; cdecl;
TFOpenFileChannel = function(interp: PTcl_Interp; fileName: Pchar; modeString: Pchar; permissions: cint):Tcl_Channel; cdecl;
TFOpenTcpClient = function(interp: PTcl_Interp; port: cint; address: Pchar; myaddr: Pchar; myport: cint; async: cint):Tcl_Channel; cdecl;
PTcl_TcpAcceptProc = ^Tcl_TcpAcceptProc;
TFOpenTcpServer = function(interp: PTcl_Interp; port: cint; host: Pchar; acceptProc: PTcl_TcpAcceptProc; callbackData: ClientData):Tcl_Channel; cdecl;
TFPreserve = procedure(data: ClientData); cdecl;
TFPrintDouble = procedure(interp: PTcl_Interp; value: double; dst: Pchar); cdecl;
TFPutEnv = function(assignment: Pchar):cint; cdecl;
TFPosixError = function(interp: PTcl_Interp):Pchar; cdecl;
PTcl_Event = ^Tcl_Event;
TFQueueEvent = procedure(evPtr: PTcl_Event; position: Tcl_QueuePosition); cdecl;
TFRead = function(chan: Tcl_Channel; bufPtr: Pchar; toRead: cint):cint; cdecl;
TFReapDetachedProcs = procedure(); cdecl;
TFRecordAndEval = function(interp: PTcl_Interp; cmd: Pchar; flags: cint):cint; cdecl;
TFRecordAndEvalObj = function(interp: PTcl_Interp; cmdPtr: PTcl_Obj; flags: cint):cint; cdecl;
TFRegisterChannel = procedure(interp: PTcl_Interp; chan: Tcl_Channel); cdecl;
TFRegisterObjType = procedure(typePtr: PTcl_ObjType); cdecl;
TFRegExpCompile = function(interp: PTcl_Interp; pattern: Pchar):Tcl_RegExp; cdecl;
TFRegExpExec = function(interp: PTcl_Interp; regexp: Tcl_RegExp; text: Pchar; start: Pchar):cint; cdecl;
TFRegExpMatch = function(interp: PTcl_Interp; text: Pchar; pattern: Pchar):cint; cdecl;
TFRegExpRange = procedure(regexp: Tcl_RegExp; index: cint; startPtr: Pchar; endPtr: Pchar); cdecl;
TFRelease = procedure(clientData: ClientData); cdecl;
TFResetResult = procedure(interp: PTcl_Interp); cdecl;
TFScanElement = function(src: Pchar; flagPtr: pcint):cint; cdecl;
TFScanCountedElement = function(src: Pchar; length: cint; flagPtr: pcint):cint; cdecl;
TFSeekOld = function(chan: Tcl_Channel; offset: cint; mode: cint):cint; cdecl;
TFServiceAll = function():cint; cdecl;
TFServiceEvent = function(flags: cint):cint; cdecl;
TFSetAssocData = procedure(interp: PTcl_Interp; name: Pchar; proc: PTcl_InterpDeleteProc; clientData: ClientData); cdecl;
TFSetChannelBufferSize = procedure(chan: Tcl_Channel; sz: cint); cdecl;
TFSetChannelOption = function(interp: PTcl_Interp; chan: Tcl_Channel; optionName: Pchar; newValue: Pchar):cint; cdecl;
TFSetCommandInfo = function(interp: PTcl_Interp; cmdName: Pchar; infoPtr: PTcl_CmdInfo):cint; cdecl;
TFSetErrno = procedure(err: cint); cdecl;
TFSetErrorCode = procedure(interp: PTcl_Interp); cdecl; varargs;
TFSetMaxBlockTime = procedure(timePtr: PTcl_Time); cdecl;
PTcl_PanicProc = ^Tcl_PanicProc;
TFSetPanicProc = procedure(panicProc: PTcl_PanicProc); cdecl;
TFSetRecursionLimit = function(interp: PTcl_Interp; depth: cint):cint; cdecl;
TFSetResult = procedure(interp: PTcl_Interp; result: Pchar; freeProc: PTcl_FreeProc); cdecl;
TFSetServiceMode = function(mode: cint):cint; cdecl;
TFSetObjErrorCode = procedure(interp: PTcl_Interp; errorObjPtr: PTcl_Obj); cdecl;
TFSetObjResult = procedure(interp: PTcl_Interp; resultObjPtr: PTcl_Obj); cdecl;
TFSetStdChannel = procedure(channel: Tcl_Channel; typeVal: cint); cdecl;
TFSetVar = function(interp: PTcl_Interp; varName: Pchar; newValue: Pchar; flags: cint):Pchar; cdecl;
TFSetVar2 = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; newValue: Pchar; flags: cint):Pchar; cdecl;
TFSignalId = function(sig: cint):Pchar; cdecl;
TFSignalMsg = function(sig: cint):Pchar; cdecl;
TFSourceRCFile = procedure(interp: PTcl_Interp); cdecl;
TFSplitList = function(interp: PTcl_Interp; listStr: Pchar; argcPtr: pcint; argvPtr: Pchar):cint; cdecl;
TFSplitPath = procedure(path: Pchar; argcPtr: pcint; argvPtr: Pchar); cdecl;
PTcl_PackageInitProc = ^Tcl_PackageInitProc;
TFStaticPackage = procedure(interp: PTcl_Interp; pkgName: Pchar; initProc: PTcl_PackageInitProc; safeInitProc: PTcl_PackageInitProc); cdecl;
TFStringMatch = function(str: Pchar; pattern: Pchar):cint; cdecl;
TFTellOld = function(chan: Tcl_Channel):cint; cdecl;
PTcl_VarTraceProc = ^Tcl_VarTraceProc;
TFTraceVar = function(interp: PTcl_Interp; varName: Pchar; flags: cint; proc: PTcl_VarTraceProc; clientData: ClientData):cint; cdecl;
TFTraceVar2 = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; flags: cint; proc: PTcl_VarTraceProc; clientData: ClientData):cint; cdecl;
TFTranslateFileName = function(interp: PTcl_Interp; name: Pchar; bufferPtr: PTcl_DString):Pchar; cdecl;
TFUngets = function(chan: Tcl_Channel; str: Pchar; len: cint; atHead: cint):cint; cdecl;
TFUnlinkVar = procedure(interp: PTcl_Interp; varName: Pchar); cdecl;
TFUnregisterChannel = function(interp: PTcl_Interp; chan: Tcl_Channel):cint; cdecl;
TFUnsetVar = function(interp: PTcl_Interp; varName: Pchar; flags: cint):cint; cdecl;
TFUnsetVar2 = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; flags: cint):cint; cdecl;
TFUntraceVar = procedure(interp: PTcl_Interp; varName: Pchar; flags: cint; proc: PTcl_VarTraceProc; clientData: ClientData); cdecl;
TFUntraceVar2 = procedure(interp: PTcl_Interp; part1: Pchar; part2: Pchar; flags: cint; proc: PTcl_VarTraceProc; clientData: ClientData); cdecl;
TFUpdateLinkedVar = procedure(interp: PTcl_Interp; varName: Pchar); cdecl;
TFUpVar = function(interp: PTcl_Interp; frameName: Pchar; varName: Pchar; localName: Pchar; flags: cint):cint; cdecl;
TFUpVar2 = function(interp: PTcl_Interp; frameName: Pchar; part1: Pchar; part2: Pchar; localName: Pchar; flags: cint):cint; cdecl;
TFVarEval = function(interp: PTcl_Interp):cint; cdecl; varargs;
TFVarTraceInfo = function(interp: PTcl_Interp; varName: Pchar; flags: cint; procPtr: PTcl_VarTraceProc; prevClientData: ClientData):ClientData; cdecl;
TFVarTraceInfo2 = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; flags: cint; procPtr: PTcl_VarTraceProc; prevClientData: ClientData):ClientData; cdecl;
TFWrite = function(chan: Tcl_Channel; s: Pchar; slen: cint):cint; cdecl;
TFWrongNumArgs = procedure(interp: PTcl_Interp; objc: cint; objv: PPTcl_Obj; message: Pchar); cdecl;
TFDumpActiveMemory = function(fileName: Pchar):cint; cdecl;
TFValidateAllMemory = procedure(fileName: Pchar; line: cint); cdecl;
TFAppendResultVA = procedure(interp: PTcl_Interp); cdecl; varargs;
TFAppendStringsToObjVA = procedure(objPtr: PTcl_Obj); cdecl; varargs;
TFHashStats = function(tablePtr: PTcl_HashTable):Pchar; cdecl;
TFParseVar = function(interp: PTcl_Interp; start: Pchar; termPtr: Pchar):Pchar; cdecl;
TFPkgPresent = function(interp: PTcl_Interp; name: Pchar; version: Pchar; exact: cint):Pchar; cdecl;
TFPkgPresentEx = function(interp: PTcl_Interp; name: Pchar; version: Pchar; exact: cint; clientDataPtr: Pointer):Pchar; cdecl;
TFPkgProvide = function(interp: PTcl_Interp; name: Pchar; version: Pchar):cint; cdecl;
TFPkgRequire = function(interp: PTcl_Interp; name: Pchar; version: Pchar; exact: cint):Pchar; cdecl;
TFSetErrorCodeVA = procedure(interp: PTcl_Interp); cdecl; varargs;
TFVarEvalVA = function(interp: PTcl_Interp):cint; cdecl; varargs;
TFWaitPid = function(pid: Tcl_Pid; statPtr: pcint; options: cint):Tcl_Pid; cdecl;
TFPanicVA = procedure(format: Pchar); cdecl; varargs;
TFGetVersion = procedure(major: pcint; minor: pcint; patchLevel: pcint; typeVal: pcint); cdecl;
TFInitMemory = procedure(interp: PTcl_Interp); cdecl;
TFStackChannel = function(interp: PTcl_Interp; typePtr: PTcl_ChannelType; instanceData: ClientData; mask: cint; prevChan: Tcl_Channel):Tcl_Channel; cdecl;
TFUnstackChannel = function(interp: PTcl_Interp; chan: Tcl_Channel):cint; cdecl;
TFGetStackedChannel = function(chan: Tcl_Channel):Tcl_Channel; cdecl;
PTcl_MainLoopProc = ^Tcl_MainLoopProc;
TFSetMainLoop = procedure(proc: PTcl_MainLoopProc); cdecl;
TFAppendObjToObj = procedure(objPtr: PTcl_Obj; appendObjPtr: PTcl_Obj); cdecl;
PTcl_EncodingType = ^Tcl_EncodingType;
TFCreateEncoding = function(typePtr: PTcl_EncodingType):Tcl_Encoding; cdecl;
TFCreateThreadExitHandler = procedure(proc: PTcl_ExitProc; clientData: ClientData); cdecl;
TFDeleteThreadExitHandler = procedure(proc: PTcl_ExitProc; clientData: ClientData); cdecl;
PTcl_SavedResult = ^Tcl_SavedResult;
TFDiscardResult = procedure(statePtr: PTcl_SavedResult); cdecl;
TFEvalEx = function(interp: PTcl_Interp; script: Pchar; numBytes: cint; flags: cint):cint; cdecl;
TFEvalObjv = function(interp: PTcl_Interp; objc: cint; objv: PPTcl_Obj; flags: cint):cint; cdecl;
TFEvalObjEx = function(interp: PTcl_Interp; objPtr: PTcl_Obj; flags: cint):cint; cdecl;
TFExitThread = procedure(status: cint); cdecl;
PTcl_EncodingState = ^Tcl_EncodingState;
TFExternalToUtf = function(interp: PTcl_Interp; encoding: Tcl_Encoding; src: Pchar; srcLen: cint; flags: cint; statePtr: PTcl_EncodingState; dst: Pchar; dstLen: cint; srcReadPtr: pcint; dstWrotePtr: pcint; dstCharsPtr: pcint):cint; cdecl;
TFExternalToUtfDString = function(encoding: Tcl_Encoding; src: Pchar; srcLen: cint; dsPtr: PTcl_DString):Pchar; cdecl;
TFFinalizeThread = procedure(); cdecl;
TFFinalizeNotifier = procedure(clientData: ClientData); cdecl;
TFFreeEncoding = procedure(encoding: Tcl_Encoding); cdecl;
TFGetCurrentThread = function():Tcl_ThreadId; cdecl;
TFGetEncoding = function(interp: PTcl_Interp; name: Pchar):Tcl_Encoding; cdecl;
TFGetEncodingName = function(encoding: Tcl_Encoding):Pchar; cdecl;
TFGetEncodingNames = procedure(interp: PTcl_Interp); cdecl;
TFGetIndexFromObjStruct = function(interp: PTcl_Interp; objPtr: PTcl_Obj; tablePtr: Pointer; offset: cint; msg: Pchar; flags: cint; indexPtr: pcint):cint; cdecl;
PTcl_ThreadDataKey = ^Tcl_ThreadDataKey;
TFGetThreadData = function(keyPtr: PTcl_ThreadDataKey; size: cint):Pointer; cdecl;
TFGetVar2Ex = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; flags: cint):PTcl_Obj; cdecl;
TFInitNotifier = function():ClientData; cdecl;
PTcl_Mutex = ^Tcl_Mutex;
TFMutexLock = procedure(mutexPtr: PTcl_Mutex); cdecl;
TFMutexUnlock = procedure(mutexPtr: PTcl_Mutex); cdecl;
PTcl_Condition = ^Tcl_Condition;
TFConditionNotify = procedure(condPtr: PTcl_Condition); cdecl;
TFConditionWait = procedure(condPtr: PTcl_Condition; mutexPtr: PTcl_Mutex; timePtr: PTcl_Time); cdecl;
TFNumUtfChars = function(src: Pchar; length: cint):cint; cdecl;
TFReadChars = function(channel: Tcl_Channel; objPtr: PTcl_Obj; charsToRead: cint; appendFlag: cint):cint; cdecl;
TFRestoreResult = procedure(interp: PTcl_Interp; statePtr: PTcl_SavedResult); cdecl;
TFSaveResult = procedure(interp: PTcl_Interp; statePtr: PTcl_SavedResult); cdecl;
TFSetSystemEncoding = function(interp: PTcl_Interp; name: Pchar):cint; cdecl;
TFSetVar2Ex = function(interp: PTcl_Interp; part1: Pchar; part2: Pchar; newValuePtr: PTcl_Obj; flags: cint):PTcl_Obj; cdecl;
TFThreadAlert = procedure(threadId: Tcl_ThreadId); cdecl;
TFThreadQueueEvent = procedure(threadId: Tcl_ThreadId; evPtr: PTcl_Event; position: Tcl_QueuePosition); cdecl;
TFUniCharAtIndex = function(src: Pchar; index: cint):Tcl_UniChar; cdecl;
TFUniCharToLower = function(ch: cint):Tcl_UniChar; cdecl;
TFUniCharToTitle = function(ch: cint):Tcl_UniChar; cdecl;
TFUniCharToUpper = function(ch: cint):Tcl_UniChar; cdecl;
TFUniCharToUtf = function(ch: cint; buf: Pchar):cint; cdecl;
TFUtfAtIndex = function(src: Pchar; index: cint):Pchar; cdecl;
TFUtfCharComplete = function(src: Pchar; length: cint):cint; cdecl;
TFUtfBackslash = function(src: Pchar; readPtr: pcint; dst: Pchar):cint; cdecl;
TFUtfFindFirst = function(src: Pchar; ch: cint):Pchar; cdecl;
TFUtfFindLast = function(src: Pchar; ch: cint):Pchar; cdecl;
TFUtfNext = function(src: Pchar):Pchar; cdecl;
TFUtfPrev = function(src: Pchar; start: Pchar):Pchar; cdecl;
TFUtfToExternal = function(interp: PTcl_Interp; encoding: Tcl_Encoding; src: Pchar; srcLen: cint; flags: cint; statePtr: PTcl_EncodingState; dst: Pchar; dstLen: cint; srcReadPtr: pcint; dstWrotePtr: pcint; dstCharsPtr: pcint):cint; cdecl;
TFUtfToExternalDString = function(encoding: Tcl_Encoding; src: Pchar; srcLen: cint; dsPtr: PTcl_DString):Pchar; cdecl;
TFUtfToLower = function(src: Pchar):cint; cdecl;
TFUtfToTitle = function(src: Pchar):cint; cdecl;
PTcl_UniChar = ^Tcl_UniChar;
TFUtfToUniChar = function(src: Pchar; chPtr: PTcl_UniChar):cint; cdecl;
TFUtfToUpper = function(src: Pchar):cint; cdecl;
TFWriteChars = function(chan: Tcl_Channel; src: Pchar; srcLen: cint):cint; cdecl;
TFWriteObj = function(chan: Tcl_Channel; objPtr: PTcl_Obj):cint; cdecl;
TFGetString = function(objPtr: PTcl_Obj):Pchar; cdecl;
TFGetDefaultEncodingDir = function():Pchar; cdecl;
TFSetDefaultEncodingDir = procedure(path: Pchar); cdecl;
TFAlertNotifier = procedure(clientData: ClientData); cdecl;
TFServiceModeHook = procedure(mode: cint); cdecl;
TFUniCharIsAlnum = function(ch: cint):cint; cdecl;
TFUniCharIsAlpha = function(ch: cint):cint; cdecl;
TFUniCharIsDigit = function(ch: cint):cint; cdecl;
TFUniCharIsLower = function(ch: cint):cint; cdecl;
TFUniCharIsSpace = function(ch: cint):cint; cdecl;
TFUniCharIsUpper = function(ch: cint):cint; cdecl;
TFUniCharIsWordChar = function(ch: cint):cint; cdecl;
TFUniCharLen = function(uniStr: PTcl_UniChar):cint; cdecl;
TFUniCharNcmp = function(ucs: PTcl_UniChar; uct: PTcl_UniChar; numChars: longword):cint; cdecl;
TFUniCharToUtfDString = function(uniStr: PTcl_UniChar; uniLength: cint; dsPtr: PTcl_DString):Pchar; cdecl;
TFUtfToUniCharDString = function(src: Pchar; length: cint; dsPtr: PTcl_DString):PTcl_UniChar; cdecl;
TFGetRegExpFromObj = function(interp: PTcl_Interp; patObj: PTcl_Obj; flags: cint):Tcl_RegExp; cdecl;
PTcl_Token = ^Tcl_Token;
TFEvalTokens = function(interp: PTcl_Interp; tokenPtr: PTcl_Token; count: cint):PTcl_Obj; cdecl;
PTcl_Parse = ^Tcl_Parse;
TFFreeParse = procedure(parsePtr: PTcl_Parse); cdecl;
TFLogCommandInfo = procedure(interp: PTcl_Interp; script: Pchar; command: Pchar; length: cint); cdecl;
TFParseBraces = function(interp: PTcl_Interp; start: Pchar; numBytes: cint; parsePtr: PTcl_Parse; append: cint; termPtr: Pchar):cint; cdecl;
TFParseCommand = function(interp: PTcl_Interp; start: Pchar; numBytes: cint; nested: cint; parsePtr: PTcl_Parse):cint; cdecl;
TFParseExpr = function(interp: PTcl_Interp; start: Pchar; numBytes: cint; parsePtr: PTcl_Parse):cint; cdecl;
TFParseQuotedString = function(interp: PTcl_Interp; start: Pchar; numBytes: cint; parsePtr: PTcl_Parse; append: cint; termPtr: Pchar):cint; cdecl;
TFParseVarName = function(interp: PTcl_Interp; start: Pchar; numBytes: cint; parsePtr: PTcl_Parse; append: cint):cint; cdecl;
TFGetCwd = function(interp: PTcl_Interp; cwdPtr: PTcl_DString):Pchar; cdecl;
TFChdir = function(dirName: Pchar):cint; cdecl;
TFAccess = function(path: Pchar; mode: cint):cint; cdecl;
TFStat = function(path: Pchar; bufPtr: Pstat):cint; cdecl;
TFUtfNcmp = function(s1: Pchar; s2: Pchar; n: longword):cint; cdecl;
TFUtfNcasecmp = function(s1: Pchar; s2: Pchar; n: longword):cint; cdecl;
TFStringCaseMatch = function(str: Pchar; pattern: Pchar; nocase: cint):cint; cdecl;
TFUniCharIsControl = function(ch: cint):cint; cdecl;
TFUniCharIsGraph = function(ch: cint):cint; cdecl;
TFUniCharIsPrint = function(ch: cint):cint; cdecl;
TFUniCharIsPunct = function(ch: cint):cint; cdecl;
TFRegExpExecObj = function(interp: PTcl_Interp; regexp: Tcl_RegExp; textObj: PTcl_Obj; offset: cint; nmatches: cint; flags: cint):cint; cdecl;
PTcl_RegExpInfo = ^Tcl_RegExpInfo;
TFRegExpGetInfo = procedure(regexp: Tcl_RegExp; infoPtr: PTcl_RegExpInfo); cdecl;
TFNewUnicodeObj = function(unicode: PTcl_UniChar; numChars: cint):PTcl_Obj; cdecl;
TFSetUnicodeObj = procedure(objPtr: PTcl_Obj; unicode: PTcl_UniChar; numChars: cint); cdecl;
TFGetCharLength = function(objPtr: PTcl_Obj):cint; cdecl;
TFGetUniChar = function(objPtr: PTcl_Obj; index: cint):Tcl_UniChar; cdecl;
TFGetUnicode = function(objPtr: PTcl_Obj):PTcl_UniChar; cdecl;
TFGetRange = function(objPtr: PTcl_Obj; first: cint; last: cint):PTcl_Obj; cdecl;
TFAppendUnicodeToObj = procedure(objPtr: PTcl_Obj; unicode: PTcl_UniChar; length: cint); cdecl;
TFRegExpMatchObj = function(interp: PTcl_Interp; textObj: PTcl_Obj; patternObj: PTcl_Obj):cint; cdecl;
PTcl_NotifierProcs = ^Tcl_NotifierProcs;
TFSetNotifier = procedure(notifierProcPtr: PTcl_NotifierProcs); cdecl;
TFGetAllocMutex = function():PTcl_Mutex; cdecl;
TFGetChannelNames = function(interp: PTcl_Interp):cint; cdecl;
TFGetChannelNamesEx = function(interp: PTcl_Interp; pattern: Pchar):cint; cdecl;
TFProcObjCmd = function(clientData: ClientData; interp: PTcl_Interp; objc: cint; objv: PPTcl_Obj):cint; cdecl;
TFConditionFinalize = procedure(condPtr: PTcl_Condition); cdecl;
TFMutexFinalize = procedure(mutex: PTcl_Mutex); cdecl;
PTcl_ThreadId = ^Tcl_ThreadId;
PTcl_ThreadCreateProc = ^Tcl_ThreadCreateProc;
TFCreateThread = function(idPtr: PTcl_ThreadId; proc: PTcl_ThreadCreateProc; clientData: ClientData; stackSize: cint; flags: cint):cint; cdecl;
TFReadRaw = function(chan: Tcl_Channel; dst: Pchar; bytesToRead: cint):cint; cdecl;
TFWriteRaw = function(chan: Tcl_Channel; src: Pchar; srcLen: cint):cint; cdecl;
TFGetTopChannel = function(chan: Tcl_Channel):Tcl_Channel; cdecl;
TFChannelBuffered = function(chan: Tcl_Channel):cint; cdecl;
TFChannelName = function(chanTypePtr: PTcl_ChannelType):Pchar; cdecl;
TFChannelVersion = function(chanTypePtr: PTcl_ChannelType):Tcl_ChannelTypeVersion; cdecl;
PTcl_DriverBlockModeProc = ^Tcl_DriverBlockModeProc;
TFChannelBlockModeProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverBlockModeProc; cdecl;
PTcl_DriverCloseProc = ^Tcl_DriverCloseProc;
TFChannelCloseProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverCloseProc; cdecl;
PTcl_DriverClose2Proc = ^Tcl_DriverClose2Proc;
TFChannelClose2Proc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverClose2Proc; cdecl;
PTcl_DriverInputProc = ^Tcl_DriverInputProc;
TFChannelInputProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverInputProc; cdecl;
PTcl_DriverOutputProc = ^Tcl_DriverOutputProc;
TFChannelOutputProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverOutputProc; cdecl;
PTcl_DriverSeekProc = ^Tcl_DriverSeekProc;
TFChannelSeekProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverSeekProc; cdecl;
PTcl_DriverSetOptionProc = ^Tcl_DriverSetOptionProc;
TFChannelSetOptionProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverSetOptionProc; cdecl;
PTcl_DriverGetOptionProc = ^Tcl_DriverGetOptionProc;
TFChannelGetOptionProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverGetOptionProc; cdecl;
PTcl_DriverWatchProc = ^Tcl_DriverWatchProc;
TFChannelWatchProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverWatchProc; cdecl;
PTcl_DriverGetHandleProc = ^Tcl_DriverGetHandleProc;
TFChannelGetHandleProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverGetHandleProc; cdecl;
PTcl_DriverFlushProc = ^Tcl_DriverFlushProc;
TFChannelFlushProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverFlushProc; cdecl;
PTcl_DriverHandlerProc = ^Tcl_DriverHandlerProc;
TFChannelHandlerProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverHandlerProc; cdecl;
TFJoinThread = function(threadId: Tcl_ThreadId; result: pcint):cint; cdecl;
TFIsChannelShared = function(channel: Tcl_Channel):cint; cdecl;
TFIsChannelRegistered = function(interp: PTcl_Interp; channel: Tcl_Channel):cint; cdecl;
TFCutChannel = procedure(channel: Tcl_Channel); cdecl;
TFSpliceChannel = procedure(channel: Tcl_Channel); cdecl;
TFClearChannelHandlers = procedure(channel: Tcl_Channel); cdecl;
TFIsChannelExisting = function(channelName: Pchar):cint; cdecl;
TFUniCharNcasecmp = function(ucs: PTcl_UniChar; uct: PTcl_UniChar; numChars: longword):cint; cdecl;
TFUniCharCaseMatch = function(uniStr: PTcl_UniChar; uniPattern: PTcl_UniChar; nocase: cint):cint; cdecl;
TFFindHashEntry = function(tablePtr: PTcl_HashTable; key: Pointer):PTcl_HashEntry; cdecl;
TFCreateHashEntry = function(tablePtr: PTcl_HashTable; key: Pointer; newPtr: pcint):PTcl_HashEntry; cdecl;
PTcl_HashKeyType = ^Tcl_HashKeyType;
TFInitCustomHashTable = procedure(tablePtr: PTcl_HashTable; keyType: cint; typePtr: PTcl_HashKeyType); cdecl;
TFInitObjHashTable = procedure(tablePtr: PTcl_HashTable); cdecl;
PTcl_CommandTraceProc = ^Tcl_CommandTraceProc;
TFCommandTraceInfo = function(interp: PTcl_Interp; varName: Pchar; flags: cint; procPtr: PTcl_CommandTraceProc; prevClientData: ClientData):ClientData; cdecl;
TFTraceCommand = function(interp: PTcl_Interp; varName: Pchar; flags: cint; proc: PTcl_CommandTraceProc; clientData: ClientData):cint; cdecl;
TFUntraceCommand = procedure(interp: PTcl_Interp; varName: Pchar; flags: cint; proc: PTcl_CommandTraceProc; clientData: ClientData); cdecl;
TFAttemptAlloc = function(size: longint):Pchar; cdecl;
TFAttemptDbCkalloc = function(size: longint; fileName: Pchar; line: cint):Pchar; cdecl;
TFAttemptRealloc = function(ptr: Pchar; size: longint):Pchar; cdecl;
TFAttemptDbCkrealloc = function(ptr: Pchar; size: longint; fileName: Pchar; line: cint):Pchar; cdecl;
TFAttemptSetObjLength = function(objPtr: PTcl_Obj; length: cint):cint; cdecl;
TFGetChannelThread = function(channel: Tcl_Channel):Tcl_ThreadId; cdecl;
TFGetUnicodeFromObj = function(objPtr: PTcl_Obj; lengthPtr: pcint):PTcl_UniChar; cdecl;
TFGetMathFuncInfo = function(interp: PTcl_Interp; name: Pchar; numArgsPtr: pcint; argTypesPtr: PTcl_ValueType; procPtr: PTcl_MathProc; clientDataPtr: PClientData):cint; cdecl;
TFListMathFuncs = function(interp: PTcl_Interp; pattern: Pchar):PTcl_Obj; cdecl;
TFSubstObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; flags: cint):PTcl_Obj; cdecl;
TFDetachChannel = function(interp: PTcl_Interp; channel: Tcl_Channel):cint; cdecl;
TFIsStandardChannel = function(channel: Tcl_Channel):cint; cdecl;
TFFSCopyFile = function(srcPathPtr: PTcl_Obj; destPathPtr: PTcl_Obj):cint; cdecl;
TFFSCopyDirectory = function(srcPathPtr: PTcl_Obj; destPathPtr: PTcl_Obj; errorPtr: PTcl_Obj):cint; cdecl;
TFFSCreateDirectory = function(pathPtr: PTcl_Obj):cint; cdecl;
TFFSDeleteFile = function(pathPtr: PTcl_Obj):cint; cdecl;
PTcl_LoadHandle = ^Tcl_LoadHandle;
PTcl_FSUnloadFileProc = ^Tcl_FSUnloadFileProc;
TFFSLoadFile = function(interp: PTcl_Interp; pathPtr: PTcl_Obj; sym1: Pchar; sym2: Pchar; proc1Ptr: PTcl_PackageInitProc; proc2Ptr: PTcl_PackageInitProc; handlePtr: PTcl_LoadHandle; unloadProcPtr: PTcl_FSUnloadFileProc):cint; cdecl;
PTcl_GlobTypeData = ^Tcl_GlobTypeData;
TFFSMatchInDirectory = function(interp: PTcl_Interp; result: PTcl_Obj; pathPtr: PTcl_Obj; pattern: Pchar; types: PTcl_GlobTypeData):cint; cdecl;
TFFSLink = function(pathPtr: PTcl_Obj; toPtr: PTcl_Obj; linkAction: cint):PTcl_Obj; cdecl;
TFFSRemoveDirectory = function(pathPtr: PTcl_Obj; recursive: cint; errorPtr: PTcl_Obj):cint; cdecl;
TFFSRenameFile = function(srcPathPtr: PTcl_Obj; destPathPtr: PTcl_Obj):cint; cdecl;
PTcl_StatBuf = ^Tcl_StatBuf;
TFFSLstat = function(pathPtr: PTcl_Obj; buf: PTcl_StatBuf):cint; cdecl;
TFFSUtime = function(pathPtr: PTcl_Obj; tval: Pointer):cint; cdecl;
TFFSFileAttrsGet = function(interp: PTcl_Interp; index: cint; pathPtr: PTcl_Obj; objPtrRef: PTcl_Obj):cint; cdecl;
TFFSFileAttrsSet = function(interp: PTcl_Interp; index: cint; pathPtr: PTcl_Obj; objPtr: PTcl_Obj):cint; cdecl;
TFFSFileAttrStrings = function(pathPtr: PTcl_Obj; objPtrRef: PTcl_Obj):Pchar; cdecl;
TFFSStat = function(pathPtr: PTcl_Obj; buf: PTcl_StatBuf):cint; cdecl;
TFFSAccess = function(pathPtr: PTcl_Obj; mode: cint):cint; cdecl;
TFFSOpenFileChannel = function(interp: PTcl_Interp; pathPtr: PTcl_Obj; modeString: Pchar; permissions: cint):Tcl_Channel; cdecl;
TFFSGetCwd = function(interp: PTcl_Interp):PTcl_Obj; cdecl;
TFFSChdir = function(pathPtr: PTcl_Obj):cint; cdecl;
TFFSConvertToPathType = function(interp: PTcl_Interp; pathPtr: PTcl_Obj):cint; cdecl;
TFFSJoinPath = function(listObj: PTcl_Obj; elements: cint):PTcl_Obj; cdecl;
TFFSSplitPath = function(pathPtr: PTcl_Obj; lenPtr: pcint):PTcl_Obj; cdecl;
TFFSEqualPaths = function(firstPtr: PTcl_Obj; secondPtr: PTcl_Obj):cint; cdecl;
TFFSGetNormalizedPath = function(interp: PTcl_Interp; pathPtr: PTcl_Obj):PTcl_Obj; cdecl;
TFFSJoinToPath = function(pathPtr: PTcl_Obj; objc: cint; objv: PPTcl_Obj):PTcl_Obj; cdecl;
PTcl_Filesystem = ^Tcl_Filesystem;
TFFSGetInternalRep = function(pathPtr: PTcl_Obj; fsPtr: PTcl_Filesystem):ClientData; cdecl;
TFFSGetTranslatedPath = function(interp: PTcl_Interp; pathPtr: PTcl_Obj):PTcl_Obj; cdecl;
TFFSEvalFile = function(interp: PTcl_Interp; fileName: PTcl_Obj):cint; cdecl;
TFFSNewNativePath = function(fromFilesystem: PTcl_Filesystem; clientData: ClientData):PTcl_Obj; cdecl;
TFFSGetNativePath = function(pathPtr: PTcl_Obj):Pointer; cdecl;
TFFSFileSystemInfo = function(pathPtr: PTcl_Obj):PTcl_Obj; cdecl;
TFFSPathSeparator = function(pathPtr: PTcl_Obj):PTcl_Obj; cdecl;
TFFSListVolumes = function():PTcl_Obj; cdecl;
TFFSRegister = function(clientData: ClientData; fsPtr: PTcl_Filesystem):cint; cdecl;
TFFSUnregister = function(fsPtr: PTcl_Filesystem):cint; cdecl;
TFFSData = function(fsPtr: PTcl_Filesystem):ClientData; cdecl;
TFFSGetTranslatedStringPath = function(interp: PTcl_Interp; pathPtr: PTcl_Obj):Pchar; cdecl;
TFFSGetFileSystemForPath = function(pathPtr: PTcl_Obj):PTcl_Filesystem; cdecl;
TFFSGetPathType = function(pathPtr: PTcl_Obj):Tcl_PathType; cdecl;
TFOutputBuffered = function(chan: Tcl_Channel):cint; cdecl;
TFFSMountsChanged = procedure(fsPtr: PTcl_Filesystem); cdecl;
TFEvalTokensStandard = function(interp: PTcl_Interp; tokenPtr: PTcl_Token; count: cint):cint; cdecl;
TFGetTime = procedure(timeBuf: PTcl_Time); cdecl;
PTcl_CmdObjTraceProc = ^Tcl_CmdObjTraceProc;
PTcl_CmdObjTraceDeleteProc = ^Tcl_CmdObjTraceDeleteProc;
TFCreateObjTrace = function(interp: PTcl_Interp; level: cint; flags: cint; objProc: PTcl_CmdObjTraceProc; clientData: ClientData; delProc: PTcl_CmdObjTraceDeleteProc):Tcl_Trace; cdecl;
TFGetCommandInfoFromToken = function(token: Tcl_Command; infoPtr: PTcl_CmdInfo):cint; cdecl;
TFSetCommandInfoFromToken = function(token: Tcl_Command; infoPtr: PTcl_CmdInfo):cint; cdecl;
TFDbNewWideIntObj = function(wideValue: Tcl_WideInt; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
PTcl_WideInt = ^Tcl_WideInt;
TFGetWideIntFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; widePtr: PTcl_WideInt):cint; cdecl;
TFNewWideIntObj = function(wideValue: Tcl_WideInt):PTcl_Obj; cdecl;
TFSetWideIntObj = procedure(objPtr: PTcl_Obj; wideValue: Tcl_WideInt); cdecl;
TFAllocStatBuf = function():PTcl_StatBuf; cdecl;
TFSeek = function(chan: Tcl_Channel; offset: Tcl_WideInt; mode: cint):Tcl_WideInt; cdecl;
TFTell = function(chan: Tcl_Channel):Tcl_WideInt; cdecl;
PTcl_DriverWideSeekProc = ^Tcl_DriverWideSeekProc;
TFChannelWideSeekProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverWideSeekProc; cdecl;
TFDictObjPut = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; keyPtr: PTcl_Obj; valuePtr: PTcl_Obj):cint; cdecl;
TFDictObjGet = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; keyPtr: PTcl_Obj; valuePtrPtr: PTcl_Obj):cint; cdecl;
TFDictObjRemove = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; keyPtr: PTcl_Obj):cint; cdecl;
TFDictObjSize = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; sizePtr: pcint):cint; cdecl;
PTcl_DictSearch = ^Tcl_DictSearch;
TFDictObjFirst = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; searchPtr: PTcl_DictSearch; keyPtrPtr: PTcl_Obj; valuePtrPtr: PTcl_Obj; donePtr: pcint):cint; cdecl;
TFDictObjNext = procedure(searchPtr: PTcl_DictSearch; keyPtrPtr: PTcl_Obj; valuePtrPtr: PTcl_Obj; donePtr: pcint); cdecl;
TFDictObjDone = procedure(searchPtr: PTcl_DictSearch); cdecl;
TFDictObjPutKeyList = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; keyc: cint; keyv: PTcl_Obj; valuePtr: PTcl_Obj):cint; cdecl;
TFDictObjRemoveKeyList = function(interp: PTcl_Interp; dictPtr: PTcl_Obj; keyc: cint; keyv: PTcl_Obj):cint; cdecl;
TFNewDictObj = function():PTcl_Obj; cdecl;
TFDbNewDictObj = function(fileName: Pchar; line: cint):PTcl_Obj; cdecl;
PTcl_Config = ^Tcl_Config;
TFRegisterConfig = procedure(interp: PTcl_Interp; pkgName: Pchar; configuration: PTcl_Config; valEncoding: Pchar); cdecl;
PTcl_Namespace = ^Tcl_Namespace;
PTcl_NamespaceDeleteProc = ^Tcl_NamespaceDeleteProc;
TFCreateNamespace = function(interp: PTcl_Interp; name: Pchar; clientData: ClientData; deleteProc: PTcl_NamespaceDeleteProc):PTcl_Namespace; cdecl;
TFDeleteNamespace = procedure(nsPtr: PTcl_Namespace); cdecl;
TFAppendExportList = function(interp: PTcl_Interp; nsPtr: PTcl_Namespace; objPtr: PTcl_Obj):cint; cdecl;
TFExport = function(interp: PTcl_Interp; nsPtr: PTcl_Namespace; pattern: Pchar; resetListFirst: cint):cint; cdecl;
TFImport = function(interp: PTcl_Interp; nsPtr: PTcl_Namespace; pattern: Pchar; allowOverwrite: cint):cint; cdecl;
TFForgetImport = function(interp: PTcl_Interp; nsPtr: PTcl_Namespace; pattern: Pchar):cint; cdecl;
TFGetCurrentNamespace = function(interp: PTcl_Interp):PTcl_Namespace; cdecl;
TFGetGlobalNamespace = function(interp: PTcl_Interp):PTcl_Namespace; cdecl;
TFFindNamespace = function(interp: PTcl_Interp; name: Pchar; contextNsPtr: PTcl_Namespace; flags: cint):PTcl_Namespace; cdecl;
TFFindCommand = function(interp: PTcl_Interp; name: Pchar; contextNsPtr: PTcl_Namespace; flags: cint):Tcl_Command; cdecl;
TFGetCommandFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj):Tcl_Command; cdecl;
TFGetCommandFullName = procedure(interp: PTcl_Interp; command: Tcl_Command; objPtr: PTcl_Obj); cdecl;
TFFSEvalFileEx = function(interp: PTcl_Interp; fileName: PTcl_Obj; encodingName: Pchar):cint; cdecl;
TFSetExitProc = function(proc: PTcl_ExitProc):PTcl_ExitProc; cdecl;
PTcl_LimitHandlerProc = ^Tcl_LimitHandlerProc;
PTcl_LimitHandlerDeleteProc = ^Tcl_LimitHandlerDeleteProc;
TFLimitAddHandler = procedure(interp: PTcl_Interp; typeVal: cint; handlerProc: PTcl_LimitHandlerProc; clientData: ClientData; deleteProc: PTcl_LimitHandlerDeleteProc); cdecl;
TFLimitRemoveHandler = procedure(interp: PTcl_Interp; typeVal: cint; handlerProc: PTcl_LimitHandlerProc; clientData: ClientData); cdecl;
TFLimitReady = function(interp: PTcl_Interp):cint; cdecl;
TFLimitCheck = function(interp: PTcl_Interp):cint; cdecl;
TFLimitExceeded = function(interp: PTcl_Interp):cint; cdecl;
TFLimitSetCommands = procedure(interp: PTcl_Interp; commandLimit: cint); cdecl;
TFLimitSetTime = procedure(interp: PTcl_Interp; timeLimitPtr: PTcl_Time); cdecl;
TFLimitSetGranularity = procedure(interp: PTcl_Interp; typeVal: cint; granularity: cint); cdecl;
TFLimitTypeEnabled = function(interp: PTcl_Interp; typeVal: cint):cint; cdecl;
TFLimitTypeExceeded = function(interp: PTcl_Interp; typeVal: cint):cint; cdecl;
TFLimitTypeSet = procedure(interp: PTcl_Interp; typeVal: cint); cdecl;
TFLimitTypeReset = procedure(interp: PTcl_Interp; typeVal: cint); cdecl;
TFLimitGetCommands = function(interp: PTcl_Interp):cint; cdecl;
TFLimitGetTime = procedure(interp: PTcl_Interp; timeLimitPtr: PTcl_Time); cdecl;
TFLimitGetGranularity = function(interp: PTcl_Interp; typeVal: cint):cint; cdecl;
TFSaveInterpState = function(interp: PTcl_Interp; status: cint):Tcl_InterpState; cdecl;
TFRestoreInterpState = function(interp: PTcl_Interp; state: Tcl_InterpState):cint; cdecl;
TFDiscardInterpState = procedure(state: Tcl_InterpState); cdecl;
TFSetReturnOptions = function(interp: PTcl_Interp; options: PTcl_Obj):cint; cdecl;
TFGetReturnOptions = function(interp: PTcl_Interp; result: cint):PTcl_Obj; cdecl;
TFIsEnsemble = function(token: Tcl_Command):cint; cdecl;
TFCreateEnsemble = function(interp: PTcl_Interp; name: Pchar; namespacePtr: PTcl_Namespace; flags: cint):Tcl_Command; cdecl;
TFFindEnsemble = function(interp: PTcl_Interp; cmdNameObj: PTcl_Obj; flags: cint):Tcl_Command; cdecl;
TFSetEnsembleSubcommandList = function(interp: PTcl_Interp; token: Tcl_Command; subcmdList: PTcl_Obj):cint; cdecl;
TFSetEnsembleMappingDict = function(interp: PTcl_Interp; token: Tcl_Command; mapDict: PTcl_Obj):cint; cdecl;
TFSetEnsembleUnknownHandler = function(interp: PTcl_Interp; token: Tcl_Command; unknownList: PTcl_Obj):cint; cdecl;
TFSetEnsembleFlags = function(interp: PTcl_Interp; token: Tcl_Command; flags: cint):cint; cdecl;
TFGetEnsembleSubcommandList = function(interp: PTcl_Interp; token: Tcl_Command; subcmdListPtr: PTcl_Obj):cint; cdecl;
TFGetEnsembleMappingDict = function(interp: PTcl_Interp; token: Tcl_Command; mapDictPtr: PTcl_Obj):cint; cdecl;
TFGetEnsembleUnknownHandler = function(interp: PTcl_Interp; token: Tcl_Command; unknownListPtr: PTcl_Obj):cint; cdecl;
TFGetEnsembleFlags = function(interp: PTcl_Interp; token: Tcl_Command; flagsPtr: pcint):cint; cdecl;
TFGetEnsembleNamespace = function(interp: PTcl_Interp; token: Tcl_Command; namespacePtrPtr: PTcl_Namespace):cint; cdecl;
PTcl_GetTimeProc = ^Tcl_GetTimeProc;
PTcl_ScaleTimeProc = ^Tcl_ScaleTimeProc;
TFSetTimeProc = procedure(getProc: PTcl_GetTimeProc; scaleProc: PTcl_ScaleTimeProc; clientData: ClientData); cdecl;
TFQueryTimeProc = procedure(getProc: PTcl_GetTimeProc; scaleProc: PTcl_ScaleTimeProc; clientData: PClientData); cdecl;
PTcl_DriverThreadActionProc = ^Tcl_DriverThreadActionProc;
TFChannelThreadActionProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverThreadActionProc; cdecl;
TFNewBignumObj = function(value: Pointer):PTcl_Obj; cdecl;
TFDbNewBignumObj = function(value: Pointer; fileName: Pchar; line: cint):PTcl_Obj; cdecl;
TFSetBignumObj = procedure(obj: PTcl_Obj; value: Pointer); cdecl;
TFGetBignumFromObj = function(interp: PTcl_Interp; obj: PTcl_Obj; value: Pointer):cint; cdecl;
TFTakeBignumFromObj = function(interp: PTcl_Interp; obj: PTcl_Obj; value: Pointer):cint; cdecl;
TFTruncateChannel = function(chan: Tcl_Channel; length: Tcl_WideInt):cint; cdecl;
PTcl_DriverTruncateProc = ^Tcl_DriverTruncateProc;
TFChannelTruncateProc = function(chanTypePtr: PTcl_ChannelType):PTcl_DriverTruncateProc; cdecl;
TFSetChannelErrorInterp = procedure(interp: PTcl_Interp; msg: PTcl_Obj); cdecl;
TFGetChannelErrorInterp = procedure(interp: PTcl_Interp; msg: PTcl_Obj); cdecl;
TFSetChannelError = procedure(chan: Tcl_Channel; msg: PTcl_Obj); cdecl;
TFGetChannelError = procedure(chan: Tcl_Channel; msg: PTcl_Obj); cdecl;
TFInitBignumFromDouble = function(interp: PTcl_Interp; initval: double; toInit: Pointer):cint; cdecl;
TFGetNamespaceUnknownHandler = function(interp: PTcl_Interp; nsPtr: PTcl_Namespace):PTcl_Obj; cdecl;
TFSetNamespaceUnknownHandler = function(interp: PTcl_Interp; nsPtr: PTcl_Namespace; handlerPtr: PTcl_Obj):cint; cdecl;
PTcl_Encoding = ^Tcl_Encoding;
TFGetEncodingFromObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; encodingPtr: PTcl_Encoding):cint; cdecl;
TFGetEncodingSearchPath = function():PTcl_Obj; cdecl;
TFSetEncodingSearchPath = function(searchPath: PTcl_Obj):cint; cdecl;
TFGetEncodingNameFromEnvironment = function(bufPtr: PTcl_DString):Pchar; cdecl;
TFPkgRequireProc = function(interp: PTcl_Interp; name: Pchar; objc: cint; objv: PPTcl_Obj; clientDataPtr: Pointer):cint; cdecl;
TFAppendObjToErrorInfo = procedure(interp: PTcl_Interp; objPtr: PTcl_Obj); cdecl;
TFAppendLimitedToObj = procedure(objPtr: PTcl_Obj; bytes: Pchar; length: cint; limit: cint; ellipsis: Pchar); cdecl;
TFFormat = function(interp: PTcl_Interp; format: Pchar; objc: cint; objv: PPTcl_Obj):PTcl_Obj; cdecl;
TFAppendFormatToObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; format: Pchar; objc: cint; objv: PPTcl_Obj):cint; cdecl;
TFObjPrintf = function(format: Pchar):PTcl_Obj; cdecl; varargs;
TFAppendPrintfToObj = procedure(objPtr: PTcl_Obj; format: Pchar); cdecl; varargs;
TFCancelEval = function(interp: PTcl_Interp; resultObjPtr: PTcl_Obj; clientData: ClientData; flags: cint):cint; cdecl;
TFCanceled = function(interp: PTcl_Interp; flags: cint):cint; cdecl;
PTcl_Channel = ^Tcl_Channel;
TFCreatePipe = function(interp: PTcl_Interp; rchan: PTcl_Channel; wchan: PTcl_Channel; flags: cint):cint; cdecl;
TFNRCreateCommand = function(interp: PTcl_Interp; cmdName: Pchar; proc: PTcl_ObjCmdProc; nreProc: PTcl_ObjCmdProc; clientData: ClientData; deleteProc: PTcl_CmdDeleteProc):Tcl_Command; cdecl;
TFNREvalObj = function(interp: PTcl_Interp; objPtr: PTcl_Obj; flags: cint):cint; cdecl;
TFNREvalObjv = function(interp: PTcl_Interp; objc: cint; objv: PPTcl_Obj; flags: cint):cint; cdecl;
TFNRCmdSwap = function(interp: PTcl_Interp; cmd: Tcl_Command; objc: cint; objv: PPTcl_Obj; flags: cint):cint; cdecl;
PTcl_NRPostProc = ^Tcl_NRPostProc;
TFNRAddCallback = procedure(interp: PTcl_Interp; postProcPtr: PTcl_NRPostProc; data0: ClientData; data1: ClientData; data2: ClientData; data3: ClientData); cdecl;
TFNRCallObjProc = function(interp: PTcl_Interp; objProc: PTcl_ObjCmdProc; clientData: ClientData; objc: cint; objv: PPTcl_Obj):cint; cdecl;
TFGetFSDeviceFromStat = function(statPtr: PTcl_StatBuf):cardinal; cdecl;
